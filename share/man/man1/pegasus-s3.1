.\"  Copyright 2011 University Of Southern California
.\"
.\" Licensed under the Apache License, Version 2.0 (the "License");
.\" you may not use this file except in compliance with the License.
.\" You may obtain a copy of the License at
.\"
.\"  http://www.apache.org/licenses/LICENSE-2.0
.\"
.\"  Unless required by applicable law or agreed to in writing,
.\"  software distributed under the License is distributed on an "AS IS" BASIS,
.\"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
.\"  See the License for the specific language governing permissions and
.\" limitations under the License.
.\"
.TH pegasus-s3 1  "August 30, 2011" "" "Pegasus S3 client"
.SH NAME
pegasus\-s3 \- Upload, download, delete objects in Amazon S3
.SH SYNOPSIS
.B pegasus\-s3 help
.br
.B pegasus\-s3 ls 
[options] URL
.br
.B pegasus\-s3 mkdir 
[options] URL...
.br
.B pegasus\-s3 rmdir 
[options] URL...
.br
.B pegasus\-s3 rm 
[options] [URL...]
.br
.B pegasus\-s3 put 
[options] FILE URL
.br
.B pegasus\-s3 get 
[options] URL [FILE]
.br
.B pegasus\-s3 lsup 
[options] URL
.br
.B pegasus\-s3 rmup 
[options] URL [UPLOAD]



.SH DESCRIPTION
pegasus\-s3 is a client for the Amazon S3 object storage service 
and any other storage services that conform to the Amazon S3 API, 
such as Eucalyptus Walrus.




.SH OPTIONS


.SS Global Options
.TP
\-h, \-\-help
Show help message for subcommand and exit
.TP
\-d, \-\-debug
Turn on debugging
\-v, \-\-verbose
Show progress messages
.TP
\-C FILE, \-\-conf=FILE
Path to configuration file


.SS rm Options
.TP
\-f, \-\-force
If the URL does not exist, then ignore the error.
.TP
\-F FILE, \-\-file=FILE
File containing a list of URLs to delete


.SS put Options
.TP
\-c X, \-\-chunksize=X
Set the chunk size for multipart uploads to X MB. A value of 0 
disables multipart uploads. The default is 10MB, the min is 5MB 
and the max is 1024MB. This parameter only applies for sites that 
support multipart uploads (see multipart_uploads configuration
parameter). The maximum number of chunks is 10,000, so if you are 
uploading a large file, then the chunksize is automatically 
increased to enable the upload. Choose smaller values to reduce 
the impact of transient failures.
.TP
\-p N, \-\-parallel=N
Use N threads to upload FILE in parallel. The default value is 0, which 
disables parallel uploads. This parameter is only valid if the site 
supports mulipart uploads and the --chunksize parameter is not 0.
.TP
-b, --create-bucket
Create the destination bucket if it does not already exist


.SS get Options
.TP
\-c X, \-\-chunksize=X 
Set the chunk size for parallel downloads to X megabytes. A value of 0 will 
avoid chunked reads. This option only applies for sites that support ranged
downloads (see ranged_downloads configuration parameter). The default chunk 
size is 10MB, the min is 1MB and the max is 1024MB. Choose smaller values to
reduce the impact of transient failures.
.TP
\-p N, \-\-parallel=N
Use N threads to upload FILE in parallel. The default value is 0, which 
disables parallel downloads. This parameter is only valid if the site 
supports ranged downloads and the --chunksize parameter is not 0.


.SS rmup Options
.TP
\-a, \-\-all
Cancel all uploads for the specified bucket




.SH SUBCOMMANDS
pegasus-s3 has several subcommands for different storage service operations.
.TP
.B help
The help subcommand lists all available subcommands.
.TP
.B ls
The 
.B ls 
subcommand lists the contents of a URL. If the URL does not contain 
a bucket, then all the buckets owned by the user are listed. If the URL 
contains a bucket, but no key, then all the keys in the bucket are listed. 
If the URL contains a bucket and a key, then all keys in the bucket that 
begin with the specified key are listed.
.TP
.B mkdir
The 
.B mkdir 
subcommand creates one or more buckets.
.TP
.B rmdir
The 
.B rmdir 
subcommand deletes one or more buckets from the storage service. 
In order to delete a bucket, the bucket must be empty.
.TP
.B rm
The 
.B rm 
subcommand deletes one or more keys from the storage service.
.TP
.B put
The 
.B put 
subcommand stores the file specified by FILE in the storage service 
under the bucket and key specified by URL. If the URL contains a bucket, 
but not a key, then the file name is used as the key.
.IP
If a transient failure occurs, then the upload will be retried several 
times before pegasus\-s3 gives up and fails.
.IP
The 
.B put 
subcommand can do both chunked and parallel uploads if the service 
supports multipart uploads (see 
.B multipart_uploads 
in the 
.B CONFIGURATION
section). Currently only Amazon S3 supports multipart uploads.
.IP
This subcommand will check the size of the file to make sure it can 
be stored before attempting to store it.
.IP
Chunked uploads are useful to reduce the probability of an upload 
failing. If an upload is chunked, then pegasus\-s3 issues separate 
PUT requests for each chunk of the file. Specifying smaller chunks 
(using --chunksize) will reduce the chances of an upload failing due 
to a transient error. Chunksizes can range from 5 MB to 1GB (chunk 
sizes smaller than 5 MB produced incomplete uploads on Amazon S3). 
The maximum number of chunks for any single file is 10,000, so if a 
large file is being uploaded with a small chunksize, then the chunksize 
will be increased to fit within the 10,000 chunk limit. By default, 
the file will be split into 10 MB chunks if the storage service 
supports multipart uploads. Chunked uploads can be disabled by specifying 
a chunksize of 0. If the upload is chunked, then each chunk is retried 
independently under transient failures. If any chunk fails permanently, 
then the upload is aborted.
.IP
Parallel uploads can increase performance for services that support 
multipart uploads. In a parallel upload the file is split into N 
chunks and each chunk is uploaded concurrently by one of M threads 
in first-come, first-served fashion. If the chunksize is set to 0, 
then parallel uploads are disabled. If M > N, then the actual number 
of threads used will be reduced to N. The number of threads can be 
specified using the --parallel argument. If --parallel is 0 or 1, 
then only a single thread is used. The default value is 0. There is 
no maximum number of threads, but it is likely that the link will 
be saturated by ~4 threads. Very high-bandwidth, long-delay links 
may get better results with up to ~8 threads.
.IP
Under certain circumstances, when a multipart upload fails it could 
leave behind data on the server. When a failure occurs the 
.B put 
subcommand will attempt to abort the upload. If the upload cannot be 
aborted, then a partial upload may remain on the server. To check 
for partial uploads run the
.B lsup 
subcommand. If you see an upload that failed in the output of
.B lsup
, then run the 
.B rmup 
subcommand to remove it.
.TP
.B get
The 
.B get 
subcommand retrieves an object from the storage service identified 
by URL and stores it in the file specified by FILE. If FILE is not 
specified, then the key is used as the file name (Note: if the key 
has slashes, then the file name will be a relative subdirectory, 
but pegasus\-s3 will not create the subdirectory if it does not exist).
.IP
If a transient failure occurs, then the download will be retried 
several times before pegasus\-s3 gives up and fails.
.IP
The 
.B get 
subcommand can do both chunked and parallel downloads if the service 
supports ranged downloads (see 
.B ranged_downloads 
in the 
.B CONFIGURATION
section). Currently only Amazon S3 has good support for ranged 
downloads. Eucalyptus Walrus supports ranged downloads, but the 
current release, 1.6, is inconsistent with the Amazon interface 
and has a bug that causes ranged downloads to hang in some cases. 
It is recommended that ranged downloads not be used with Eucalyptus 
until these issues are resolved.
.IP
Chunked downloads can be used to reduce the probability of a 
download failing. When a download is chunked, pegasus\-s3 issues 
separate GET requests for each chunk of the file. Specifying 
smaller chunks (using --chunksize) will reduce the chances that 
a download will fail to do a transient error. Chunk sizes can 
range from 1 MB to 1 GB. By default, a download will be split 
into 10 MB chunks if the site supports ranged downloads. Chunked 
downloads can be disabled by specifying a --chunksize of 0. If 
a download is chunked, then each chunk is retried independently 
under transient failures. If any chunk fails permanently, then 
the download is aborted.
.IP
Parallel downloads can increase performance for services that 
support ranged downloads. In a parallel download, the file to 
be retrieved is split into N chunks and each chunk is downloaded 
concurrently by one of M threads in a first-come, first-served 
fashion. If the chunksize is 0, then parallel downloads are 
disabled. If M > N, then the actual number of threads used will 
be reduced to N. The number of threads can be specified using the 
--parallel argument. If --parallel is 0 or 1, then only a single 
thread is used. The default value is 0. There is no maximum number 
of threads, but it is likely that the link will be saturated by 
~4 threads. Very high-bandwidth, long-delay links may get better 
results with up to ~8 threads.
.TP
.B lsup
The 
.B lsup 
subcommand lists active multipart uploads. The URL specified 
should point to a bucket. This command is only valid if the 
site supports multipart uploads. The output of this command 
is a list of keys and upload IDs.
.IP
This subcommand is used with 
.B rmup 
to help recover from failures of multipart uploads.
.TP
.B rmup
The 
.B rmup 
subcommand cancels and active upload. The URL specified should 
point to a bucket, and UPLOAD is the long, complicated upload 
ID shown by the 
.B lsup 
subcommand.
.IP
This subcommand is used with 
.B lsup 
to recover from failures of multipart uploads.




.SH URL FORMAT
All URLs for objects stored in S3 should be specified in the 
following format:
.IP
s3[s]://USER@SITE[/BUCKET[/KEY]]
.PP
The protocol part can be s3:// or s3s://. If s3s:// is used, then pegasus\-s3 
will force the connection to use SSL and override the setting in the 
configuration file. If s3:// is used, then whether the connection uses SSL or 
not is determined by the value of the 'endpoint' variable in the configuration 
for the site.
.PP
The USER@SITE part is required, but the BUCKET and KEY parts may be optional 
depending on the context.
.PP
The USER@SITE portion is referred to as the 'identity', and the SITE portion 
is referred to as the site. Both the identity and the site are looked up in 
the configuration file (see
.B CONFIGURATION
) to determine the 
parameters to use when establishing a connection to the service. The site 
portion is used to find the host and port, whether to use SSL, and other 
things. The identity portion is used to determine which authentication 
tokens to use. This format is designed to enable users to easily use 
multiple services with multiple authentication tokens. Note that neither 
the USER nor the SITE portion of the URL have any meaning outside of 
pegasus\-s3. They do not refer to real usernames or hostnames, but are 
rather handles used to look up configuration values in the configuration 
file.
.PP
The BUCKET portion of the URL is the part between the 3rd and 4th slashes. 
Buckets are part of a global namespace that is shared with other users of 
the storage service. As such, they should be unique.
.PP
The KEY portion of the URL is anything after the 4th slash. Keys can 
include slashes, but S3-like storage services do not have the concept of 
a directory like regular file systems. Instead, keys are treated like opaque 
identifiers for individual objects. So, for example, the keys 'a/b' and 'a/c' 
have a common prefix, but cannot be said to be in the same 'directory'.
.PP
Some example URLs are:
.IP
.RS
.nf
s3://ewa@amazon
s3://juve@skynet/gideon.isi.edu
s3://juve@magellan/pegasus-images/centos-5.5-x86_64-20101101.part.1
s3s://ewa@amazon/pegasus-images/data.tar.gz
.if
.RE




.SH CONFIGURATION
Each user should specify a configuration file that pegasus-s3 will use to 
look up connection parameters and authentication tokens.


.SS Search Path
.PP
This client will look in the following locations, in order, to locate the 
user's configuration file:
.IP
1. The -C/--conf argument
.br
2. The S3CFG environment variable
.br
3. $HOME/.s3cfg
.PP
If it does not find the configuration file in one of these locations it 
will fail with an error.


.SS Configuration File Format
.PP
The configuration file is in INI format and contains two types of entries.
.PP
The first type of entry is a site entry, which specifies the configuration 
for a storage service. This entry specifies the service endpoint that 
pegasus\-s3 should connect to for the site, and some optional features 
that the site may support. Here is an example of a site entry for Amazon S3:
.IP
.nf
[amazon]
endpoint = http://s3.amazonaws.com/
.fi
.PP
The other type of entry is an identity entry, which specifies the 
authentication information for a user at a particular site. Here is an example 
of an identity entry:
.IP
.nf
[pegasus@amazon]
access_key = 90c4143642cb097c88fe2ec66ce4ad4e
secret_key = a0e3840e5baee6abb08be68e81674dca
.fi
.PP
It is important to note that user names and site names used are only 
logical--they do not correspond to actual hostnames or usernames, but 
are simply used as a convenient way to refer to the services and 
identities used by the client.
.PP
The configuration file should be saved with limited permissions. Only the 
owner of the file should be able to read from it and write to it (i.e. it 
should have permissions of 0600 or 0400). If the file has more liberal 
permissions, then pegasus\-s3 will fail with an error message. The purpose of 
this is to prevent the authentication tokens stored in the configuration file 
from being accessed by other users.


.SS Configuration Variables
.TP
.BI "endpoint " site
The URL of the web service endpoint. If the URL begins with 'https', then SSL will be used.
.TP
.BI "max_object_size " site
The maximum size of an object in GB (default: 5GB)
.TP
.BI "multipart_uploads " site
Does the service support multipart uploads (True/False, default: False)
.TP
.BI "ranged_downloads " site
Does the service support ranged downloads? (True/False, default: False)
.TP
.BI "access_key " identity
The access key for the identity
.TP
.BI "secret_key " identity
The secret key for the identity


.SS Example Configuration
This is an example configuration that specifies a single site (amazon) and a single identity (pegasus@amazon). For this site the maximum object size is 5TB, and the site supports both multipart uploads and ranged downloads, so both uploads and downloads can be done in parallel.
.IP
.nf
[amazon]
endpoint = https://s3.amazonaws.com/
max_object_size = 5120
multipart_uploads = True
ranged_downloads = True

[pegasus@amazon]
access_key = 90c4143642cb097c88fe2ec66ce4ad4e
secret_key = a0e3840e5baee6abb08be68e81674dca

[magellan]
# NERSC Magellan is a Eucalyptus site. It doesn't support multipart uploads,
# or ranged downloads (the defaults), and the maximum object size is 5GB
# (also the default)
endpoint = https://128.55.69.235:8773/services/Walrus

[juve@magellan]
access_key = quwefahsdpfwlkewqjsdoijldsdf
secret_key = asdfa9wejalsdjfljasldjfasdfa

[voeckler@magellan]
# Each site can have multiple associated identities
access_key = asdkfaweasdfbaeiwhkjfbaqwhei
secret_key = asdhfuinakwjelfuhalsdflahsdl
.fi




.SH EXAMPLES
.TP
List all buckets owned by identity 'user@amazon':
.B pegasus-s3 ls
s3://user@amazon
.TP
List the contents of bucket 'bar' for identity 'user@amazon':
.B pegasus-s3 ls
s3://user@amazon/bar
.TP
List all objects in bucket 'bar' that start with 'hello':
.B pegasus-s3 ls
s3://user@amazon/bar/hello
.TP
Create a bucket called 'mybucket' for identity 'user@amazon':
.B pegasus-s3 mkdir
s3://user@amazon/mybucket
.TP
Delete a bucket called 'mybucket':
.B pegasus-s3 rmdir
s3://user@amazon/mybucket
.TP
Upload a file 'foo' to bucket 'bar':
.B pegasus-s3 put 
foo s3://user@amazon/bar/foo
.TP
Download an object 'foo' in bucket 'bar':
.B pegasus-s3 get
s3://user@amazon/bar/foo foo
.TP
Upload a file in parallel with 4 threads and 100MB chunks:
.B pegasus-s3 put
--parallel 4 --chunksize 100 foo s3://user@amazon/bar/foo
.TP
Download an object in parallel with 4 threads and 100MB chunks:
.B pegasus-s3 get
--parallel 4 --chunksize 100 s3://user@amazon/bar/foo foo
.TP
List all partial uploads for bucket 'bar':
.B pegasus-s3 lsup
s3://user@amazon/bar
.TP
Remove all partial uploads for bucket 'bar':
.B pegasus-s3 rmup
--all s3://user@amazon/bar



.SH EXIT STATUS
pegasus\-s3 returns a zero exist status if the operation is successful. A
non-zero exit status is returned in case of failure.




.SH AUTHOR
Gideon Juve (juve@usc.edu)
