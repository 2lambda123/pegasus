<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="concepts">
  <title>Concepts</title>

  <section>
    <title>Abstract Workflow (DAX)</title>

    <section>
      <title>Introduction to DAXs</title>

      <para>Pegasus takes an abstract workflow in XML format called DAX as its
      fundamental input. Pegasus plans the abstract workflow provided by the
      DAX using the concrete information found the in the replica catalog
      (RC), site catalog (SC), and transformation catalog (TC). The concrete
      behavior is controlled by the configuration (properties). Pegasus
      refines the abstract workflow to create a number of concretely runnable
      jobs that can be executed in the Grid, clouds, locally or
      remotely.</para>

      <para>The DAX format is described by the XML schema instance document
      <ulink
      url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.2/dax-3.2.xsd">dax-3.2.xsd</ulink>.
      A local copy of the schema definition is provided in the
      <quote>etc</quote> directory. The documentation of the schema and its
      elements can be found in <ulink
      url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.2/dax-3.2.html">dax-3.2.html</ulink>.
      The example below shows a workflow we call the "black diamond" for
      historical reasons and due to its shape. This simple workflow
      incorporates some of the elementary graph structures you will deal with
      in your own workflows:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis>fan-out</emphasis>, <emphasis>scatter</emphasis>,
          and <emphasis>diverge</emphasis> all describe the fact that multiple
          siblings are dependent on a fewer parents.</para>

          <para>The example shows how the <emphasis>findrange</emphasis> nodes
          depend on the <emphasis>preprocess</emphasis> node.</para>
        </listitem>

        <listitem>
          <para><emphasis>fan-in</emphasis>, <emphasis>gather</emphasis>,
          <emphasis>join</emphasis>, and <emphasis>converge</emphasis>
          describe how multiple siblings are merged into fewer dependent child
          nodes.</para>

          <para>The example shows how the <emphasis>analyze</emphasis> node
          depends on both <emphasis>findrange</emphasis> nodes.</para>
        </listitem>
      </itemizedlist>

      <itemizedlist>
        <listitem>
          <para><emphasis>serial execution</emphasis> implies that nodes are
          dependent on one another, like pearls on a string.</para>
        </listitem>

        <listitem>
          <para><emphasis>parallel execution</emphasis> implies that nodes can
          be executed in parallel, as shown by the
          <emphasis>findrange</emphasis> nodes in the example.</para>

          <para>Note that even though it is possible to execute these nodes in
          parallel, planning constraints may limit the amount of parallelism
          achieved.</para>
        </listitem>
      </itemizedlist>

      <para><figure>
          <title>Black Diamond Dax</title>

          <mediaobject>
            <imageobject>
              <imagedata align="center" fileref="images/concepts-diamond.jpg"
                         valign="middle" />
            </imageobject>
          </mediaobject>
        </figure></para>

      <para>The example diamond workflow consits of four nodes representing
      jobs, and are linked by six files.</para>

      <itemizedlist>
        <listitem>
          <para>If you follow the arrows, you realize that one arrow end in
          file "f.d", but not arrows are leaving it. This mean that "f.d" is a
          leaf file. It is a product or output of this workflow. Output files
          can be collected at a location.</para>
        </listitem>

        <listitem>
          <para>If you follow the arrows, you also realize that only one arrow
          comes from file "f.a", but not arrows are leading to it. This means
          that "f.a" is a required input file to the workflow. Its location
          must be registered with the replica catalog in order for Pegasus to
          find it and integrate it into the workflow.</para>
        </listitem>

        <listitem>
          <para>The remaining files all have arrows leading to them and
          originating from them. These files are products of some job steps
          (arrows leading to them), and consumed by other job steps (arrows
          leading out of them). Often, these files represent intermediary
          results that can be cleaned.</para>
        </listitem>
      </itemizedlist>

      <para>There are two main ways of generating DAX's</para>

      <orderedlist>
        <listitem>
          <para>Using a DAX generating API in Java, Perl or Python.</para>

          <para>This option is what we recommend.</para>
        </listitem>

        <listitem>
          <para>Generating XML directly from your script.</para>

          <para>This option should only be considered by advanced
          users.</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Workflow Gallery</title>

      <para>You can view a bunch of DAX's from various applications in our
      Workflow Gallery at [INSERT PROPER LINK HERE].</para>
    </section>
  </section>

  <section>
    <title>Executable Workflow (DAG)</title>

    <para></para>

    <para>...</para>
  </section>

  <section>
    <title>Execution Environment</title>

    <para>...</para>
  </section>

  <section>
    <title>Pegasus Workflow Job States and Delays</title>

    <para>...</para>
  </section>
</chapter>
