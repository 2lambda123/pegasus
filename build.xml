<?xml version="1.0"?>
<!-- $Id$ -->
<project name="pegasus-all" default="jar">
  <description>Manages Pegasus</description>
  <property name="build.src" location="build/classes"/>
  <property environment="env"/>
  <property name="pegasus.home" location="${basedir}"/>
  <path id="build.classpath">
    <fileset dir="lib" includes="*.jar"/>
  </path>
  
  <target name="get-system"
          description="Obtains the system information and architecture"
          unless="dist.arch">
    <exec executable="${pegasus.home}/release-tools/getsystem/getsystem"
          outputproperty="dist.arch"
          failonerror="true"/>
    <echo>Architecture ${dist.arch}</echo>
  </target>

  <target name="get-timestamps" unless="ISODATE.full" depends="get-system"
	  description="Set the timestamps in Version.java">
    <tstamp/>
    <mkdir dir="dist"/>  
    <mkdir dir="${build.src}"/>
    <copy preservelastmodified="true" todir="${build.src}" file="LICENSE"/>
    <copy preservelastmodified="true" todir="${build.src}" file="GTPL"/>
    <tstamp>
      <format property="ISODATE.full" pattern="yyyy-MM-dd'T'HH:mm:ssZZZZZ"/>
      <format property="ISODATE.short" pattern="yyyyMMdd"/>
      <format property="ISODATE.utc" pattern="yyyyMMddHHmmss'Z'" timezone="UTC"/>
    </tstamp>
    <echo>full ISO timestamp: ${ISODATE.full}</echo>   

    <!-- substitute built timestamp into Version.java -->
    <exec executable="perl" 
	  output="src/edu/isi/pegasus/common/util/Version.java">
      <arg value="-CS"/>
      <arg value="-pe"/>
      <arg value="s/BUILDTIMESTAMP/${ISODATE.utc}/; s/BUILDARCHITECTURE/${dist.arch}/; s/DONOTEDITWARNING/DO NOT EDIT! This file is generated automatically/"/>
      <arg value="src/edu/isi/pegasus/common/util/Version.in"/>
    </exec>
  </target>


  <target name="check-java"  description="Check the version of java">
     <property name="build.source" value="${ant.java.version}"/>
     <property name="build.target" value="${ant.java.version}"/>   
     <echo>JAVA TARGET is ${build.target}</echo>
     <echo>JAVA SOURCE is ${build.source}</echo>
  </target>


  <target name="version" depends="compile-version"
	  unless="dist.dir"
	  description="Provides the version number from within PEGASUS to ANT">
    <taskdef name="versiontask"
	     classpath="${build.src}"
	     classname="VersionTask"/>
    <versiontask/>
    <echo>Pegasus Version: ${pegasus.version}</echo>
    <property name="dist.dir" location="dist/pegasus-${pegasus.version}"/>
    <property name="dist.lib" location="${dist.dir}/lib"/> 
    <property name="dist.doc" location="${dist.dir}/doc"/>
    <property name="dist.man" location="${dist.dir}/man"/>
    <mkdir dir="${dist.dir}"/>
    <echo file="${dist.dir}/stamp">${ISODATE.utc} ${dist.arch}${line.separator}</echo>
    <!-- developer env sneak -->
    <echo file="stamp">${ISODATE.utc} ${dist.arch}${line.separator}</echo>
  </target>

  <target name="compile-version" depends="check-java,get-timestamps"
	  description="Compiles the Version.java and helper code">
    <javac destdir="${build.src}" srcdir="src" 
           encoding="UTF-8" debug="true"
           target="${build.target}" source="${build.source}"
           includes="edu/isi/pegasus/common/util/Version.java,VersionTask.java"
           classpathref="build.classpath"/>
  </target>

  <target name="common" depends="version"
	  description="Compiles the code common to all Pegasus modules">
    <javac destdir="${build.src}" srcdir="src" 
           encoding="UTF-8" deprecation="true" debug="true"
           target="${build.target}" source="${build.source}"
           includes="edu/isi/pegasus/common/**/*.java"
           excludes="edu/isi/pegasus/common/**/*Test.java,edu/isi/pegasus/planner/**/*.java"
           classpathref="build.classpath"/>
  </target>


  <target name="vdl" depends="version"
	  description="Compiles the abstract planner Chimera">
    <javac destdir="${build.src}" srcdir="src" 
           target="${build.target}" source="${build.source}"
           encoding="UTF-8" debug="true"
           includes="org/griphyn/vdl/*.java,org/griphyn/vdl/**/*.java"
           excludes="org/griphyn/vdl/*Test.java,org/griphyn/vdl/**/*Test.java"
           classpathref="build.classpath"/>
  </target>


  <target name="planner" depends="version"
	  description="Compiles the concrete planner module of Pegasus">
    <javac destdir="${build.src}" srcdir="src"
           target="${build.target}" source="${build.source}"
           encoding="UTF-8" debug="true"
           includes="edu/isi/pegasus/planner/**/*.java"
           excludes="edu/isi/pegasus/planner/**/*Test.java,org/griphyn/**/*.java"
           classpathref="build.classpath"/>
  </target>


  <target name="examples" depends="version"
	  description="Compiles all examples">
    <javac destdir="${build.src}" srcdir="src" 
           target="${build.target}" source="${build.source}"
           encoding="UTF-8" debug="true"
           includes="examples/**/*.java"
	   excludes="org/griphyn/**/*.java"
           classpathref="build.classpath"/>
  </target>


  <target name="deprecation" depends="version"
	  description="compiles everything under edu.isi.pegasus with deprecation flag">
    <javac destdir="${build.src}" srcdir="src" 
           target="${build.target}" source="${build.source}"
           encoding="UTF-8" deprecation="true" debug="true"
           includes="*.java,edu/isi/pegasus/**/*.java"
           classpathref="build.classpath"/>
  </target>


  <target name="jar" depends="common,planner,examples"
	   description="Create the PEGASUS JAR files excluding tests">
    <mkdir dir="${dist.lib}"/>
    <jar destfile="${dist.lib}/pegasus.jar" basedir="${build.src}"
	 includes="edu/isi/pegasus/**/*.class"
	 excludes="*.class,edu/isi/pegasus/**/*Test.class,org/griphyn/**/*Test.class,org/griphyn/**/*.class"/>
    <chmod perm="a+x" file="${dist.lib}/pegasus.jar"/>
  </target>

  <target name="vdl-jar" depends="vdl"
	  description="Create the VDL JAR files excluding tests">
    <mkdir dir="${dist.lib}"/>
    <jar destfile="${dist.lib}/vdl.jar" basedir="${build.src}"
	 includes="org/griphyn/vdl/**/*.class,org/griphyn/vdl/*.class"
	 excludes="*.class,org/griphyn/vdl/**/*Test.class,org/griphyn/vdl/*Test.class,edu/isi/pegasus/**/*.jar"/>
    <chmod perm="a+x" file="${dist.lib}/vdl.jar"/>
  </target>

  <target name="validate-latex">
    <condition property="latex.available">
      <and>
	<or>
	  <available file="pdflatex"     filepath="${env.PATH}"/>
	  <available file="pdflatex.exe" filepath="${env.PATH}"/>
	  <available file="pdflatex.exe" filepath="${env.Path}"/>
	</or>
	<or>
	  <available file="makeindex"     filepath="${env.PATH}"/>
	  <available file="makeindex.exe" filepath="${env.PATH}"/>
	  <available file="makeindex.exe" filepath="${env.Path}"/>
	</or>
      </and>
    </condition>
    <condition property="latex.notavailable">
      <not>
	<isset property="latex.available"/> 
      </not>
    </condition>
    <echo>latex.available=${latex.available}</echo>
    <echo>latex.notavailable=${latex.notavailable}</echo>
  </target>
  
  <target name="latex-pre" depends="version">
    <mkdir dir="${dist.doc}"/>
    <uptodate property="pegasus.predicate.latex">
      <srcfiles dir="etc" includes="sample.properties"/>
      <mapper type="regexp" from="^(.*)sample\.(.*)$" to="${dist.doc}/\2.pdf"/>
    </uptodate>
  </target>
  
  <target name="latex" depends="latex-pre,validate-latex"
          description="Runs PDF-LaTeX to auto-document properties" 
	  if="latex.available"
          unless="pegasus.predicate.latex">
    <exec executable="${pegasus.home}/libexec/assemble-sample-props"
	  failonerror="true">
      <arg file="${dist.doc}/properties.pdf"/>
      <env key="PEGASUS_HOME" value="${pegasus.home}"/>
      <env key="PEGASUS_VERSION" value="${pegasus.version}"/>
      <env key="PEGAUS_TIMESTAMP" value="${ISODATE.full}"/>
    </exec>
  </target>

  <target name="withoutlatex" depends="validate-latex"
          description="Copies properties to document if latex is not installed" 
	  if="latex.notavailable">
     <mkdir dir="${dist.doc}"/>
     <copy preservelastmodified="true" todir="${dist.doc}" file="doc/properties.pdf"/> 
  </target>



  <target name="javadoc-pre" depends="version">
    <uptodate property="pegasus.predicate.doc">
      <srcfiles dir="src" includes="edu/isi/pegasus/**/*.java" 
	        excludes="**/*Test.java"/>
      <mapper type="glob" from="*.java" to="${dist.doc}/javadoc/*.html"/>
    </uptodate>
  </target>    

  <target name="javadoc" depends="planner,common,javadoc-pre"
          description="Generates the javadoc auto-documentation"
          unless="pegasus.predicate.doc">
    <!-- <delete dir="${dist.doc}/javadoc"/> -->
    <javadoc destdir="${dist.doc}/javadoc"
             Author="true" 
	     Use="true"
             Version="true"
             Private="true"
             Windowtitle="PEGASUS"
             classpathref="build.classpath">
      <packageset dir="src">
<!--        <include name="org/griphyn/vdl/**"/> -->
        <include name="edu/isi/pegasus/**"/>
      </packageset>
      <fileset dir="src" includes="*.java"/>
      <doctitle><![CDATA[PEGASUS ${pegasus.version}]]></doctitle>
      <bottom><![CDATA[<i>Copyright &#169; 2007 The University of Southern California. All Rights Reserved.</i>]]></bottom>
<!--      <group title="Common Shared Code" packages="org.griphyn.common.*"/> -->
<!--      <group title="Chimera">
	<package name="org.griphyn.vdl"/>
	<package name="org.griphyn.vdl.*"/>
      </group>
-->
      <group title="Pegasus" packages="edu.isi.pegasus.*"/>
      <link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
    </javadoc>
  </target>

  <target name="validate-make">
    <condition property="make.available">
      <or>
	<available file="gmake"    filepath="${env.PATH}"/>
	<available file="make"     filepath="${env.PATH}"/>
	<available file="make.exe" filepath="${env.PATH}"/>
	<available file="make.exe" filepath="${env.Path}"/>
      </or>
    </condition>
    <echo>make.available=${make.available}</echo>
  </target>

  <target name="ctools" depends="version,validate-make"
          description="INTERNAL: Compiles all C tools, no installation" 
	  if="make.available">
    <exec executable="${basedir}/src/tools/make.pl" dir="src/tools" failonerror="true">
      <env key="prefix" value="${dist.dir}"/>
      <arg line="prefix=${dist.dir} all"/>
    </exec>
  </target>

  <target name="ctools-all" depends="version,validate-make"
          description="INTERNAL: Compiles all C tools and installs them"
	  if="make.available">
    <mkdir dir="${dist.dir}/man"/>
    <mkdir dir="${dist.dir}/man/man1"/>
    <mkdir dir="${dist.dir}/bin"/>
    <exec executable="${basedir}/src/tools/make.pl" dir="src/tools" failonerror="true">
      <env key="prefix" value="${dist.dir}"/>
      <arg line="prefix=${dist.dir}"/>
      <arg line="install"/>
      <arg line="install.man"/>
      <!-- TODO: Add test for groff devices and then add groff targets accordingly. -->
    </exec>
  </target>

  <target name="ctools-clean" depends="validate-make"
          description="INTERNAL: Cleans up all C tools" 
	  if="make.available">
    <exec executable="${basedir}/src/tools/make.pl" dir="src/tools" failonerror="true">
      <arg line="distclean"/>
    </exec>
  </target>
  
  <target name="externals" depends="version,validate-make"
          description="INTERNAL: Compiles and installs external dependencies" 
          if="make.available">
    <mkdir dir="${dist.dir}/lib"/>
    <mkdir dir="${dist.dir}/lib/python"/>
    <exec executable="${basedir}/src/tools/make.pl" dir="src/externals" failonerror="true">
      <env key="prefix" value="${dist.dir}"/>
      <arg line="prefix=${dist.dir} all"/>
    </exec>
  </target>

  <target name="externals-clean" depends="validate-make"
          description="INTERNAL: Cleans up all external tools" 
          if="make.available">
    <exec executable="${basedir}/src/tools/make.pl" dir="src/externals" failonerror="true">
      <arg line="clean"/>
    </exec>
  </target>

  <target name="validate-groff">
    <condition property="groff.available">
      <or>
	<available file="groff"     filepath="${env.PATH}"/>
	<available file="groff.exe" filepath="${env.PATH}"/>
	<available file="groff.exe" filepath="${env.Path}"/>
      </or>
    </condition>
    <echo>groff.available=${groff.available}</echo>
  </target>

  <target name="man-ps" depends="validate-groff,version" 
	  if="groff.available">
    <mkdir dir="${dist.man}"/>
    <apply executable="${basedir}/libexec/groff.sh" dest="${dist.man}">
      <srcfile/>
      <targetfile/>
      <fileset dir="man/man1" includes="*.1"/>
      <mapper type="glob" from="*.1" to="*.ps"/>
    </apply>
  </target>

  <target name="man-txt" depends="validate-groff,version" 
	  if="groff.available">
    <mkdir dir="${dist.man}"/>
    <apply executable="${basedir}/libexec/groff.sh" dest="${dist.man}">
      <srcfile/>
      <targetfile/>
      <fileset dir="man/man1" includes="*.1"/>
      <mapper type="glob" from="*.1" to="*.txt"/>
    </apply>
  </target>

  <target name="man-html" depends="validate-groff,version" 
          if="groff.available">
    <mkdir dir="${dist.man}"/>
    <apply executable="${basedir}/libexec/groff.sh" dest="${dist.man}">
      <srcfile/>
      <targetfile/>
      <fileset dir="man/man1" includes="*.1"/>
      <mapper type="glob" from="*.1" to="*.html"/>
    </apply>
  </target>

  <target name="man-roff" depends="version"
          description="[internal] Copies roff sources to distribution">
    <mkdir dir="${dist.man}/man1"/>
    <copy preservelastmodified="true" todir="${dist.man}/man1">
      <fileset dir="man/man1" includes="*.1"/>
    </copy>
  </target>
  <target name="man-roff-worker" depends="version"
          description="[internal] Copies roff sources to distribution">
    <mkdir dir="${dist.man}/man1"/>
    <copy preservelastmodified="true" todir="${dist.man}/man1">
      <fileset dir="man/man1" includes="s3cmd.1"/>
    </copy>
  </target>

  <target name="man" depends="man-roff,man-ps,man-html,man-txt"
          description="Copies and formats the client tool manpages"/>


  <target name="dist-setup-app">
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dist.dir}/bin">
	<include name="*"/>
	<!-- <include name="sparcv?/*"/> -->
	<exclude name="*.bat"/>
	<exclude name="*.cmd"/>
      </fileset>
    </chmod>
    <echo>Ran chmod on ${dist.dir}/bin</echo>
  </target>

  <target name="dist-worker" depends="version,man-roff-worker,ctools-all"
          description="Creates a distribution of only the C/C++ tools">
    <!-- bin -->
    <copy preservelastmodified="true" todir="${dist.dir}/bin">
      <fileset dir="bin">
          <include name="pegasus-dirmanager"/>
          <include name="pegasus-cleanup"/>
          <include name="pegasus-transfer"/>
          <include name="symlink"/>
          <include name="s3cmd"/>
          <!-- add script files to copy as necessary -->
      </fileset>
    </copy>
    <copy preservelastmodified="true" todir="${dist.dir}/lib">
      <fileset dir="lib">
	<include name="python/S3/*"/>
	</fileset>
      </copy>
    <antcall target="dist-setup-app"/>
    <copy preservelastmodified="true" todir="${dist.dir}" file="LICENSE"/>
    <copy preservelastmodified="true" todir="${dist.dir}" file="GTPL"/>
    <copy preservelastmodified="true" todir="${dist.dir}" file="RELEASE_NOTES"/>

    <!-- creates the worker tarball -->
    <exec executable="sh" dir="dist">
      <arg value="-c"/>
      <arg value="tar --exclude=\.svn -cf pegasus-worker-${pegasus.version}.tar pegasus-${pegasus.version}"/>
    </exec>
    <gzip src="dist/pegasus-worker-${pegasus.version}.tar" 
	  destfile="dist/pegasus-worker-${pegasus.version}-${dist.arch}.tar.gz"/>
    <delete file="dist/pegasus-worker-${pegasus.version}.tar"/>
  </target>

  <target name="cpio">
    <!-- copies trees preserving all flags and links -->
    <exec executable="sh" dir="${src.dir}">
      <arg value="-c"/>
      <arg value="find * -depth | fgrep -v .svn | cpio -pdma ${dst.dir}"/>
    </exec>
  </target>

  <target name="dist-copy-lib">
    <mkdir dir="${dist.lib}"/>
    <copy preservelastmodified="true" todir="${dist.lib}">
      <fileset dir="lib" includes="*.jar"/>
      <fileset dir="lib" includes="*.sh"/>
      <fileset dir="lib">
        <include name="0*"/>
	<include name="C*"/>
	<include name="L*"/>
	<include name="R*"/>
      </fileset>
    </copy>
    <mkdir dir="${dist.lib}/perl"/>
    <copy preservelastmodified="true" todir="${dist.lib}/perl">
      <fileset dir="lib/perl" includes="**/*.pm"/>
    </copy>
    <mkdir dir="${dist.lib}/python"/>
    <copy preservelastmodified="true" todir="${dist.lib}/python">
      <fileset dir="lib/python" includes="**/*.py"/>
    </copy>
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dist.lib}" includes="*.jar"/>
    </chmod>
  </target>

  <target name="dist" depends="jar,vdl-jar,latex,withoutlatex,man-roff,ctools-all,externals"
          description="Sets up the dist directory">
    <!-- bin -->
    <mkdir dir="${dist.dir}/bin"/>
    <copy preservelastmodified="true" todir="${dist.dir}/bin">
      <fileset dir="bin">
        <exclude name="*-free"/>
        <exclude name="CVS"/>
	<exclude name=".svn"/>
        <exclude name="Archive"/>
        <exclude name="Archive/*"/>
      </fileset>
    </copy>
    <fixcrlf srcdir="${dist.dir}/bin" eol="crlf" 
             includes="*.bat,*.cmd" />
    <fixcrlf srcdir="${dist.dir}/bin" eol="lf">
      <exclude name="*.bat"/>
      <exclude name="*.cmd"/>
      <exclude name="*-free"/>
      <exclude name="T2"/>
      <exclude name="kickstart"/>
      <exclude name="k.2"/>
      <exclude name="keg"/>
      <exclude name="guc"/>
      <exclude name="invoke"/>
      <exclude name="keg.condor"/>
      <exclude name="seqexec"/>
      <exclude name="newexec"/>
      <exclude name="mpi*"/>
      <exclude name="condor-log-parser"/>
    </fixcrlf>
    <antcall target="dist-setup-app"/>

    <!-- contrib -->
    <mkdir dir="${dist.dir}/contrib"/>
    <antcall target="cpio">
      <param name="src.dir" value="contrib"/>
      <param name="dst.dir" value="${dist.dir}/contrib"/>
    </antcall>

    <!-- doc -->
    <mkdir dir="${dist.doc}"/>
    <copy preservelastmodified="true" todir="${dist.doc}">
      <fileset dir="doc" includes="**/*" 
               excludes="properties.pdf,wfrc.pdf"/>
    </copy>

    <!-- etc -->
    <mkdir dir="${dist.dir}/etc"/>
    <copy preservelastmodified="true" todir="${dist.dir}/etc">
      <fileset dir="etc" includes="**/*"/>
    </copy>

    <!-- examples -->
    <mkdir dir="${dist.dir}/examples"/>
    <copy preservelastmodified="true" todir="${dist.dir}/examples">
      <fileset dir="examples" includes="**/*"/>
    </copy>
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dist.dir}/examples" includes="**/submit"/>
      <fileset dir="${dist.dir}/examples" includes="**/*.py"/>
      <fileset dir="${dist.dir}/examples" includes="**/*.pl"/>
      <fileset dir="${dist.dir}/examples" includes="**/*.exe"/>
      <fileset dir="${dist.dir}/examples" includes="**/submit-workflow*"/>
      <fileset dir="${dist.dir}/examples" includes="**/galactic-plane/galactic-plane"/>
      <fileset dir="${dist.dir}/examples" includes="**/galactic-plane/local*"/>
      <fileset dir="${dist.dir}/examples" includes="**/galactic-plane/remote*"/>
    </chmod>

    <!-- lib -->
    <antcall target="dist-copy-lib"/>

    <!-- libexec -->
    <mkdir dir="${dist.dir}/libexec"/>
    <copy preservelastmodified="true" todir="${dist.dir}/libexec">
      <fileset dir="libexec" includes="**/*"/>
    </copy>
    <fixcrlf srcdir="${dist.dir}/libexec" eol="lf"/>
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dist.dir}/libexec" excludes="README*"/>
    </chmod>


    <!-- sql -->
    <mkdir dir="${dist.dir}/sql"/>
    <copy preservelastmodified="true" todir="${dist.dir}/sql">
      <fileset dir="sql" includes="README*,*my*,*pg*"/>
    </copy>
    <fixcrlf srcdir="${dist.dir}/sql" tab="remove" tablength="8" 
	     excludes="README*" eol="lf"/>

    <!-- test -->
    <mkdir dir="${dist.dir}/test"/>
    <copy preservelastmodified="true" todir="${dist.dir}/test">
      <fileset dir="test" includes="**/*" excludes="mike/**"/>
      <mapper type="regexp" from="Jensens/(.*)$" to="\1"/>
    </copy>
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dist.dir}/test" includes="**/*.pl,**/*sh"/>
    </chmod>

    <!-- . -->
    <copy preservelastmodified="true" todir="${dist.dir}">
      <fileset dir=".">
	<include name="README"/>
<include name="LICENSE"/>                                                               
    <include name="GTPL"/> 
        <include name="MIGRATING_FROM_VDS"/>
        <include name="RELEASE_NOTES"/>
	<include name="CHANGELOG"/>
      </fileset>
    </copy>

    <!-- creates the binary tarball -->
    <exec executable="sh" dir="dist">
      <arg value="-c"/>
      <arg value="tar --exclude=\.svn -cf pegasus-binary-${pegasus.version}.tar pegasus-${pegasus.version}"/>
    </exec>
    <gzip src="dist/pegasus-binary-${pegasus.version}.tar" 
	  destfile="dist/pegasus-binary-${pegasus.version}-${dist.arch}.tar.gz"/>
    <delete file="dist/pegasus-binary-${pegasus.version}.tar"/>
  </target>

  <target name="clean" depends="ctools-clean,externals-clean"
	  description="Removes the build and dist directories">
    <delete dir="dist"/>
    <delete dir="build"/>
    <delete file="stamp"/>
  </target>
 <target name="build" depends="ctools-all,externals,jar,vdl-jar"/>
</project>

