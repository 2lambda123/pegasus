/**
 * This file or a portion of this file is licensed under the terms of
 * the Globus Toolkit Public License, found in file GTPL, or at
 * http://www.globus.org/toolkit/download/license.html. This notice must
 * appear in redistributions of this file, with or without modification.
 *
 * Redistributions of this Software, with or without modification, must
 * reproduce the GTPL in: (1) the Software, or (2) the Documentation or
 * some other similar material which is provided with the Software (if
 * any).
 *
 * Copyright 1999-2004 University of Chicago and The University of
 * Southern California. All rights reserved.
 */
package org.griphyn.cPlanner.transfer;

import org.griphyn.cPlanner.classes.SubInfo;
import org.griphyn.cPlanner.classes.PlannerOptions;

import org.griphyn.cPlanner.engine.ReplicaCatalogBridge;

import org.griphyn.cPlanner.common.PegasusProperties;

import java.util.Collection;

import java.io.IOException;

import java.lang.reflect.InvocationTargetException;


/**
 * The refiner interface, that determines the functions that need to be
 * implemented to add various types of transfer nodes to the workflow.
 *
 * @author Karan Vahi
 * @author Gaurang Mehta
 *
 * @version $Revision$
 */
public interface Refiner
    extends org.griphyn.cPlanner.engine.Refiner {//need to extend it for the PASOA integration

    /**
     * The prefix for the jobs which are added to transfer the files to a job's
     * execution pool from the location returned from the replica mechanism.
     * the new job's name is FROM_RC_PREFIX + nameofjob + _+ counter.
     */
    public static final String STAGE_IN_PREFIX = "rc_tx_";

    /**
     * The prefix for the jobs which are added to transfer the files generated by
     * a job on an execution pool to the output pool. The new job's name is
     * TO_RC_PREFIX + nameofjob + _+ counter.
     *
     */
    public static final String STAGE_OUT_PREFIX = "new_rc_tx_";

    /**
     * The prefix for the jobs which are added to transfer the files generated by
     * the parents of a job to the jobs execution pool. The new job's name is
     * INTER_POOL_PREFIX + nameofjob + _+ counter.
     */
    public static final String INTER_POOL_PREFIX = "inter_tx_";

    /**
     * The prefix for the jobs which register the newly materialized files in the
     * Replica Catalog. The job's name should be RC_REGISTER_PREFIX + nameofjob,
     * where nameofjob is the job that generates these materialized files.
     */
    public static final String REGISTER_PREFIX = "new_rc_register_";

    /**
     * Loads the appropriate implementations that is required by this refinement
     * strategy for different types of transfer jobs. It calls to the factory
     * method to load the appropriate Implementor.
     *
     * Loads the implementing class corresponding to the mode specified by the user
     * at runtime in the properties file. The properties object passed should not
     * be null.
     *
     * @param properties the <code>PegasusProperties</code> object containing all
     *                   the properties required by Pegasus.
     * @param options    the options passed to the planner at runtime.
     *
     */
    public void loadImplementations(PegasusProperties properties,
                                    PlannerOptions options)
        throws ClassNotFoundException, IOException,
                 NoSuchMethodException, InstantiationException,
                 IllegalAccessException, InvocationTargetException,
                 ClassCastException;


    /**
     * Adds the inter pool transfer nodes that are required for  transferring
     * the output files of the parents to the jobs execution site.
     *
     * @param job   <code>SubInfo</code> object corresponding to the node to
     *              which the files are to be transferred to.
     * @param files Collection of <code>FileTransfer</code> objects containing the
     *              information about source and destURL's.
     */
    public void addInterSiteTXNodes(SubInfo job,
                                    Collection files);

    /**
     * Adds the stageout transfer nodes, that stage data to an output site
     * specified by the user.
     *
     * @param job   <code>SubInfo</code> object corresponding to the node to
     *              which the files are to be transferred to.
     * @param files Collection of <code>FileTransfer</code> objects containing the
     *              information about source and destURL's.
     * @param rcb   bridge to the Replica Catalog. Used for creating registration
     *              nodes in the workflow.
     *
     */
    public void addStageOutXFERNodes( SubInfo job,
                                      Collection files,
                                      ReplicaCatalogBridge rcb ) ;

    /**
     * Adds the stageout transfer nodes, that stage data to an output site
     * specified by the user. It also adds the registration nodes to register
     * the data in the replica catalog if required.
     *
     * @param job   <code>SubInfo</code> object corresponding to the node to
     *              which the files are to be transferred to.
     * @param files Collection of <code>FileTransfer</code> objects containing the
     *              information about source and destURL's.
     * @param rcb   bridge to the Replica Catalog. Used for creating registration
     *              nodes in the workflow.
     *
     * @param deletedLeaf to specify whether the node is being added for
     *                      a deleted node by the reduction engine or not.
     *                      default: false
     */
    public abstract void addStageOutXFERNodes(SubInfo job,
                                              Collection files,
                                              ReplicaCatalogBridge rcb,
                                              boolean deletedLeaf);

    /**
     * Adds the stage in transfer nodes which transfer the input files for a job,
     * from the location returned from the replica catalog to the job's execution
     * pool.
     *
     * @param job   <code>SubInfo</code> object corresponding to the node to
     *              which the files are to be transferred to.
     * @param files Collection of <code>FileTransfer</code> objects containing the
     *              information about source and destURL's.
     */
    public  void addStageInXFERNodes(SubInfo job,
                                     Collection files);

    /**
     * Signals that the traversal of the workflow is done. This would allow
     * the transfer mechanisms to clean up any state that they might be keeping
     * that needs to be explicitly freed.
     */
    public void done();

    /**
     * Returns whether a Site is third party enabled or not.
     *
     * @param site  the name of the site.
     * @param type  the type of transfer job for which the URL is being constructed.
     *              Should be one of the following:
     *                              stage-in
     *                              stage-out
     *                              inter-pool transfer
     *
     * @return true pool is third party enabled
     *         false pool is not third party enabled.
     *
     * @see SubInfo#STAGE_IN_JOB
     * @see SubInfo#INTER_POOL_JOB
     * @see SubInfo#STAGE_OUT_JOB
     */
    public boolean isSiteThirdParty(String site, int type) ;

    /**
     * Returns whether the third party transfers for a particular site are to
     * be run on the remote site or the submit host.
     *
     * @param site  the name of the site.
     * @param type  the type of transfer job for which the URL is being constructed.
     *              Should be one of the following:
     *                              stage-in
     *                              stage-out
     *                              inter-pool transfer
     *
     * @return true if the transfers are to be run on remote site, else false.
     *
     * @see SubInfo#STAGE_IN_JOB
     * @see SubInfo#INTER_POOL_JOB
     * @see SubInfo#STAGE_OUT_JOB
     */
    public boolean runTPTOnRemoteSite(String site,int type);


    /**
     * Add a new job to the workflow being refined.
     *
     * @param job  the job to be added.
     */
    public void addJob(SubInfo job);

    /**
     * Adds a new relation to the workflow being refiner.
     *
     * @param parent    the jobname of the parent node of the edge.
     * @param child     the jobname of the child node of the edge.
     */
    public void addRelation(String parent,
                            String child);


    /**
     * Adds a new relation to the workflow. In the case when the parent is a
     * transfer job that is added, the parentNew should be set only the first
     * time a relation is added. For subsequent compute jobs that maybe
     * dependant on this, it needs to be set to false.
     *
     * @param parent    the jobname of the parent node of the edge.
     * @param child     the jobname of the child node of the edge.
     * @param pool      the execution pool where the transfer node is to be run.
     * @param parentNew the parent node being added, is the new transfer job
     *                  and is being called for the first time.
     */
    public void addRelation(String parent,
                            String child,
                            String pool,
                            boolean parentNew);


    /**
     * Returns a textual description of the transfer mode.
     *
     * @return a short textual description
     */
    public  String getDescription();


}
