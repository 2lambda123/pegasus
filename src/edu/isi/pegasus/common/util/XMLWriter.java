/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.isi.pegasus.common.util;

import java.io.*;
import java.util.Stack;
import edu.isi.pegasus.common.logging.*;

/**
 *
 * @author gmehta
 */
public class XMLWriter {

    private Writer mWriter;
    private Stack<String> mStack;
    private StringBuffer mAttributes;
    private boolean mEmptyElement;
    private boolean mClosedElement;
    private boolean mNoLine=false;
    private boolean mHeader;
    private LogManager mLogger;
    private static String START_ELEMENT_TAG = "<";
    private static String CLOSE_ELEMENT_TAG = ">";
    private static String START_END_ELEMENT_TAG = "</";
    private static String CLOSE_EMPTY_ELEMENT_TAG = "/>";
    private static String START_COMMENT_TAG = "<!-- ";
    private static String CLOSE_COMMENT_TAG = " -->";
    private static String INDENT = "\t";
    private static String XML_HEADER = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
    private String mLineSeparator;
    public int indent = 0;
    private String mNamespace;

    public XMLWriter(Writer writer) {
        this(writer, "");
    }

    public XMLWriter(Writer writer, String namespace) {
        mWriter = writer;

        mNamespace = (namespace == null) ? "" : namespace;
        mStack = new Stack<String>();
        mAttributes = new StringBuffer();
        mClosedElement = true;
        mLogger = LogManagerFactory.loadSingletonInstance();
        mLineSeparator = System.getProperty("line.separator", "\r\n");
        writeXMLHeader();
        writeXMLComment("generated on: " + Currently.iso8601(false));
        writeXMLComment("generated by: " + System.getProperties().getProperty("user.name", "unknown") + " [ " + System.getProperties().getProperty("user.region", "??") + " ]");
    }

    public XMLWriter startElement(String name) {
        try {
            //check if there are any previous elements open and close them
            closeElement();
            
            mClosedElement = false;
            mWriter.write(START_ELEMENT_TAG);
            if (!mNamespace.isEmpty()) {
                mWriter.write(mNamespace + ":");
            }
            mWriter.write(name);
        } catch (IOException ioe) {
            mLogger.log("Could not write element " + name + "using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);
        }
        mStack.add(name);
        mEmptyElement = true;
        return this;
    }

    public XMLWriter endElement() {

        if (mStack.empty()) {
            mLogger.log("No elements left to close",
                    LogManager.WARNING_MESSAGE_LEVEL);
        }
        String element = mStack.pop();
        try {
            if (element != null) {
                if (mEmptyElement) {
                    writeAttributes();
                    mWriter.write(CLOSE_EMPTY_ELEMENT_TAG);
                    
                } else {
                    //  
                    if (!mEmptyElement) {
                    }
                    mWriter.write(START_END_ELEMENT_TAG);
                    if (!mNamespace.isEmpty()) {
                        mWriter.write(mNamespace + ":");
                    }

                    mWriter.write(element);
                    mWriter.write(CLOSE_ELEMENT_TAG);
                }
                mClosedElement = true;
                mEmptyElement = false;
            }
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not close element " + element + "using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);
        }
        return this;

    }

    public XMLWriter writeData(String data) {
        try {
            closeElement();
            mEmptyElement = false;
            mWriter.write(escapeXML(data));
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not write data for element " + mStack.peek() + " using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
        return this;
    }

    public XMLWriter writeLine() {
        try {
            mWriter.write(mLineSeparator);
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not write empty line using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
        return this;
    }

    public XMLWriter noLine(){
        mNoLine=true;
        return this;
    }

    public XMLWriter writeCData(String data) {
        try {
            closeElement();
            mEmptyElement = false;
            mWriter.write("<![CDATA[");
            mWriter.write(data);
            mWriter.write("]]>");
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not write data for element " + mStack.peek() + " using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
        return this;
    }

    public XMLWriter writeAttribute(String key, String value) {
        mAttributes.append(" ");
        if (!mNamespace.isEmpty()) {
            mAttributes.append(mNamespace).append(":");
        }
        mAttributes.append(key).append("=\"").append(
                escapeXML(value)).append("\"");
        return this;
    }

    /**
     * Writes out the attributes of a given element to the writer
     */
    private void writeAttributes() {

        try {
            mWriter.write(mAttributes.toString());
            mAttributes.setLength(0);
            mEmptyElement = false;
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not write attributes for element " + mStack.peek() + " using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
    }

    /**
     * Close open elements start tag. Write any attributes.
     * This is called when either a new child element is added to existing element or data is added.
     * @return XMLWriter
     */
    private void closeElement() {
        try {
            if (!mClosedElement) {
                writeAttributes();
                mClosedElement = true;
                mWriter.write(CLOSE_ELEMENT_TAG);
            }
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not close open element " + mStack.peek() + " using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
    }

    public XMLWriter writeXMLHeader() {
        if (mHeader) {
            try {
                mWriter.write(XML_HEADER);
                writeLine();
                mHeader = true;
            } catch (IOException ioe) {
                mLogger.log(
                        "Could not write xml header using XMLWriter",
                        LogManager.ERROR_MESSAGE_LEVEL);
                mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);
            }
        }

        return this;
    }

    public XMLWriter writeXMLComment(String comment) {
        try {
            closeElement();
            writeLine();
            mWriter.write(START_COMMENT_TAG);
            mWriter.write(comment);
            mWriter.write(CLOSE_COMMENT_TAG);
            writeLine();
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not write xml comment using XMLWriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);
        }
        return this;
    }

    public void incIndent() {
        indent++;
    }

    public void decIndent() {
        indent--;
    }

    public void setIndent(int i) {
        indent = (i > 0) ? i : 0;
    }

    private String indent(int indent) {
        if (indent == -1) {
            indent = mStack.size();
        }
        //return indent
        return (indent == 0) ? "" : String.format(String.format("%%0%dd", indent), 0).replace("0", INDENT);

    }

    public static String escapeXML(String str) {
        String st = str;
        st = st.replaceAll("&", "&amp;");
        st = st.replaceAll("<", "&lt;");
        st = st.replaceAll(">", "&gt;");
        st = st.replaceAll("\"", "&quot;");
        st = st.replaceAll("'", "&apos;");
        return st;
    }



    public void close() {
        try {
            mWriter.close();
        } catch (IOException ioe) {
            mLogger.log(
                    "Could not close XMLwriter",
                    LogManager.ERROR_MESSAGE_LEVEL);
            mLogger.log(ioe.getMessage(), LogManager.DEBUG_MESSAGE_LEVEL);

        }
    }
}
