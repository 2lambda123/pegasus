#!/usr/bin/env python
#
#  Copyright 2009 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""This program parses the output of kickstart and produces summary runtime
statistics. It is similar to gentimes, but produces more info.

Usage: runstats [-d dir] [file1 [file 2 ...]]

The -d argument specifies a directory to read. It looks in all .out files in
that directory. Otherwise, you can pipe a list of .out files to read.
"""

__author__ = "Gideon Juve <juve@usc.edu>"
__all__ = []
__version__ = "1.0"

import sys, os, re
from stats import Variable

class Statistic:
	def __init__(self,name):
		self.name = name
		self.runtime = Variable()
	
	def write(self):
		print "%s,%s" % (self.name,self.runtime)

xforms = {}


def print_stats():
	print ",runtime"
	print "transformation,count,min,max,avg,stddev,sum"
	for xfn in xforms:
		xform = xforms[xfn]
		xform.write()


regex = re.compile("^.* duration=\"([\.0-9]*)\" transformation=\"([_A-Za-z0-9:\.]*)\" .*$")		
def process_file(file):
	for line in file.readlines():
		match = regex.match(line)
		if match:
			xform_name = match.group(2)
			runtime = float(match.group(1))
		
			# Update transformation stats
			if xform_name in xforms:
				xform = xforms[xform_name]
			else:
				xform = Statistic(xform_name)
				xforms[xform_name] = xform
			xform.runtime.update(runtime)
	

def process_dir(dir):
	file_re = re.compile("\.out(\.[0-9]{3})?$")
	if not os.path.isdir(dir):
		raise Exception('not a dir: %s' % dir)
	for file in os.listdir(dir):
		if file_re.search(file):
			fname = os.path.join(dir,file)
			f = open(fname,'r')
			process_file(f)
			f.close()


def main():
	if len(sys.argv) == 1:
		fn = sys.stdin.readline()[:-1]
		while fn:
			f = open(fn, 'r')
			process_file(f)
			f.close()
			fn = sys.stdin.readline()[:-1]
	else:
		i = 1
		while i < len(sys.argv):
			arg = sys.argv[i]
			if arg == '-d':
				d = sys.argv[i+1]
				process_dir(d)
				i += 2
			elif arg == '-h':
				print "Usage: %s [-d dir] [file1 [file 2 ...]] [< list_of_filenames]" % sys.argv[0]
				sys.exit(1)
			else:
				f = open(arg,'r')
				process_file(f)
				f.close()
				i += 1

	print_stats()


if __name__ == '__main__':
	main()
