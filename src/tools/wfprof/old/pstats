#!/usr/bin/env python
#
#  Copyright 2009 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""This program parses the output of pprof and produces summary utilization 
statistics.

Usage: pstats [-d dir] [file1 [file 2 ...]]

The -d argument specifies a directory to read. It looks in all .err files in
that directory. Otherwise, you can pipe the contents of the file to memstats,
or you can provide a list of .err files to read.
"""

__author__ = "Gideon Juve <juve@usc.edu>"
__all__ = []
__version__ = "1.0"

import sys, os
from stats import Variable

class Statistic:
	def __init__(self,name):
		self.name = name
		self.avgutil = Variable()
		self.myutil = Variable()

exes = {}
xforms = {}

def print_stats():
	print ",util"
	print "executable,count,min,max,avg,stddev"
	for exn in exes:
		exe = exes[exn]
		print "%s,%s" % (exe.name,exe.avgutil)

	print "\n"

	print ",avgutil,,,,,myutil"
	print "transformation,count,min,max,avg,stddev,count,min,max,avg,stddev"
	for xfn in xforms:
		xform = xforms[xfn]
		print "%s,%s,%s" % (xform.name,xform.avgutil,xform.myutil)

def process_file(file):
	line = file.readline()
	while line:
		if 'xform' in line:
			process_invocation(file)
		line = file.readline()


def process_invocation(file):
	xfn = None
	tstart = 1.0e100
	tstop = 0.0
	sum_utime = 0.0
	sum_stime = 0.0
	avgutil = 0.0
	n = 0

	# Read lines
	line = file.readline()
	while line:
		# Skip lines
		if 'xform' in line:
			file.seek(len(line) * -1, os.SEEK_CUR)
			break
		if 'WARNING' in line:
			line = file.readline()
			continue
		if 'PTRACE_' in line:
			line = file.readline()
			continue

		#xform pid ppid exe lstart lstop tstart tstop vmpeak rsspeak utime stime wtime cutime cstime
		tok = line.split(' ')
		if len(tok) != 15:
			line = file.readline()
			continue

		if xfn is not None:
			if xfn != tok[0]:
				raise Exception("Transformation changed")
		else:
			xfn = tok[0]

		exn = tok[3]
		tstart = min(float(tok[6]), tstart)
		tstop = max(float(tok[7]), tstop)
		utime = float(tok[10])
		stime = float(tok[11])
		wtime = float(tok[12])

		if exn in exes:
			exe = exes[exn]
		else:
			exe = Statistic(exn)
			exes[exn] = exe

		util = (utime + stime) / wtime

		exe.avgutil.update(util)

		sum_utime += utime
		sum_stime += stime

		n += 1
		avgutil = avgutil + ((util - avgutil)/n)

		line = file.readline()
	#end of loop

	if xfn in xforms:
		xform = xforms[xfn]
	else:
		xform = Statistic(xfn)
		xforms[xfn] = xform

	xform.avgutil.update(avgutil)
	xform.myutil.update((sum_utime+sum_stime)/(tstop-tstart))

def process_dir(dir):
	if not os.path.isdir(dir):
		raise Exception('not a dir: %s' % dir)
	for file in os.listdir(dir):
		if file.endswith('.err'):
			fname = os.path.join(dir,file)
			f = open(fname,'r')
			process_file(f)
			f.close()


def main():
	if len(sys.argv) == 1:
		fn = sys.stdin.readline()[:-1]
		while fn:
			f = open(fn, 'r')
			process_file(f)
			f.close()
			fn = sys.stdin.readline()[:-1]
	else:
		i = 1
		while i < len(sys.argv):
			arg = sys.argv[i]
			if arg == '-d':
				d = sys.argv[i+1]
				process_dir(d)
				i += 2
			elif arg == '-h':
				print "Usage: %s [-d dir] [file1 [file 2 ...]] [< list_of_filenames]" % sys.argv[0]
				sys.exit(1)
			else:
				f = open(arg,'r')
				process_file(f)
				f.close()
				i += 1
	print_stats()


if __name__ == '__main__':
	main()
