#!/usr/bin/env python
#
#  Copyright 2009 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""This program parses the output of ioprof and produces summary IO statistics.

Usage: iostats [-d dir] [file1 [file 2 ...]]

The -d argument specifies a directory to read. It looks in all .err files in
that directory. Otherwise, you can pipe the contents of the file to iostats,
or you can provide a list of .err files to read.
"""

__author__ = "Gideon Juve <juve@usc.edu>"
__all__ = []
__version__ = "1.0"

import sys, os
from stats import Variable

class Process:
	def __init__(self,exe,pid):
		self.exe = exe
		self.pid = pid
		self.mread = 0.0
		self.mwrite = 0.0
		
class Statistic:
	def __init__(self,name):
		self.name = name
		self.mread = Variable()
		self.mwrite = Variable()
	
	def write(self):
		print "%s,%s,%s" % (self.name,self.mread,self.mwrite)

exes = {}
xforms = {}

def print_stats():
	print ",mread,,,,,mwrite"
	print "executable,count,min,max,avg,stddev,count,min,max,avg,stddev"
	for exn in exes:
		exe = exes[exn]
		exe.write()

	print "\n"

	print ",mread,,,,,mwrite"
	print "transformation,count,min,max,avg,stddev,count,min,max,avg,stddev"
	for xfn in xforms:
		xform = xforms[xfn]
		xform.write()
		
		
def update_xform(xform_name,mread,mwrite):
	# Update transformation stats
	if xform_name in xforms:
		xform = xforms[xform_name]
	else:
		xform = Statistic(xform_name)
		xforms[xform_name] = xform
	xform.mread.update(mread)
	xform.mwrite.update(mwrite)
	
	
def update_exe(exe_name,mread,mwrite):
	if exe_name in exes:
		exe = exes[exe_name]
	else:
		exe = Statistic(exe_name)
		exes[exe_name] = exe

	exe.mread.update(mread)
	exe.mwrite.update(mwrite)


def process_file(file):
	line = file.readline()
	while line:
		if 'xform' in line:
			process_transformation(file)
		line = file.readline()
			
			
def process_transformation(file):
	xform_name = None
	xform_mread = 0.0
	xform_mwrite = 0.0
	
	lpid = None
	
	line = file.readline()
	while line:
		# New transformation encountered
		if 'xform' in line:
			file.seek(len(line) * -1, os.SEEK_CUR)
			break
		# Skip non-data lines
		if 'WARNING' in line:
			line = file.readline()
			continue

		#xform pid exe file bread nread bwrite nwrite nseek mode flags
		tok = line.split(' ',9)
		if len(tok) != 10:
			continue
			
		xform = tok[0]
		pid = tok[1]
		exe = tok[2]
		fname = tok[3]
		mread = float(tok[4])/(1024*1024)
		mwrite = float(tok[6])/(1024*1024)
		
		# Skip non-files
		if fname in ['<stdin>','<stdout>','<stderr>','<socket>','<pipe>']:
			line = file.readline()
			continue
		
		# if new process was encountered
		if pid != lpid:
			if lpid is not None:
				update_exe(exe_name,exe_mread,exe_mwrite) # process the old one
			exe_mread = 0.0
			exe_mwrite = 0.0
			
		xform_name = xform
		exe_name = exe
		
		# add up everything
		exe_mread += mread
		exe_mwrite += mwrite
		xform_mread += mread
		xform_mwrite += mwrite
		
		line = file.readline()
	#end of loop
	
	# process last exe
	if lpid is not None:
		update_exe(exe_name,exe_mread,exe_mwrite)
	
	# process xform
	update_xform(xform_name,xform_mread,xform_mwrite)


def process_dir(dir):
	if not os.path.isdir(dir):
		raise Exception('not a dir: %s' % dir)
	for file in os.listdir(dir):
		if file.endswith('.err'):
			fname = os.path.join(dir,file)
			f = open(fname,'r')
			process_file(f)
			f.close()


def main():
	if len(sys.argv) == 1:
		fn = sys.stdin.readline()[:-1]
		while fn:
			f = open(fn, 'r')
			process_file(f)
			f.close()
			fn = sys.stdin.readline()[:-1]
	else:
		i = 1
		while i < len(sys.argv):
			arg = sys.argv[i]
			if arg == '-d':
				d = sys.argv[i+1]
				process_dir(d)
				i += 2
			elif arg == '-h':
				print "Usage: %s [-d dir] [file1 [file 2 ...]] [< list_of_filenames]" % sys.argv[0]
				sys.exit(1)
			else:
				f = open(arg,'r')
				process_file(f)
				f.close()
				i += 1

	print_stats()


if __name__ == '__main__':
	main()
