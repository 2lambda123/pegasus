#!/usr/bin/perl
require 5.005;
use strict;
use Getopt::Std;
use POSIX qw(strftime);

my %opts;
getopts( 'N:T:hn:o:t:', \%opts );
if ( $opts{'n'} == 0 || exists $opts{'?'} || exists $opts{'h'} ) {
    print "Usage: big [-t to | -T to] [-n nr] [-o fn]\n";
    print " -t to\tsleep for the specified time.\n";
    print " -T to\tspin for the specified time, default 10 s\n";
    print " -n nr\tproduce the number of diamonds\n";
    print " -o fn\tput results into file, default is stdout\n";
    print " -N ns\tuse the specified namespace and fn-prefix, default is \"big\"\n";
    exit 0;
}
my $namespace = $opts{'N'} || 'big';

sub filename ($;$) {
    my $i = 0+shift();
    my $x = shift || 'f';
    sprintf "$namespace.%s.%05X", $x, $i; 
}

if ( $opts{o} ) {
    open( OUT, ">$opts{o}" ) || die "open $opts{o}: $!\n";
} else {
    open( OUT, ">&STDOUT" ) || die "open STDOUT: $!\n";
}
$opts{T}=10 unless ( defined $opts{t} || defined $opts{T} );
$opts{n}=10 unless defined $opts{n};

# the initial TR
print OUT '<?xml version="1.0" encoding="UTF-8"?>', "\n";
print OUT '<!-- generated: ', strftime('%Y-%m-%dT%H:%S:%MZ', gmtime()), "-->\n";
print OUT '<!-- generated by: ', scalar getpwuid($>), " -->\n";

my $spin;
if ( defined $opts{T} ) {
    $spin = '-T' . $opts{T};
} elsif ( defined $opts{t} ) {
    $spin = '-t' . $opts{t};
}

while ( <DATA> ) {
    s/\@\@SPIN\@\@/$spin/eo;
    s/\@\@NS\@\@/$namespace/eg;
    print OUT $_;
}

my (@save,@save2,@count);
my $count = 0;
my $c=1;
for ( my $p1=0; $p1<$opts{n}; $p1 += 2 ) {
    my $start = $count;
    for ( my $p2=100; $p2<1000; $p2 *= 1.41421356237309504880 ) {
	my $i=1+$count/4;
	# generate diamond call
	print OUT<<"EOF";
  <derivation namespace=\"$namespace\" name=\"d$i\" usesspace=\"$namespace\" uses=\"diamond\">
    <pass bind=\"fd\">
      <scalar>
        <lfn file=\"@{[filename($count+3)]}\" link=\"output\"
	 dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"@{[filename($count+3)]}\"/>
      </scalar>
    </pass>
    <pass bind=\"fc\">
      <scalar>
        <lfn file=\"@{[filename($count+2)]}\" link=\"inout\"
	 dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"@{[filename($count+2)]}\"/>
      </scalar>
    </pass>
    <pass bind=\"fb\">
      <scalar>
        <lfn file=\"@{[filename($count+1)]}\" link=\"inout\"
	 dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"@{[filename($count+1)]}\"/>
      </scalar>
    </pass>
    <pass bind=\"fa\">
      <scalar>
        <lfn file=\"@{[filename($count+0)]}\" link=\"inout\"
	 dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"@{[filename($count+0)]}\"/>
      </scalar>
    </pass>
    <pass bind=\"p2\">
      <scalar>
        <text>$p2</text>
      </scalar>
    </pass>
    <pass bind=\"p1\">
      <scalar>
        <text>$p1</text>
      </scalar>
    </pass>
  </derivation>
EOF
    # "
        my @x = map { filename($count+$_) } 0..3;
	$count[0]++;		# number of diamonds
        push( @save2, filename($count+3) );
        $count += 4;
    }

    # first stage collector
    $count[1]++;		# number of 1st collectors
    print OUT '  <derivation namespace="', $namespace, '" name="c', $c, '" usesspace="', $namespace, '" uses="multi">', "\n";
    print OUT "    <pass bind=\"name\"><scalar><text>COLLECTOR</text></scalar></pass>\n";
    print OUT "    <pass bind=\"f1\">\n";
    print OUT "      <list>\n";
    for ( my $n=0; $n < @save2; ++$n ) {
	print OUT "\t<scalar>\n\t  <lfn file=\"$save2[$n]\" link=\"input\" dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"$save2[$n]\"/>\n\t</scalar>\n";
    }
    undef @save2;
    print OUT "      </list>\n";
    print OUT "    </pass>\n";
    my $node = filename($start,'r.f');
    print OUT "    <pass bind=\"f2\">\n      <scalar>\n";
    print OUT "\t<lfn file=\"$node\" link=\"output\" dontRegister=\"true\" dontTransfer=\"true\" temporaryHint=\"$node\"/>\n";
    print OUT "      </scalar>\n    </pass>\n  </derivation>\n";
    push (@save,$node);
    $c++;
}

$count[2]++;		# number of 2nd collectors
print OUT '  <derivation namespace="', $namespace, '" name="FINAL" usesspace="', $namespace, '" uses="multi">', "\n";
print OUT "    <pass bind=\"name\"><scalar><text>FINAL</text></scalar></pass>\n";
print OUT "    <pass bind=\"f1\">\n      <list>\n";
foreach my $n ( @save ) {
    print OUT "\t<scalar>\n\t  <lfn file=\"$n\" link=\"input\"/>\n\t</scalar>\n";
}
print OUT "      </list>\n    </pass>\n";
print OUT "    <pass bind=\"f2\"><scalar><lfn file=\"final\" link=\"output\"/></scalar></pass>\n";
print OUT "  </derivation>\n";
print OUT "</definitions>\n";
close(OUT);

print STDERR "produced: $count[0] diamonds, $count[1] collectors and $count[2] final = ", $count[0]+$count[1]+$count[2], " DVs and ", $count[0]*4+$count[1]+$count[2], " jobs\n";


__DATA__
<definitions xmlns="http://www.griphyn.org/chimera/VDL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.griphyn.org/chimera/VDL http://www.griphyn.org/chimera/vdl-1.23.xsd" vdlns="@@NS@@" version="1.0">
  <transformation namespace="@@NS@@" name="generate">
    <declare name="p1" container="scalar" link="none"/>
    <declare name="f" container="scalar" link="output"/>
    <argument>
      <text>-aTOP @@SPIN@@</text>
    </argument>
    <argument>
      <text>-p</text>
      <use name="p1"/>
    </argument>
    <argument>
      <text>-o</text>
      <use name="f"/>
    </argument>
  </transformation>
  <transformation namespace="@@NS@@" name="process">
    <declare name="name" container="scalar" link="none"/>
    <declare name="p2" container="scalar" link="none"/>
    <declare name="f1" container="scalar" link="input"/>
    <declare name="f2" container="scalar" link="output"/>
    <argument>
      <text>-a</text>
      <use name="name"/>
      <text> @@SPIN@@</text>
    </argument>
    <argument>
      <text>-p</text>
      <use name="p2"/>
    </argument>
    <argument>
      <text>-i</text>
      <use name="f1"/>
    </argument>
    <argument>
      <text>-o</text>
      <use name="f2"/>
    </argument>
  </transformation>
  <transformation namespace="@@NS@@" name="combine">
    <declare name="f1" container="scalar" link="input"/>
    <declare name="f2" container="scalar" link="input"/>
    <declare name="f3" container="scalar" link="output"/>
    <argument>
      <text>-aBOTTOM @@SPIN@@</text>
    </argument>
    <argument>
      <text>-i</text>
      <use name="f1"/>
      <text> </text>
      <use name="f2"/>
    </argument>
    <argument>
      <text>-o</text>
      <use name="f3"/>
    </argument>
  </transformation>
  <transformation namespace="@@NS@@" name="diamond">
    <declare name="p1" container="scalar" link="none"/>
    <declare name="p2" container="scalar" link="none"/>
    <declare name="fa" container="scalar" link="inout"/>
    <declare name="fb" container="scalar" link="inout"/>
    <declare name="fc" container="scalar" link="inout"/>
    <declare name="fd" container="scalar" link="output"/>
    <call usesspace="@@NS@@" uses="generate">
      <pass bind="p1">
        <scalar>
          <use name="p1"/>
        </scalar>
      </pass>
      <pass bind="f">
        <scalar>
          <use name="fa" link="output"/>
        </scalar>
      </pass>
    </call>
    <call usesspace="@@NS@@" uses="process">
      <pass bind="name">
        <scalar>
          <text>LEFT</text>
        </scalar>
      </pass>
      <pass bind="p2">
        <scalar>
          <use name="p2"/>
        </scalar>
      </pass>
      <pass bind="f1">
        <scalar>
          <use name="fa" link="input"/>
        </scalar>
      </pass>
      <pass bind="f2">
        <scalar>
          <use name="fb" link="output"/>
        </scalar>
      </pass>
    </call>
    <call usesspace="@@NS@@" uses="process">
      <pass bind="name">
        <scalar>
          <text>RIGHT</text>
        </scalar>
      </pass>
      <pass bind="p2">
        <scalar>
          <use name="p2"/>
        </scalar>
      </pass>
      <pass bind="f1">
        <scalar>
          <use name="fa" link="input"/>
        </scalar>
      </pass>
      <pass bind="f2">
        <scalar>
          <use name="fc" link="output"/>
        </scalar>
      </pass>
    </call>
    <call usesspace="@@NS@@" uses="combine">
      <pass bind="f1">
        <scalar>
          <use name="fb" link="input"/>
        </scalar>
      </pass>
      <pass bind="f2">
        <scalar>
          <use name="fc" link="input"/>
        </scalar>
      </pass>
      <pass bind="f3">
        <scalar>
          <use name="fd" link="output"/>
        </scalar>
      </pass>
    </call>
  </transformation>
  <transformation namespace="@@NS@@" name="multi">
    <declare name="name" container="scalar" link="none"/>
    <declare name="f1" container="list" link="input"/>
    <declare name="f2" container="scalar" link="output"/>
    <argument>
      <text>-a</text>
      <use name="name"/>
      <text> @@SPIN@@</text>
    </argument>
    <argument>
      <text>-i</text>
      <use name="f1"/>
    </argument>
    <argument>
      <text>-o</text>
      <use name="f2"/>
    </argument>
  </transformation>
  <!-- add derivations after this -->
<!-- dont forget to close the definitions tag -->
