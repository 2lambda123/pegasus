(* Rules used from ISO 14977 (EBNF) for the definition of VDLt        *)
(* - terminal symbols (terminals) are quoted                          *)
(* - non-terminals are not quoted                                     *)
(* - each rule has an explicit final semicolon to avoid ambiguity     *)
(* - rules have a nonterminal on the left hand side, an equals to     *)
(*   denote a definition, and an expression as right-hand side        *)
(* - Alternative right-hand sides for the same rule may be placed     *)
(*   together, being separated by a vertical bar character.           *)
(* - For comments, this is what you are reading.                      *)
(*                                                                    *)
(* Symbols and rules NOT used from ISO 14977 (EBNF):                  *)
(* - repetition symbol asterisk                                       *)
(* - except symbol hyphen                                             *)
(* - concatenate symbol comma                                         *)
(* - special sequence symbol questionmark                             *)
(* - parenthesis () group items together in the mathematical sense    *)
(* - braces {} indicate repetitions.                                  *)
(* - brackets [] indicate optional symbols of the language            *)
(*                                                                    *)
(* List constructs are tried to be expressed in BNF style instead of  *)
(* the more concise EBNF style, leading to this artefact:             *) 
(* - \empty is the special symbol to denote the null production.      *)

(* A VDLt excerpt is a list of definitions. An empty document is ok.  *)
definitions = definition definitions 
	    | \empty 
	    ;

(* A VDLt definition is one of the following (for now). *)
definition = transformation 
	   | derivation 
	   ;

(* The overall definition of TR and DV are simple enough. *)
transformation = 'TR' fqdi '(' formal-argument-list ')' '{' tr-body '}' 
	       | 'TR' fqdi '(' ')' '{' tr-body '}' 
	       ;

derivation = 'DV' fqdi '->' tr-map '(' actual-argument-list ')' ';' ;
	   | 'DV' fqdi '->' tr-map '(' ')' ';' ;

(* A fully-qualified definition identifier can have multiple forms *)
fqdi = ident '::' ident ':' positive-int
     | ident '::' ident
     |            ident ':' positive-int
     |            ident
     ;

(* A mapping to a fqdi range is similar *)
tr-map = ident '::' ident ':' range
       | ident '::' ident
       |            ident ':' range
       |            ident
       ;

(* However, the version range gets tricky *)
range = positive-int ',' positive-int
      | positive-int ','
      | ',' positive-int
      | positive-int                
      ;

(* We can define positive integers without resorting to REs. *)
digit = '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
positive-int = digit positive-int
	     | digit
	     ;

(* Now for the transformation formal argument list, which no longer *)
(* can be empty. One or more declaration have to occur. *)
formal-argument-list = formal-argument-list ',' formal-argument
		     | formal-argument
		     ;

formal-argument = full-type ident
		| full-type ident '=' dv-leaf
		| full-type ident '[]'
		| full-type ident '[]' '=' '[' dv-leaflist ']'
		;

(* The transformation may either be simple or compound. *)
tr-body = simple-body
        | compound-body
        ;

(* A simple transformation may not have a body at all. If it does, *)
(* the body is a semicolon-separated list of simple statements. *)
simple-body = simple-statement-list
	    | \empty
	    ;

simple-statement-list = simple-statement ';' simple-statement-list
		      | simple-statement
		      ;

simple-statement = 'argument' '=' tr-leaves
		 | stdio '=' tr-leaf
		 | 'profile' ident '.' ident '=' tr-leaves
		 ;

stdio = 'stdin'
      | 'stdout'
      | 'stderr'
      ;

(* The compound TR must have at least one call statement. Otherwise, *)
(* it is a semicolon-separated list of compound body statements. *)
compound-body = compound-statement ';' compound-body
	      | call-statement
	      ;

compound-statement = call-statement
		   | full-type ident '=' dv-leaf
		   | full-type ident '[]' '=' '[' dv-leaflist ']'
		   | 'profile' ident '.' ident '=' tr-leaves
		   ;

(* The call statement by itself is simple *)
call-statement = 'call' tr-map '(' call-argument-list ')' 
	       | 'call' tr-map '(' ')' 
	       ;

(* The simple elements <use> and <text> may be arbitrarily glued *)
(* into what constitutes leaves inside a TR. *)
tr-leaves = tr-leaf tr-leaves
	  | tr-leaf
	  ;

tr-leaflist = tr-leaf ',' tr-leaflist
	    | tr-leaf
	    ;

tr-leaf = text
	| use
	;

(* The argument list of a call statement is on one hand like a DV. *)
(* On the other hand, being inside a TR, it can only use variables. *)
call-argument-list = call-argument-list ',' call-argument
		   | call-argument
		   ;

call-argument = ident '=' tr-leaf
	      | ident '=' '[' ']'
	      | ident '=' '[' tr-leaflist ']'
	      ;

(* The derivation arguments are similar. However, while they may refer *)
(* to logical filenames, they don't have an option for <use> elements. *)
actual-argument-list = actual-argument-list ',' actual-argument
		     | actual-argument
		     ;

actual-argument = ident '=' dv-leaf
		| ident '=' '[' ']'
		| ident '=' '[' dv-leaflist ']'
		;

(* The simple elements <lfn> and <text> may be arbitrarily glued *)
(* into what constitutes leaves inside a DV. *)
dv-leaflist = dv-leaf ',' dv-leaflist
	    | dv-leaf
	    ;

dv-leaf = text
	| lfn
	;


(* The three basic leaf elements <lfn>, <text> and <use> *)
text = '"' qstring '"'
     ;

use = '${' rendering '|' type ':' ident '}'
    | '${' type ':' ident '}'
    | '${' rendering '|' ident '}'
    | '${' ident '}'
    (* NEW: permit type-casted types, and simple identifiers *)
    (* TODO: We will have to re-think rendering of vectors *)
    | '(' type ')' ident
    | ident
    ;

rendering = text ':' text ':' text
	  | text
	  ;

(* The full type range, including the empty element *)
full-type = type
	  | \empty
	  ;

(* As the regular type, a type identifier must exist. *)
type = 'none'
     | file-type
     ;

(* File types do not permit scalar type "none" *)
file-type = 'in'
	  | 'input'
	  | 'out'
	  | 'output'
	  | 'io'
	  | 'inout'
          ;

lfn = '@{' file-type ':' text '}'
    | '@{' file-type ':' text ':' text '}'
    | '@{' file-type ':' text '|' options '}'
    | '@{' file-type ':' text ':' text '|' options '}'
    ;

options = option options
	| \empty
	;

option = 'r'
       | 't'
       | 'T'
       | 'o'
       ;
