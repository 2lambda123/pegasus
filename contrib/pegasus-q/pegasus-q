#!/usr/bin/env python

"""
Pegasus utility for displaying the condor_q in a more workflow centric view

Usage: pegasus-q [options]

"""

##
#  Copyright 2007-2011 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##

from __future__ import division

import os
import re
import sys
import errno
import optparse
import subprocess
import string
import time

__author__ = "Mats Rynge <rynge@isi.edu>"

# --- classes -------------------------------------------------------------------------

class Job:

    # Job States
    UNEXPANDED = 0
    IDLE = 1
    RUNNING = 2
    REMOVED = 3
    COMPLETED = 4
    HELD = 5
    SUBMISSION_ERR = 6

    status_human = {
        UNEXPANDED     : "Unexpanded",
        IDLE           : "Idle      ",
        RUNNING        : "Running   ",
        REMOVED        : "Removed   ",
        COMPLETED      : "Completed ",
        HELD           : "Held      ",
        SUBMISSION_ERR : "SubErr    "
    }

    job_id = ""
    owner = ""
    cmd = ""
    dag_job_id = ""
    dag_node_name = ""
    status = 0
    time_in_state = ""
    prio = 0

    def simple_cmd(self):
        c = re.sub(".*/", "", self.cmd)
        return c
    
    def show(self, level, hide_idle):

        if hide_idle and self.status == self.IDLE:
            return

        indent = ""
        for i in range(level):
            indent = indent + "   "
        if level > 0:
            indent = indent + "|-"
    
        name = self.dag_node_name
        s = self.simple_cmd()
        if s == "condor_dagman" or s == "pegasus-dagman":
            name = "DAGMan"
            if self.dag_node_name != "":
                name = "DAGMan (" + self.dag_node_name + ")"
        else:
            if name == "":
                name = s

        indent_name = (indent + name)[:50]
        print "%-12s %-8s %-50s %-10s %-10s %5d" %(self.job_id, self.owner[:8], \
                indent_name, self.status_human[self.status], self.time_in_state, \
                self.prio)

    def get_status_human_readable(self):
        return self.status_human[self.status]

    def __cmp__(self, other):
        s = float(self.job_id)
        o = float(other.job_id)
        if (s < o):
            return -1
        if (s > o):
            return 1
        return 0


# --- global variables ----------------------------------------------------------------

prog_base = os.path.split(sys.argv[0])[1]   # Name of this program

dags_jobs = {}

hide_idle = False

counts = {}
counts[Job.IDLE] = 0
counts[Job.RUNNING] = 0
counts[Job.HELD] = 0

total_count = 0

# --- functions -----------------------------------------------------------------------


def show_jobs(level, dag_job_id, hide_idle):
    try:
        sorted_jobs = sorted(dags_jobs[dag_job_id].values())
        for job in sorted_jobs:
            job.show(level, hide_idle)
            if job.simple_cmd() == "condor_dagman" or \
               job.simple_cmd() == "pegasus-dagman":
                show_jobs(level + 1, job.job_id, hide_idle)
    except KeyError, err:
        pass


def time_since(secs):
    diff = int(time.time()) - secs
    s = diff % 60
    m = (diff % 3600) // 60
    h = (diff % 86400) // 3600
    d = diff // 86400
    return "%d+%02d:%02d:%02d" % (d, h, m, s)


def myexit(rc):
    """
    system exit without a stack trace - silly python
    """
    try:
        sys.exit(rc)
    except SystemExit:
        sys.exit(rc)



# --- main ----------------------------------------------------------------------------


# Configure command line option parser
prog_usage = "usage: %s [options]" % (prog_base)
parser = optparse.OptionParser(usage=prog_usage)
parser.add_option("-i", "--hide-idle", action = "store_const", const = 1,  dest = "hide_idle",
                  help = "Hides idle jobs in the output")
parser.add_option("-u", "--user", action = "store", dest = "user",
                  help = "Limits job output to a specific user")

# Parse command line options
(options, args) = parser.parse_args()
if options.hide_idle is not None:
    hide_idle = True
user = options.user

# run condor_q
cmd = ["condor_q",
       "-format", "JobID:\%s.", "ClusterId",
       "-format", "\%s\t\t", "ProcId",
       "-format", "Owner:\%s\t\t", "Owner",
       "-format", "DAGManJobId:\%s\t\t", "DAGManJobId",
       "-format", "Cmd:\%s\t\t", "Cmd",
       "-format", "DAGNodeName:\%s\t\t", "DAGNodeName",
       "-format", "JobStatus:\%s\t\t", "JobStatus",
       "-format", "EnteredCurrentStatus:\%s\t\t", "EnteredCurrentStatus",
       "-format", "JobPrio:\%s\t\t", "JobPrio",
       "-format", "\n", "1"]
if user is not None:
    cmd.append(user)
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, \
                          stderr=subprocess.PIPE)

print "ID           USER     NODENAME                                           STATE      STATE_TIME   PRI"

# collect all the jobs
for line in iter(p.stdout.readline, ""):
    line = line.strip()

    attrs = {}
    attrs["DAGManJobId"] = ""
    attrs["DAGNodeName"] = ""
    for i, item in enumerate(line.split('\t\t')):
        (k, v) = item.split(':', 2)
        attrs[k] = v

    job = Job()
    job.job_id = attrs["JobID"]
    job.owner = attrs["Owner"]
    job.cmd = attrs["Cmd"]
    job.dag_job_id = attrs["DAGManJobId"] + ".0"
    job.dag_node_name = attrs["DAGNodeName"]
    job.status = int(attrs["JobStatus"])
    job.time_in_state = time_since(int(attrs["EnteredCurrentStatus"]))
    job.prio = int(attrs["JobPrio"])

    # keep count of number of jobs in different stats
    try:
        counts[job.status]
    except KeyError:
        counts[job.status] = 0
    counts[job.status] =  counts[job.status] + 1
    total_count = total_count + 1
  
    # first time we see this dag?
    try:
        dags_jobs[job.dag_job_id]
    except KeyError:
        dags_jobs[job.dag_job_id] = {}

    dags_jobs[job.dag_job_id][job.job_id] = job

# start displaing at the top level
show_jobs(0, ".0", hide_idle)

print
print "%d jobs; %d idle, %d running, %d held" % \
      (total_count, counts[Job.IDLE], counts[Job.RUNNING], counts[Job.HELD])

myexit(0)


