<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Migration_From_Pegasus_2_x" lang="">
  <title>Migrating From Pegasus 2.X to Pegasus 3.0</title>

  <section>
    <title>Introduction</title>

    <para>With Pegasus 3.0 effort has been made to simplify configuration.
    This chapter is for existing users of Pegasus who use Pegasus 2.x to run
    their workflows and details the steps required to update to using Pegasus
    3.0</para>
  </section>

  <section>
    <title>PEGASUS_HOME and Setup Scripts</title>

    <para>Earlier versions of Pegasus required users to have the environment
    variable PEGASUS_HOME set and to source a setup file
    $PEGASUS_HOME/setup.sh | $PEGASUS_HOME/setup.csh before running Pegasus to
    setup CLASSPATH and other variables.</para>

    <para>Starting with Pegasus 3.0 this is no longer required. The above
    paths are automaticallly determined by the Pegasus tools when they are
    invoked.</para>

    <para>All the users need to do is to set the PATH variable to pick up the
    pegasus executables from the bin directory.</para>

    <programlisting>$ <emphasis role="bold">export PATH=/some/install/pegasus-3.0.0/bin:$PATH</emphasis></programlisting>
  </section>

  <section>
    <title>Changes to Schemas and Catalog Formats</title>

    <section>
      <title>DAX Schema</title>

      <para>Pegasus 3.0 by default now parses DAX documents conforming to the
      DAX Schema 3.2 available <ulink role=""
      url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.2/dax-3.2.xsd"
      userlevel="">here</ulink> and is explained in detail in the chapter on
      API references.</para>

      <para>Starting Pegasus 3.0 , DAX generation API's are provided in
      Java/Python and Perl for users to use in their DAX Generators. The use
      of API's is highly encouraged. Support for the old DAX schema's has been
      deprecated and will be removed in a future version.</para>

      <para>For users, who still want to run using the old DAX formats i.e 3.0
      or earlier, can for the time being set the following property in the
      properties and point it to dax-3.0 xsd of the installation.</para>

      <programlisting><emphasis role="bold">pegasus.schema.dax  /some/install/pegasus-3.0/etc/dax-3.0.xsd</emphasis></programlisting>
    </section>

    <section>
      <title>Site Catalog Format</title>

      <para>Pegasus 3.0 by default now parses Site Catalog format conforming
      to the SC schema 3.0 ( XML3 ) available <ulink role=""
      url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.2/dax-3.2.xsd"
      userlevel="">here</ulink> and is explained in detail in the chapter on
      Catalogs.</para>

      <para>Pegasus 3.0 comes with a pegasus-sc-converter that will convert
      users old site catalog ( XML ) to the XML3 format. Sample usage is given
      below.</para>

      <programlisting><emphasis role="bold">$ pegasus-sc-converter -i sample.sites.xml -I XML -o sample.sites.xml3 -O XML3
</emphasis>
2010.11.22 12:55:14.169 PST:   Written out the converted file to sample.sites.xml3 
</programlisting>

      <para>To use the converted site catalog, in the properties do the
      following</para>

      <orderedlist>
        <listitem>
          <para>unset pegasus.catalog.site or set pegasus.catalog.site to
          XML3</para>
        </listitem>

        <listitem>
          <para>point pegasus.catalog.site.file to the converted site
          catalog</para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Transformation Catalog Format</title>

      <para>Pegasus 3.0 by default now parses a file based multiline textual
      format of a Transformation Catalog. The new Text format is explained in
      detail in the chapter on Catalogs.</para>

      <para>Pegasus 3.0 comes with a pegasus-tc-converter that will convert
      users old transformation catalog ( File ) to the Text format. Sample
      usage is given below.</para>

      <programlisting><emphasis role="bold">$ pegasus-tc-converter -i sample.tc.data -I File -o sample.tc.text -O Text
</emphasis>
2010.11.22 12:53:16.661 PST:   Successfully converted Transformation Catalog from File to Text 
2010.11.22 12:53:16.666 PST:   The output transfomation catalog is in file  /lfs1/software/install/pegasus/pegasus-3.0.0cvs/etc/sample.tc.text 
</programlisting>

      <para>To use the converted transformation catalog, in the properties do
      the following</para>

      <orderedlist>
        <listitem>
          <para>unset pegasus.catalog.transformation or set
          pegasus.catalog.transformation to Text</para>
        </listitem>

        <listitem>
          <para>point pegasus.catalog.transformation.file to the converted
          transformation catalog</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section>
    <title>Properties and Profiles Simplification</title>

    <para>Starting with Pegasus 3.0 all profiles can be specified in the
    properties file. Profiles specified in the properties file have the lowest
    priority. Profiles are explained in the detail in the<link
    linkend="advanced_concepts_profiles"> Chapter on Profiles</link>. As a
    result of this a lot of existing Pegasus Properties were replaced by
    profiles. The table below lists the properties removed and the new profile
    based names.</para>

    <table>
      <title>Table 1: Property Keys removed and their Profile based
      replacement</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Old Property Key</emphasis></entry>

            <entry><emphasis role="bold">New Property Key</emphasis></entry>
          </row>

          <row>
            <entry>pegasus.local.env</entry>

            <entry>no replacement. Specify env profiles for local site in the
            site catalog</entry>
          </row>

          <row>
            <entry>pegasus.condor.release</entry>

            <entry>condor.periodic_release</entry>
          </row>

          <row>
            <entry>pegasus.condor.remove</entry>

            <entry>condor.periodic_remove</entry>
          </row>

          <row>
            <entry>pegasus.job.priority</entry>

            <entry>condor.priority</entry>
          </row>

          <row>
            <entry>pegasus.condor.output.stream</entry>

            <entry>pegasus.condor.output.stream</entry>
          </row>

          <row>
            <entry>pegasus.condor.error.stream</entry>

            <entry>condor.stream_error</entry>
          </row>

          <row>
            <entry>pegasus.dagman.retry</entry>

            <entry>dagman.retry</entry>
          </row>

          <row>
            <entry>pegasus.exitcode.impl</entry>

            <entry>dagman.post</entry>
          </row>

          <row>
            <entry>pegasus.exitcode.scope</entry>

            <entry>dagman.post.scope</entry>
          </row>

          <row>
            <entry>pegasus.exitcode.arguments</entry>

            <entry>dagman.post.arguments</entry>
          </row>

          <row>
            <entry>pegasus.exitcode.path.*</entry>

            <entry>dagman.post.path.*</entry>
          </row>

          <row>
            <entry>pegasus.dagman.maxpre</entry>

            <entry>dagman.maxpre</entry>
          </row>

          <row>
            <entry>pegasus.dagman.maxpost</entry>

            <entry>dagman.maxpost</entry>
          </row>

          <row>
            <entry>pegasus.dagman.maxidle</entry>

            <entry>dagman.maxidle</entry>
          </row>

          <row>
            <entry>pegasus.dagman.maxjobs</entry>

            <entry>dagman.maxjobs</entry>
          </row>

          <row>
            <entry>pegasus.remote.scheduler.min.maxwalltime</entry>

            <entry>globus.maxwalltime</entry>
          </row>

          <row>
            <entry>pegasus.remote.scheduler.min.maxtime</entry>

            <entry>globus.maxtime</entry>
          </row>

          <row>
            <entry>pegasus.remote.scheduler.min.maxcputime</entry>

            <entry>globus.maxcputime</entry>
          </row>

          <row>
            <entry>pegasus.remote.scheduler.queues</entry>

            <entry>globus.queue</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Profile Keys for Clustering</title>

      <para>The pegasus profile keys for job clustering were <emphasis
      role="bold">renamed</emphasis>. The following table lists the old and
      the new names for the profile keys.</para>

      <table>
        <title>Table 2: Old and New Names For Job Clustering Profile
        Keys</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Old Pegasus Profile
              Key</emphasis></entry>

              <entry><emphasis role="bold">New Pegasus Profile
              Key</emphasis></entry>
            </row>

            <row>
              <entry>collapse</entry>

              <entry>clusters.size</entry>
            </row>

            <row>
              <entry>bundle</entry>

              <entry>clusters.num</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
  </section>

  <section>
    <title>Transfers Simplification</title>

    <para>Pegasus 3.0 has a new default transfer client pegasus-transfer that
    is invoked by default for first level and second level staging. The
    pegasus-transfer client is a python based wrapper around various transfer
    clients like globus-url-copy, lcg-copy, wget, cp, ln . pegasus-transfer
    looks at source and destination url and figures out automatically which
    underlying client to use. pegasus-transfer is distributed with the PEGASUS
    and can be found in the bin subdirectory .</para>

    <para>Also, the Bundle Transfer refiner has been made the default for
    pegasus 3.0. Most of the users no longer need to set any transfer related
    properties. The names of the profiles keys that control the Bundle
    Transfers have been changed . The following table lists the old and the
    new names for the Pegasus Profile Keys and are explained in details in the
    Profiles Chapter.</para>

    <table>
      <title>Table 3: Old and New Names For Transfer Bundling Profile
      Keys</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Old Pegasus Profile
            Key</emphasis></entry>

            <entry><emphasis role="bold">New Pegasus Profile
            Keys</emphasis></entry>
          </row>

          <row>
            <entry>bundle.stagein</entry>

            <entry>stagein.clusters | stagein.local.clusters |
            stagein.remote.clusters</entry>
          </row>

          <row>
            <entry>bundle.stageout</entry>

            <entry>stageout.clusters | stageout.local.clusters |
            stageout.remote.clusters</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <section>
      <title>Worker Package Staging</title>

      <para>Starting Pegasus 3.0 there is a separate boolean property
      <emphasis role="bold">pegasus.transfer.worker.package</emphasis> to
      enable worker package staging to the remote compute sites. Earlier it
      was bundled with user executables staging i.e if <emphasis
      role="bold">pegasus.catalog.transformation.mapper</emphasis> property
      was set to Staged .</para>
    </section>
  </section>

  <section>
    <title>Clients in bin directory</title>

    <para>Starting with Pegasus 3.0 the pegasus clients in the bin directory
    have a pegasus prefix. The table below lists the old client names and new
    names for the clients that replaced them</para>

    <table>
      <title>Table 1: Old Client Names and their New Names</title>

      <tgroup cols="2">
        <tbody>
          <row>
            <entry><emphasis role="bold">Old Client</emphasis></entry>

            <entry><emphasis role="bold">New Client</emphasis></entry>
          </row>

          <row>
            <entry>rc-client</entry>

            <entry>pegasus-rc-client</entry>
          </row>

          <row>
            <entry>tc-client</entry>

            <entry>pegasus-tc-client</entry>
          </row>

          <row>
            <entry>pegasus-get-sites</entry>

            <entry>pegasus-sc-client</entry>
          </row>

          <row>
            <entry>sc-client</entry>

            <entry>pegasus-sc-converter</entry>
          </row>

          <row>
            <entry>tailstatd</entry>

            <entry>pegasus-monitord</entry>
          </row>

          <row>
            <entry>genstats and genstats-breakdown</entry>

            <entry>pegasus-statistics</entry>
          </row>

          <row>
            <entry>show-job</entry>

            <entry>pegasus-plots</entry>
          </row>

          <row>
            <entry>cleanup</entry>

            <entry>pegasus-cleanup</entry>
          </row>

          <row>
            <entry>dirmanager</entry>

            <entry>pegasus-dirmanager</entry>
          </row>

          <row>
            <entry>exitcode</entry>

            <entry>pegasus-exitcode</entry>
          </row>

          <row>
            <entry>rank-dax</entry>

            <entry>pegasus-rank-dax</entry>
          </row>

          <row>
            <entry>transfer</entry>

            <entry>pegasus-transfer</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
  </section>
</chapter>

