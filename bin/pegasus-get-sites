#!/usr/bin/env perl
#
# queries gridcat(s) to compile list of site environments, and TCs.
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Author: Jens-S. Vöckler voeckler at cs dot uchicago dot edu
# $Id$
#
require 5.005;
use strict;
use DBI;
use Carp;
use Sys::Hostname;
use File::Spec;
use File::Basename;
use Getopt::Long qw(:config bundling);
use POSIX qw(strftime uname);
use Time::HiRes qw(time);
use Socket;
use Fcntl;
use Errno qw(EEXIST);
use Digest::MD5;

use GriPhyN::WF;		# dummy module, but required
use GriPhyN::SC;		# site catalog (SC) 
use GriPhyN::TC;		# transformation catalog (TC)
use GriPhyN::TC::new qw(parse_profile);	# special needs
use Work::Properties qw(:parse);# parse properties
use GriPhyN::VORS;

my %db = (
    'osg' => {
	xmlrpc => undef,
	comment => 'OSG production layout database',
	type => 'mysql',
	host => 'osg-cat.grid.iu.edu',
	port => '3306',
	name => 'osgcat',
	user => undef,
	pass => undef },
    'osg-itb' => {
	xmlrpc => 'http://www.ivdgl.org/osg-int/gridcat/services.php',
	comment => 'OSG ITB layout database',
	type => 'mysql',
	host => 'grid01.uits.indiana.edu', # Bockjoo: 10/07 email
	port => '3307',
	name => 'osgitb',
	user => undef,
	pass => undef },
    'fallback' => {
	xmlrpc => undef,
	comment => 'Grid3 locally cached copy',
	type => 'Pg',
	host => 'griodine.uchicago.edu',
	port => '5432',
	name => 'grid3v8',
	user => 'gridcat',
	pass => 'geheim' },
     'green' => {
	xmlrpc => undef,
	comment => 'Dartmouth clusters (private)',
	type => 'mysql',
	host => 'grid.dartmouth.edu',
	port => '3306',
	name => 'greengrid',
	user => undef,
	pass => undef },
     'sofa' => {
	xmlrpc => undef,
	comment => 'UofC SofaGrid mini-cluster (private)',
	type => 'SQLite2',
	host => undef,
	port => undef,
	name => File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'contrib', 'OurGrids', 'sofa.db' ),
	user => undef,
	pass => undef },
      'isi' => {
	xmlrpc => undef,
	comment => 'ISI Hijack, DC and Viz cluster (private)',
	type => 'SQLite2',
	host => undef,
	port => undef,
	name => File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'contrib', 'OurGrids', 'isi.db' ),
	user => undef,
	pass => undef },
      'tg' => {
	xmlrpc => undef,
	comment => 'Teragrid Clusters',
	type => 'SQLite2',
	host => undef,
	port => undef,
	name => File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'contrib', 'OurGrids', 'tg.db' ),
	user => undef,
	pass => undef }  
);

# each database names attributes differently, sigh.
# extend, if you use other drivers than mysql or Pg.
my %quirks = ( 'mysql' => 'database', 
	       'Pg' => 'dbname', 
	       'SQLite2' => 'dbname' );
my $user = $ENV{LOGNAME} || $ENV{USER} || scalar getpwuid($<);
my $default = 'osg';		# which default database
my $default_rls = 'rlsn://smarty.isi.edu';
my $default_version = '4.0.4';
my $default_arch = 'INTEL32::LINUX';
my $default_inst = 'INSTALLED';

#by default we query a DB to get site information
my $default_source = 'db';
my $source = $default_source;#can be set to vors by the user
my %supp_sources = ( db => 0, vors => 1 );

 
my @grid = ( $default );	# maintain ordering GRIDPATH
my %grid = ( $default => {
    xmlrpc => $db{$default}{xmlrpc},
    type => $db{$default}{type},
    host => $db{$default}{host},
    port => $db{$default}{port},
    name => $db{$default}{name},
    user => $db{$default}{user},
    pass => $db{$default}{pass},
    inst => \$default_inst,
    arch => \$default_arch,
    rls  => \$default_rls,
    version => \$default_version # default GT version
    } );

# set defaults of %app to include test[123] transformations
my %app = 
    ( "test::world:1.0" =>         
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::findrange:1.0" =>  
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::preprocess:1.0" => 
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::analyze:1.0" =>    
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::process:1.0" =>    
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::generate:1.0" =>   
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::combine:1.0" =>    
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ],
      "${user}::multi:1.0" =>      
      [ '$pegasus/keg', {}, \$default_inst, \$default_arch ] );


# defaults for the remote vors host
my $default_user_vo = 'pegasus';
my $user_vo = $default_user_vo;
my $default_vors_host = 'vors.grid.iu.edu';
my $default_vors_port = '80';

my $p = Work::Properties->new();

my %tcstyle = ( old => 0, new => 1, pegasus => 2 );
my %tcxlate = ( OldFile => 'old', single => 'old', multiple => 'old',
		File => 'new', Database => 'pegasus' );
my $tcstyle = $tcxlate{$p->property('pegasus.catalog.transformation')} ||
    'new'; # default TC style
my $def_tcfn = File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'var', 'tc.data' );
my $tcfn = $p->property('pegasus.catalog.transformation.file') || $def_tcfn;

my %scstyle = ( old => 0, new => 1, xml => 2 );
my %scxlate = ( single => 'old', multiple => 'old',, Text => 'new',
		XML => 'xml' );
my $scstyle = $scxlate{$p->property('pegasus.catalog.site')} ||
    'xml'; # default SC style is XML
my %scfiles = ( old => 'sites.txt', new => 'sites.txt', xml => 'sites.xml' );
my $def_scfn = File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'var', 
				    $scfiles{$scstyle} );
my $scfn = $p->property('pegasus.catalog.site.file') || 
     $def_scfn;

my $kickstart = '$pegasus/kickstart';
my $workdir = '$tmp';
my $pegasusbin = '$grid3/pegasus/bin';	# FIXME!!! Old: $grid3/pegasus/bin/linux
#my $pegasusbin = '$grid3/pegasus/bin/linux';	# This location is deprecated
my @appfn = ();
my $cutoff = 1;
my ( $showhelp, $keep_defaults, $uofc, $flag1, $flag2, $globus_universe );
my ( $euryale );
my $with_mis = 0;
my $host = Sys::Hostname::hostname || die "Hey, your hostname is not set!\n";
unless ( index($host,'.') > 0 ) {
    eval {
	$host = (uname())[1] if length($host) == 0;
	my $ipv4 = gethostbyname($host);
	die "Unable to gethostbyname($host)" unless length($ipv4) > 0;
	$host = gethostbyaddr($ipv4,AF_INET);
	die "Unable to reverse lookup $host" unless length($host) > 0;
    };
    die "ERROR: $@\n" if $@;
}
warn "# local hostname \"$host\"\n" if $main::DEBUG;

# version
our $BASENAME = basename($0);
our $VERSION='1.0';
$VERSION=$1 if ( '$Revision$' =~ /Revision:\s+([0-9.]+)/o );

$main::DEBUG = 0;
GetOptions( 'help' => \&usage,
	    'cutoff|C=i' => \$cutoff,
	    'debug|d+' => \$main::DEBUG,
	    'app|a=s' => \@appfn,
	    'keep' => \$keep_defaults,
	    'kickstart|kick|k=s' => \$kickstart,
	    'pegasushome|v=s' => \$pegasusbin,
	    'workdir|w=s' => \$workdir,
	    'with-mis' => \$with_mis,
	    'globus' => \$globus_universe,
	    'source=s' => sub{
		$source = lc ($_[1]);
		die "Unknown source \"$source\"\n" unless exists $supp_sources{$source};
	     },
	    'vo=s' => \$user_vo,
	    'default-rls=s' => \$default_rls,
	    'default-version=s' => \$default_version,
	    'default-inst=s' => \$default_inst,
	    'default-arch=s' => \$default_arch,

	    'grid|default=s' => sub {
		if ( lc $_[1] eq 'help' ) {
		    # show grids and exit
		    print &showall;
		    exit 0;
		}
		die "Unknown grid  \"$_[1]\"\n" unless exists $db{$_[1]} || $source eq 'vors';
		unless ( defined $flag1 ) {
		    # initial invocation unsets the current default grid
		    delete $grid{$default};
		    shift @grid;
		    $flag1 = 1;
		}
		if ( exists $grid{$_[1]} ) {
		    warn "Warning: grid $_[1] already defined, skipping!\n";
		} else {
		    push( @grid, $_[1] );
		    $default = $_[1];
		    setup_grid( $default, 
				rls => \$default_rls, 
				version => \$default_version,
				inst => \$default_inst, 
				arch => \$default_arch );
		}
	    },
	    'type=s' => sub { $grid{$default}{type} = $_[1] },
	    'dbname|D=s' => sub { $grid{$default}{name} = $_[1] },
	    'user|u=s' => sub { $grid{$default}{user} = $_[1] },
	    'pass|P=s' => sub { $grid{$default}{pass} = $_[1] },
	    'host|h=s' => sub { $grid{$default}{host} = $_[1] },
	    'port|p=i' => sub { $grid{$default}{port} = $_[1] },
	    'rls|r=s' => sub { $grid{$default}{rls} = $_[1] },
	    'inst=s' => sub { $grid{$default}{inst} = $_[1] },
	    'arch=s' => sub { $grid{$default}{arch} = $_[1] },
	    'version|v=s' => sub { $grid{$default}{version} = $_[1] },

	    'tc|t=s' => \$tcfn,
	    'tc-style|T=s' => sub {
		my $tc = lc($_[1]);
		die "Unknown style \"$tc\" for TC" unless exists $tcstyle{$tc};
		$tcstyle = $tc;
	    },
	    'pc|sc|s=s' => sub {
		$scfn = $_[1];
		$flag2 = 1;
	    },
	    'pc-style|sc-style|S=s' => sub {
		my $sc = lc($_[1]);
		die "Unknown style \"$sc\" for SC" unless exists $scstyle{$sc};
		my $f1 = ( $scfn eq $def_scfn );
		$scstyle = $sc;
		$def_scfn = File::Spec->catfile( $ENV{'PEGASUS_HOME'}, 'var',
						 $scfiles{$scstyle} );
		$scfn = $def_scfn if ( $f1 && ! defined $flag2 );
	    },
	    'uofc' => \$uofc );

#
# --- functions -------------------------------------------------
#

sub deref($) {
    # purpose: do the right thing with a scalar or ref to scalar
    # paramtr: $x (IN): value or ref to value
    my $x = shift;
    ref $x ? $$x : $x;
}

sub setup_grid {
    my $grid = shift;

    unless ( exists $grid{$grid} ) {
	
	# initialize new entry with defaults
	# depending on the source
	if( $source eq 'vors' ){
	    # just set the host and port to defaut vors parameters
	    $grid{$grid}{host} = $default_vors_host;
	    $grid{$grid}{port} = $default_vors_port;
	}
	else{
	    #slurp in information from db hash
	    foreach my $key ( qw(xmlrpc type host port name user pass) ) {
		$grid{$grid}{$key} = $db{$grid}{$key};
	    }
	}
	
	$grid{$grid}{rls} = \$default_rls;
	$grid{$grid}{version} = \$default_version;
	$grid{$grid}{inst} = \$default_inst;
	$grid{$grid}{arch} = \$default_arch;
    }
	
    my %extra = @_;
    # add any arguments
    foreach my $key ( keys %extra ) {
	$grid{$grid}{$key} = $extra{$key};
    }
}

sub ctor_gatekeeper($$) {
    my $host = shift || die "Gatekeeper hostname missing\n";
    my $port = shift || die "Gatekeeper portnumber missing\n";
    ( $port == 2119 ? $host : "$host:$port" );
}

sub ctor_gsiftp($$) {
    my $host = shift || die "Gridftp hostname missing\n";
    my $port = shift || die "Gridftp portnumber missing\n";
    ( $port == 2811 ? "gsiftp://$host" : "gsiftp://$host:$port" );
}

sub ip2host($) {
    # purpose: Converts a listening IPv4 address into a symbolic name
    # paramtr: $ipv4 (IN): dotted quad address as string
    # returns: symbolic hostname
    my $ipv4 = shift;
    if ( $ipv4 eq '0.0.0.0' ) {
	return $host;		# full hostname, primary interface
    } elsif ( $ipv4 =~ /^127\./ ) {
	return 'localhost';	# loopback
    } else {			
	return scalar gethostbyaddr(inet_aton($ipv4),AF_INET);
    }
}

sub xml_version {
    defined $_[2] ? 
	sprintf( 'major="%u" minor="%u" patch="%u"', @_[0..2] ) :
	sprintf( 'major="%u" minor="%u"', @_[0..1] );
}

sub quote($) {
    local($_) = shift;
    s{([\"])}{\\$1}g;
    $_;
}

sub show_profile(%) {
    my %x = @_;
    my $result = '';
    my $flag0 = 0;
    foreach my $ns ( keys %x ) {
	$result .= ';' if $flag0;
	$flag0++;
	$result .= "$ns::";
	my $flag1 = 0;
	foreach my $key ( keys %{$x{$ns}} ) {
	    $result .= ',' if $flag1;
	    $flag1++;
	    $result .= "$key=\"" . quote($x{$ns}{$key}) . '"';
	}
    }

    length($result) ? $result : 'null';
    #$result;
}

sub showdef($) {
    my $x = shift;
    defined $x ? "set to @{[deref($x)]}" : "no settings";
}

sub showstyle {
    my %x = @_;
    '"' . join( '", "', sort { $x{$a} <=> $x{$b} } keys %x ) . '"';
}

sub showall {
    my $result = '';
    foreach my $preset ( sort keys %db ) {
	$result .= sprintf "%14s %-10s %s\n", '', "\"$preset\"", $db{$preset}{comment};
    }
    $result;
}

sub usage {
    print "Generate site catalog (SC) and transformation catalog (TC) from different sources like VORS or GRIDCAT\n";
    print '$Id$', "\n";
    print << "EOF";

Standard options: 
 --cutoff|-C n Requires a minimum number n of CPUs, default is $cutoff.
 --debug|-d    raises debug level (verbosity), default $main::DEBUG. 
 --globus      if set, generates PEGASUS universe \"globus\" entries (deprecated).
 --with-mis    if set, permits the OSG jobmanager-mis to be included.
 --source      selects the source to query for site information, supported sources are
               @{[showstyle(%supp_sources)]}; default source \"$default_source\".
 --vo          the VO to which the user belongs to, default $default_user_vo
 --grid d      selects the gridcat presets appropriate for a grid
@{[showall()]}               default grid is \"$default\".

The grid option may be specified multiple times to run across multiple
grids. The following set of options permit modifications of the preset of
each grid when placed after any --grid option:

 --type drv    database driver to use with DBI, @{[showdef $grid{$default}{type}]}
 --host|-h h   database host h to connect to, @{[showdef $grid{$default}{host}]}
 --port|-p p   database is listening on port p, @{[showdef $grid{$default}{port}]}
 --dbname|-D d  name of the database, @{[showdef $grid{$default}{name}]}
                Note: The short option -D must never be first on the CLI
 --user|-u u   database user to use, @{[showdef $grid{$default}{user}]}
 --pass|-p p   database password to use, @{[showdef $grid{$default}{pass}]}
 --rls|-r rls  LRC for grid \"$default\", @{[showdef $grid{$default}{rls}]}
 --version ver Globus versions in grid $default, @{[showdef $grid{$default}{version}]}
 --inst token  Installation status of the remote application
               [ INSTALLED, STATIC_BINARY, DYNAMIC_BINARY, PACMAN_PACKAGE, 
		 SOURCE, SCRIPT ], default @{[showdef $grid{$default}{inst}]}
 --arch a::os  Architecture and system in grid $default, @{[showdef $grid{$default}{arch}]}
               [ INTEL32, INTEL64, SPARCV7, SPARCV9 ] :: [ LINUX, SUNOS, AIX ]

The following set of options permits to overwrite the default settings
chosen for all grids including the special site "local":

 --default-rls rls   sets the default RLS, default $default_rls.
 --default-inst inst sets the default installation status, default $default_inst.
 --default-arch a::o sets the default architecture, default $default_arch.
 --default-version v sets the default GT version, default $default_version.

Generated catalog filenames and styles: 
 --tc|-t  fn   name of TC file, default $tcfn
 --sc|-s  fn   Name of SC file, default $scfn
 --tc-style s  style to generate the TC with, available styles are
               @{[showstyle(%tcstyle)]}; default style \"$tcstyle\". 
 --sc-style s  style to generate the SC with, available styles are
               @{[showstyle(%scstyle)]}; default style \"$scstyle\". 

The following options permit the variables \$app, \$data, \$grid3, \$wntmp,
\$tmp, and \$pegasus. Variables are replaced by their site-specific values:

 --workdir|-w  Remote site\'s user\'s working directory for jobs.
               Defaults to $workdir
 --pegasus|-v      Location where the remote PEGASUS worker tools are installed.
               Defaults to $pegasusbin
 --kick|-k ks  Remote kickstart location, defaults to $kickstart
 --keep        Keep the defaults below despite the presence of --app mappings.
 --app|-a fn   name of a file which maps TRs. Entries in the fn are generated
               for each valid site. Option may be specified multiple times.
	       Defaults are removed if -a is present. Default input file:

EOF
    foreach my $tr ( keys %app ) {
	printf( "%-24s %s  %s  %s  %s\n", $tr, $app{$tr}->[0], 
		deref($app{$tr}->[2]) || $default_inst, 
		deref($app{$tr}->[3]) || $default_arch,
		show_profile( $app{$tr}->[1] ) );
    }

    exit 0;
}

sub load_module($$$) {
    # purpose: dynamically load a module at run-time
    # warning: This function must reside in module 'main' ???
    # paramtr: $wf (IN): workflow manager handle
    #          $match (IN): property prefix match string
    #          $base (IN): Perl name of the base module (name prefix)
    # returns: an instance towards the module, or undef for failure
    my $wf = shift || die 'workflow manager unknown';
    my %temp = ref($_[0]) eq 'HASH' ? %{ shift() } : 
	extract_properties($wf,shift()); # will die on missing arg
    my $base = shift || die "need the name of the module to load";
    no strict 'refs';

    # create module name
    $base .= '::' unless substr($base,-2) eq '::';
    my $module = $base . $temp{style};
    
    # dynamically load module at run-time
    eval "require $module;";
    die $@ if $@;
    # import the exported variable (module ISA exporter)
    $module->import() if $module->can('import');
    
    my $handle = $module->new(%temp);
    warn( 'loaded ', ref($handle), ' [', $handle->VERSION, ']' ) 
	if $main::DEBUG;
    $handle;
}

sub _create_backup($) {
    # purpose: creates a backup using increasing digits, and renames
    # paramtr: $fn (IN): name of original file to rename from
    # returns: undef in case of error, chosen backup filename otherwise
    my $fn = shift;

    # from "man 2 open" on Linux:                 O_EXCL is broken  on
    # NFS file systems, programs which rely on it for performing lock-
    # ing tasks will contain a race condition.  The solution for  per-
    # forming  atomic  file  locking  using  a lockfile is to create a
    # unique file on the same fs  (e.g.,  incorporating  hostname  and
    # pid),  use  link(2)  to  make  a link to the lockfile. If link()
    # returns 0, the lock is successful.  Otherwise,  use  stat(2)  on
    # the  unique  file to check if its link count has increased to 2,
    # in which case the lock is also successful.
    my $ctx = Digest::MD5->new;
    $ctx->add( $$ );		
    $ctx->add( time() );
    $ctx->add( $fn );
    my $unique = $fn . '-' . $ctx->hexdigest() . '.lck';

    local(*UNIQUE);
    open( UNIQUE, ">$unique" ) || return undef;
    close UNIQUE;		# created unique file

    my $n = 0;
    for (;;) {
	# create backup file name to attempt
	my $backup = "$fn.$n";
	$n++;

	# attempt to create link
	if ( link( $unique, $backup ) ) {
	    # success, backup did not exist previously
	    # remove link
	    unlink $unique;
	    return undef unless rename( $fn, $backup );	
	    return $backup;
	} else {
	    # failure of link call, check stat record
	    my @st = stat($unique); 
	    if ( @st == 0 ) {
		# stat call failed -- where did our file go?
		my $saverr = $!;
		unlink $unique;
		$! = $saverr;
		return undef;
	    } elsif ( $st[3] == 2 ) {
		# hard link count is 2, also success
		unlink $unique;
		return undef unless rename( $fn, $backup );
		return $backup;
	    }
	}
    }
}

sub open_with_backup(*$) {
    # purpose: open a file for writing, but back up previous instances
    # paramtr: *FD (IN): Perl file handle
    #          $fn (IN): name of file to open for writing
    # returns: undef on error, non-zero on success
    # warning: This (O_EXCL) is not NFS-safe!
    local(*FD) = shift;
    my $fn = shift;
    my $mode = ( O_WRONLY | O_CREAT | O_EXCL );

    my ($backup,$retries);
    while ( ! defined sysopen( FD, $fn, $mode, 0666 ) && ++$retries < 5 ) {
	return undef unless $!{EEXIST};
	return undef unless defined ($backup = _create_backup($fn));
	warn "# backup $fn\n# -> $backup\n";
    }

    $retries < 5;
}

sub max {
    $_[0] > $_[1] ? $_[0] : $_[1];
}

sub trim {
    # purpose: removes leading and trailing whitespaces
    local $_ = shift;
    s/^\s*//;
    s/\s*$//;
    $_;
}


sub get_sites_from_vors($$$){
    #purpose: query a VORS host, and get all the sites applicable to a 
    #         particular VO on a particular grid. 
    #paramtr: $host  the host where the VORS server is running
    #         $port  the port on the host.
    #         $grid  the grid for which information is required.
    #returns: an array of hash references, with each hash containing 
    #         information about one site.
   

    #hardcoded for now. to be picked up later from arguments
    my ($host, $port, $grid ) = @_;
    my $cmd;
    my $resp;
    #to contain array of hashes, with each hash containing information about one site
    my @result;
    
    #get the first level of information about the sites in this grid.
    my %sites = get_sites_in_grid( $host, $port, $grid, $user_vo );
    
    #print out the information about each site
    #foreach my $site_id (keys %sites){
    #	print "\nSITE ID IS $site_id";
    #	foreach my $key( keys %{$sites{$site_id}} ){
    #	    print "\n$key => $sites{$site_id}{$key}";
    #	}
    #}

    #go through each site, and check status before
    #proceeding to get more detailed information
    my $index = 0;
    foreach my $site_id (keys %sites){
	my %site = %{$sites{$site_id}};
	if ($site{"STATUS"} eq "PASS"){
	    #site is accessible
	    #get more information
	    warn "# site $site{\"NAME\"}  $site_id is ACCESSIBLE\n";
	    my %site_info = get_site_information($host, $port, $user_vo, $grid, $site{"ID"});

	    #convert to pegasus-get-sites format
	    my %pegasus_site_info = convert_siteinfo_to_pegasus(%site_info);


	    if( $main::DEBUG){
		warn " {\n";
		foreach my $key (keys %pegasus_site_info){
		    warn " $key=>$pegasus_site_info{$key}\n";
		}
		warn " }\n";		
	    }

	    #$result[$index] = %pegasus_site_info;
	    push(@result, \%pegasus_site_info);
	    $index++;
	}
	else{
	    #site is inaccessible 
	    warn "# site $site{\"NAME\"}  $site_id is INACCESSIBLE\n";
	}
	
    }
    return @result;
}

#
# --- main ------------------------------------------------------
#

# some apps to be put into all TC entries
@appfn = split(/,/,join(',',@appfn));
if ( @appfn > 0 ) {
    %app = () unless $keep_defaults; # remove defaults
    foreach my $appfn ( @appfn ) {
	if ( defined $appfn && open( APP, "<$appfn" ) ) {
	    warn "# reading transformation mappings from $appfn\n";
	    while ( <APP> ) {
		s/[\r\n]*$//;
		s/\#.*//;
		next unless length($_) > 1;

		my @x = split /\s+/, $_, 5;
		my $x = @x + 0;
		$x[4] = 'null' if $x < 5;
		$x[3] = $default_arch if $x < 4;
		$x[2] = $default_inst if $x < 3;
		$app{$x[0]} = [ $x[1], { parse_profile($x[4]) }, 
				$x[2], $x[3] ];
	    }
	    close APP;
	}
    }
} else {
    warn "# using default transformation mappings.\n";
}

# create catalog handles
my $wf = GriPhyN::WF->new('/dev/null') || die; # handle for wf conf module
my $sc = load_module( $wf, { style => $scstyle, file => undef }, 
		      'GriPhyN::SC' );
my $tc = load_module( $wf, { style => $tcstyle, file => undef, keep => 1 }, 
		      'GriPhyN::TC' );

my @mygk = qw(cs_gatekeeper_hostname cs_gsiftp_hostname
	      ss_gatekeeper_hostname ss_gsiftp_hostname);

# jet over all grids
my $done_uofc = 0;
my $count = 0;			# counts entries in SC

$source = lc $default_source if !defined($source);

warn "# Querying the source \"$source\" for site information\n";
foreach my $grid ( @grid ) {
    warn "# assembling information for grid \"$grid\".\n";
    # hash reference containing information about all sites in the grid.
    my $x;
    if($source eq 'db' || $source eq 'gridcat'){
	# create database connection URI
	my $uri = 'dbi:' . $grid{$grid}{type} . ':';
	$uri .= $quirks{$grid{$grid}{type}} . '=' . $grid{$grid}{name};
	
	$uri .= ';host=' . $grid{$grid}{host} if defined $grid{$grid}{host};
	$uri .= ';port=' . $grid{$grid}{port} if defined $grid{$grid}{port};
	warn "# using URI $uri\n";	# if $main::DEBUG;
	
	# connect to database
	my $dbh = DBI->connect( $uri, $grid{$grid}{user}, $grid{$grid}{pass}, 
				{ RaiseError => 1, AutoCommit => 0 } ) ||
				    die "ERROR: Database connection failed: $DBI::errstr\n";
	
	# create a join to slurp into RAM
	my $sth = $dbh->prepare( q{
	    SELECT s.id,s.name,
	    si.appdir,si.datadir,si.grid3dir,si.wntmpdir,si.tmpdir,
	    s.cs_gatekeeper_hostname,s.cs_gatekeeper_port,
	    s.cs_gsiftp_hostname,s.cs_gsiftp_port,
	    s.ss_gatekeeper_hostname,s.ss_gatekeeper_port,
	    s.ss_gsiftp_hostname,s.ss_gsiftp_port,
	    s.jobmanagers,s.vo,s.num_cpus,si.ncpus
		FROM sites s, site_info si
		WHERE s.id = si.id} ) || die "prepare: $DBI::errstr";
	$sth->execute || die "execute: $DBI::errstr";
	
	# slurp
	#my $x = $sth->fetchall_hashref('id') || die "fetchall: $DBI::errstr\n";
	$x = $sth->fetchall_hashref('id') || die "fetchall: $DBI::errstr\n";
	$sth->finish;
	
#    # NEW: gather software
#    my @row;
#    $sth = $dbh->prepare( q{
#	SELECT owning_id,name,version from site_software} ) || 
#	    die "prepare: $DBI::errstr";
#    while ( (@row=$sth->fetchrow_array) ) {
#	$x->{$row[0]}->{software}->{$row[1]} = $row[2];
#    }
#    $sth->finish;

	$dbh->disconnect;
	undef $dbh;

	# add fake entry for UofC on special conditions
	if ( ! $done_uofc ) {
	    $done_uofc++;
	    $x->{55} = { name => 'uofc',
			 appdir => "/home/$user",
			 datadir => "/home/$user",
			 grid3dir => '/opt/globus/globus-2.4.3',
			 wntmpdir => '/tmp',
			 tmpdir => "/data/olfactory1/$user",
			 cs_gatekeeper_hostname => 'e.cs.uchicago.edu',
			 cs_gatekeeper_port => '2119',
			 cs_gsiftp_hostname => 'e.cs.uchicago.edu',
			 cs_gsiftp_port => '2811',  
			 ss_gatekeeper_hostname => 'e.cs.uchicago.edu',
			 ss_gatekeeper_port => '2119',
			 ss_gsiftp_hostname => 'e.cs.uchicago.edu',
			 ss_gsiftp_port => '2811', 
			 jobmanagers => 'fork,condor',
			 vo => 'private',
			 num_cpus => '50',
			 ncpus => '50' 
			 } if $uofc;
	}
    }# end of querying gridcat
    elsif( $source eq 'vors'){		
	my $host = $grid{$grid}{host};
	my $port = $grid{$grid}{port};
	#print "\n connection param is $host:$port\n";

	# call out to VORS
	my @sites = get_sites_from_vors( $host, $port, $grid );

	#push all the sites in the $x hash assigning
	#each site a unique id
	my $id = 1;

	my $size = @sites;
	
	foreach my $site ( @sites ){	    
	    $x->{$id} = $site;
	    $id++;
	    #print " $site->{'name'} \n";
	}
    }   
    else{
	die "Source \"$source\" not supported\n" ;
    }

    # use descending order by CPU strength, just for the fun of it
  OUTER:
    foreach my $id ( sort { max( $x->{$b}->{ncpus}, $x->{$b}->{'num_cpus'} ) <=>
			    max( $x->{$a}->{ncpus}, $x->{$a}->{'num_cpus'} ) }
		     keys %{$x} ) {
	my $site = $x->{$id}->{name};

	foreach my $mygk ( @mygk ) {
	    my $gk = $x->{$id}->{$mygk};
	    if ( ! defined $gk || length($gk) < 5 || 
		 $gk =~ /__host_?name__/ ) {
		warn( "Warning: $site has no $mygk ($gk), skipping site\n" );
		next OUTER;
	    }
	}

	my $gk = $x->{$id}->{'cs_gatekeeper_hostname'};
	my $ncpus = max( $x->{$id}->{'ncpus'},
			 $x->{$id}->{'num_cpus'} );

	if ( $ncpus < $cutoff ) {
	    warn( "Warning: $site has $ncpus CPUs < $cutoff cut-off, skipping site\n" );
	    next;
	} else {
	    warn "# processing $site, $ncpus CPUs\n";
	}

	my @batch = grep {!/fork/} split( /,/, $x->{$id}->{jobmanagers} );
	@batch = grep {!/mis/} @batch unless $with_mis;

	my ($csgk,$csgf,$ssgk,$ssgf);
	eval {
	    $csgk = ctor_gatekeeper( $x->{$id}->{'cs_gatekeeper_hostname'},
				     $x->{$id}->{'cs_gatekeeper_port'} );
	    $csgf = ctor_gsiftp( $x->{$id}->{'cs_gsiftp_hostname'},
				 $x->{$id}->{'cs_gsiftp_port'} );
	    $ssgk = ctor_gatekeeper( $x->{$id}->{'ss_gatekeeper_hostname'} ||
				     $x->{$id}->{'cs_gatekeeper_hostname'},
				     $x->{$id}->{'ss_gatekeeper_port'} );
	    $ssgf = ctor_gsiftp( $x->{$id}->{'ss_gsiftp_hostname'} ||
				 $x->{$id}->{'cs_gsiftp_hostname'},
				 $x->{$id}->{'ss_gsiftp_port'} );
	};
	if ( $@ ) {
	    chomp($@);
	    warn "ERROR: $@, removing site\n";
	    next;
	}

	my %xlate = ( site => $site, gk => $gk, ncpus => $ncpus, 
		      user => $user, pegasus => $pegasusbin,
		      csgk => $csgk, ssgk => $ssgk, 
		      csgf => $csgf, ssgf => $ssgf );

	# fill in some values first
	foreach my $key ( qw(app data grid3 tmp wntmp) ) {
	    $xlate{$key} = trim( $x->{$id}->{$key . 'dir'} );
	}

	# now start substituting and checking
	foreach my $key ( qw(app data grid3 pegasus) ) {
	    $xlate{$key} =~ s/\$(\w+)/(exists $xlate{$1} ? $xlate{$1} : "\$$1")/egx;
	    if ( $xlate{$key} eq 'unknown' || ! defined $xlate{$key} ) {
		warn "ERROR: Site $site does not define \$$key, removing $site\n";
		next OUTER;
	    } elsif ( length($xlate{$key}) < 1 ) {
		warn "ERROR: \$$key is empty, removing $site\n";
		next OUTER;
	    } elsif ( $xlate{$key} !~ m{^[\$/]} ) {
		warn "ERROR: \$$key is \"$xlate{$key}\", removing $site\n";
		next OUTER;
	    }
	}

	# not fatal for temps
	foreach my $key ( qw(tmp wntmp) ) {
	    $xlate{$key} =~ s/\$(\w+)/(exists $xlate{$1} ? $xlate{$1} : "\$$1")/egx;
	    if ( $xlate{$key} eq 'unknown' || ! defined $xlate{$key} ) {
		warn "Warning: Site $site does not define \$$key, substituting /tmp\n";
		$xlate{$key} = '/tmp';
	    } elsif ( length($xlate{$key}) < 1 ) {
		warn "ERROR: \$$key is empty, substituting /tmp\n";
		$xlate{$key} = '/tmp';
	    } elsif ( $xlate{$key} !~ m{^[\$/]} ) {
		warn "ERROR: \$$key is \"$xlate{$key}\", substituting /tmp";
		$xlate{$key} = '/tmp';
	    }
	}

	my $launch = $kickstart;
	$launch =~  s/\$(\w+)/(exists $xlate{$1} ? $xlate{$1} : "\$$1")/egx;
	if ( ! defined $launch || $launch eq '' ) {
	    warn "Warning: Unable to evaluate \"$kickstart\", setting to null\n";
	    $launch = 'null';
	}
	$xlate{launch} = $launch;

	my $rwd = $workdir;
	$rwd =~ s/\$(\w+)/(exists $xlate{$1} ? $xlate{$1} : "\$$1")/egx;
	if ( ! defined $rwd || $rwd eq '' ) {
	    warn "Warning: Unable to evaluate \"$workdir\", setting to /tmp\n";
	    $rwd = '/tmp';
	}
	$xlate{rwd} = $rwd;

	# determine remote environment -- no checking done!!!
	my ($gl, $llp);
	$gl = File::Spec->catfile( $xlate{grid3}, 'globus' );
	$llp = File::Spec->catfile( $gl, 'lib' );
	#my $vdldemo = File::Spec->catfile( $xlate{data}, 'vdldemo' );
	#my $bindir = File::Spec->catfile( $vdldemo, 'bin' );

	my $real = $site;
	$real =~ tr/-/_/;

	my $globus_version = deref($grid{$grid}{version});
	my @globus_version = map { $_+0 } split /\./, $globus_version;
	my @special = ( ++$count, $site, $gk, $ncpus );
	my $sysinfo = deref($grid{$grid}{arch});

	#
	# site catalog (SC)
	#
	my %contact = 
	    ( transfer => [ [ "$csgk/jobmanager-fork", undef, 
			      @globus_version ] ],
	      vanilla => [ map { [ $csgk . '/jobmanager-' . $_, undef,
				   @globus_version ] } @batch ] );
	if ( $globus_universe ) {
	    $contact{globus} =  [ map { [ $csgk . '/jobmanager-' . $_, undef,
					  @globus_version ] } @batch ];
	}

	my @gridftp = ();
	if ( $euryale ) {
	    # old way -- set storage dir to workdir
	    @gridftp = ( [ $ssgf, $rwd, @globus_version ] );
	    push( @gridftp, [ $csgf, $rwd, @globus_version ] ) 
		unless ( lc($ssgf) eq lc($csgf) );
	} else {
	    # new way -- Pegasus actually uses the storage dir
	    @gridftp = ( [ $ssgf, $xlate{data}, @globus_version ] );
	    push( @gridftp, [ $csgf, $xlate{data}, @globus_version ] ) 
		unless ( lc($ssgf) eq lc($csgf) );
	}
	
	$sc->add( $real, 
		  lrc => [ deref($grid{$grid}{rls}) ],
		  gridshell => $launch,
		  workdir => $rwd,
		  ncpus => $ncpus,
		  special => [ @special ],
		  sysinfo => $sysinfo,
		  gridftp => [ @gridftp ],
		  contact => { %contact },
		  profile => {
		      env => {
			  app => $xlate{app},
			  data => $xlate{data},
			  grid3 => $xlate{grid3},
			  tmp => $xlate{tmp},
			  wntmp => $xlate{wntmp} },
		      pegasus => {
			  grid => $grid
		      } } );
	
	#
	# transformation catalogs (TC)
	#
	foreach my $lfn ( keys %app ) {
	    my $pfn = $app{$lfn}[0];
	    $pfn =~ s/\$(\w+)/(exists $xlate{$1} ? $xlate{$1} : "\$$1")/egx;

	    my %env = ();
	    foreach my $ns ( keys %{$app{$lfn}[1]} ) {
		foreach my $key ( keys %{$app{$lfn}[1]{$ns}} ) {
		    $_ = $app{$lfn}[1]{$ns}{$key};
		    s{
			\$	# find things that start with dollar
			(\w+)	# find the word after the dollar
		    }{
			if ( exists $xlate{$1} ) {
			    $xlate{$1};	# expand with our variable
			} else {
			    "\$$1";	# keep original variable
			}
		    }egx;
		    $env{$ns}{$key} = $_;
		}
	    }

	    $tc->add( $real, $lfn, $pfn, { %env },
		      deref($app{$lfn}->[2]) || deref($grid{$grid}{inst}) || $default_inst, 
		      deref($app{$lfn}->[3]) || $sysinfo || $default_arch );
	}

	# default transformations for each remote site
	$tc->add( $real, 'globus-url-copy', 
		  "$gl/bin/globus-url-copy",
		  { env => { 'LD_LIBRARY_PATH' => $llp } }, 
		  'INSTALLED', $sysinfo );
	$tc->add( $real, 'transfer', 
		  File::Spec->catfile( $xlate{pegasus}, 'transfer' ),
		  { env => { 'LD_LIBRARY_PATH' => $llp } }, 
		  'INSTALLED', $sysinfo );
	$tc->add( $real, 'T2', 
		  File::Spec->catfile( $xlate{pegasus}, 'T2' ),
		  { env => { 'LD_LIBRARY_PATH' => $llp } }, 
		  'INSTALLED', $sysinfo );
	$tc->add( $real, 'dirmanager', 
		  File::Spec->catfile( $xlate{pegasus}, 'dirmanager' ),
		  { }, 'INSTALLED', $sysinfo );

	# add syntactic sugar
	$tc->add_special( $real, @special );
    }
}

#
# 'local' loopback pool
#
warn "# adding myself as local site\n";
my %local = ( ncpus => 1,
	      version => $default_version,
	      gatekeeper => $host,
	      gridftp => "gsiftp://$host",
	      rls => $default_rls );
my $sysinfo = $default_arch;
if ( lc($^O) eq 'linux' ) {
    # on Linux, try to figure out the environment
    eval {
	my @x = `grep ^processor /proc/cpuinfo`;
	$local{ncpus} = scalar @x;
	chomp($local{ncpus});
    };
    $local{ncpus} ||= 1; 	# set if unset

    if ( open( NS, "netstat -tln|" ) ) {
	my @x;
	while ( <NS> ) {
	    next unless /^tcp/;
	    chomp;
	    @x = split;
	    if ( $x[3] =~ /^([0-9.]+):2119/ ) {
		$local{gatekeeper} = ip2host($1);
	    } elsif ( $x[3] =~ /^([0-9.]+):2811/ ) {
		$local{gridftp} = 'gsiftp://' . ip2host($1);
	    } elsif ( $x[3] =~ /^([0-9.]+):39281/ ) {
		$local{rls} = 'rls://' . ip2host($1);
	    }
	}
	close NS;
    }
}

my @special = ( ++$count, 'local', $host, $local{ncpus} );
my $home = $ENV{HOME} || File::Spec->curdir() ||
    warn "Hey, your \$HOME is not set!\n";
my $vl = $ENV{'PEGASUS_HOME'} || warn "Hey, will you set your PEGASUS_HOME!\n";
my $vdldemo = File::Spec->catfile( $home, 'vdldemo' );
mkdir $vdldemo unless -d $vdldemo; # and create

#
# site catalog (SC) for "local"
#
my @globus_version = map { $_+0 } split /\./, $local{version};
my %contact = ( transfer => [ [ "$local{gatekeeper}/jobmanager-fork", undef, 
				@globus_version ] ],
		vanilla => [ [ "$local{gatekeeper}/jobmanager-condor", undef,
			       @globus_version ] ] );
if ( $globus_universe ) {
    $contact{globus} =  [ [ "$local{gatekeeper}/jobmanager-condor", undef
			    @globus_version ] ];
}
$sc->add( 'local', 
	  lrc => [ $local{rls} ],
	  gridshell => "$vl/bin/kickstart",
	  workdir => $vdldemo,
	  ncpus => $local{ncpus},
	  special => [ @special ],
	  sysinfo => $sysinfo,
	  gridftp => [ [ $local{gridftp}, $vdldemo, @globus_version ] ],
	  contact => { %contact },
	  profile => { pegasus => { grid => 'local' } }
	  );

my $gl = $ENV{'GLOBUS_LOCATION'} || die "Hey, will you set GLOBUS_LOCATION!\n";
my $llp = File::Spec->catfile( $gl, 'lib' );
my $cp = join( ':', File::Spec->catfile( $gl, 'lib', 'rls.jar' ),
	       File::Spec->catfile( $vl, 'lib', 'rls.jar' ),
	       File::Spec->catfile( $vl, 'lib', 'java-getopt-1.0.9.jar' ),
	       File::Spec->catfile( $vl, 'lib', 'gpegasus.jar' ) );
#
# transformation catalog (TC) for "local"
#
$tc->add( 'local', 'RLS_Client', 
	  File::Spec->catfile( $vl, 'bin', 'rls-client' ),
	  { env => { 'JAVA_HOME' => $ENV{'JAVA_HOME'},
		     'PEGASUS_HOME' => $vl,
		     'CLASSPATH' => $cp, 
		     'GLOBUS_LOCATION' => $gl,
		     'LD_LIBRARY_PATH' => File::Spec->catfile($gl,'lib') } }, 
	  'INSTALLED', $sysinfo );
$tc->add( 'local', 'globus-url-copy', 
	  File::Spec->catfile( $gl, 'bin', 'globus-url-copy' ),
	  { env => { 'GLOBUS_LOCATION' => $gl,
		     'LD_LIBRARY_PATH' => File::Spec->catfile($gl,'lib') } }, 
	  'INSTALLED', $sysinfo );
$tc->add( 'local', 'transfer', 
	  File::Spec->catfile( $vl, 'bin', 'transfer' ),
	  { env => { 'GLOBUS_LOCATION' => $gl,
		     'LD_LIBRARY_PATH' => File::Spec->catfile($gl,'lib') } }, 
	  'INSTALLED', $sysinfo );
$tc->add( 'local', 'T2', 
	  File::Spec->catfile( $vl, 'bin', 'T2' ),
	  { env => { 'GLOBUS_LOCATION' => $gl,
		     'LD_LIBRARY_PATH' => File::Spec->catfile($gl,'lib') } }, 
	  'INSTALLED', $sysinfo );
$tc->add( 'local', 'dirmanager', 
	  File::Spec->catfile( $vl, 'bin', 'dirmanager' ), 
	  { }, 'INSTALLED', $sysinfo );

# add syntactic sugar
$tc->add_special( 'local', @special );

# dump catalogs
warn "# dumping catalogs...\n";
local(*SC,*TC);

open_with_backup( SC, $scfn ) || die "open $scfn: $!\n";
warn "# dumping SC into $scfn...\n";
$sc->show( \*SC );
close SC;

open_with_backup( TC, $tcfn ) || die "open $tcfn: $!\n";
warn "# dumping TC into $tcfn...\n";
$tc->show( \*TC );
close TC;

exit 0;
