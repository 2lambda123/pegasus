#!/usr/bin/env python
import os
import globus_sdk
from optparse import OptionParser
from ConfigParser import ConfigParser

client_id = "a69d49b0-1de4-4554-a955-05f0cb6cc2cc"
config_file = os.path.expanduser("~/.pegasus/globus.conf")

parser = OptionParser(description="Initialize Globus OAuth Tokens")
parser.add_option("--permanent", action = "store_true", dest = "permanent", help = "request a refreshable token")

(options, args) = parser.parse_args()

config = ConfigParser()
config.add_section("oauth")
config.set("oauth", "client_id", client_id)

client = globus_sdk.NativeAppAuthClient(client_id)
if options.permanent:
    client.oauth2_start_flow(refresh_tokens=True)
else:
    client.oauth2_start_flow()

authorize_url = client.oauth2_get_authorize_url()
print('Please go to this URL and login: {0}'.format(authorize_url))

get_input = getattr(__builtins__, 'raw_input', input)
auth_code = get_input('Please enter the code you get after login here: ').strip()
token_response = client.oauth2_exchange_code_for_tokens(auth_code)

auth_data = token_response.by_resource_server['auth.globus.org']
transfer_data = token_response.by_resource_server['transfer.api.globus.org']

# get tokens as strings and their expiration timestamp
auth_at = auth_data['access_token']
auth_rt = auth_data['refresh_token']
auth_at_exp = auth_data['expires_at_seconds']
transfer_at = transfer_data['access_token']
transfer_rt = transfer_data['refresh_token']
transfer_at_exp = transfer_data['expires_at_seconds']


config.set("oauth", "auth_at", auth_at)
config.set("oauth", "auth_rt", auth_rt)
config.set("oauth", "auth_at_exp", auth_at_exp)
config.set("oauth", "transfer_at", transfer_at)
config.set("oauth", "transfer_rt", transfer_rt)
config.set("oauth", "transfer_at_exp", transfer_at_exp)

cfg = open(config_file, "w+")
config.write(cfg)
cfg.close()

