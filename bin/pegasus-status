#!/usr/bin/env perl
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Author  Gaurang Mehta gmehta@isi.edu
# Revision : $Revision$

use 5.006;
use strict;

use File::Basename; 		# standard module since 5.005
use File::Spec;			# standard module since 5.005 or 5.6.0
use Getopt::Long qw(:config bundling no_ignore_case);
use Work::Common;

# debug off
$main::debug = 0;
$_ = '$Revision$';      # don't edit, automatically updated by CVS
$main::revision=$1 if /Revision:\s+([0-9.]+)/o;



sub myversion() {
    my $version = version();
    print "Pegasus $version, @{[basename($0)]} $main::revision\n";
    exit 0;
}


sub usage(;$) {
    my $msg = shift;
    print "ERROR: $msg\n" if defined $msg && lc($msg) ne 'help';

    print << "EOF";
Usage: @{[basename($0)]} [options ] [dagdir]
 Pegasus_status helps monitor your jobs by querying condor.
 Options:
 -w|--workflow wf    The workflow to monitor.Default is all
 -t|--time t         The workflow planned time.
 -s|--site site     Montior jobs only on this site. Default is all sites
 -u|--user user      Monitor jobs for user x. Default is \$USER
 -j|--jobtype type  Monitor jobs of one of these types [compute, stagein, stageout, replica,cleanup,intersitetx,computestaged, createdir] . Default is all types.
 -v|--verbose   Enter verbose mode, default is not
 -V|--version   Print version number and exit.
EOF
    exit(1);
}


sub handler {
    # purpose: generic signal handler
    # paramtr: whatever the OS sends a signal handler and Perl makes of it
    # returns: dies
    my $sig = shift;
    # you should not do this in signal handler, but what the heck
    warn "# Signal $sig found\n" if $main::debug;
    die "ERROR: Killed by SIG$sig\n";
}

#
# --- main
#

$SIG{HUP} = \&handler;
$SIG{INT} = \&handler;
$SIG{TERM} = \&handler;
$SIG{QUIT} = \&handler;


my $workflow=undef;
my $time=undef;
my $site=undef;
my $jobtype=undef;
my $user=$ENV{'USER'};
my $notify=undef;
my $condor_q=find_exec('condor_q');

GetOptions( "workflow|w=s"    => \$workflow,
	    "time|t=s"   => \$time,
	    "user|u=s"  => \$user,
	    "sites|s=s" => \$site, 
	    "jobtype|j=s" => \$jobtype,
	    "notify|n=s" => \$notify,
	    "version|V" => \&myversion,
	    "verbose|v" => \$main::debug,
	    "help|h|?" => \&usage );


my $run=shift || undef;
warn "# Got run dir $run\n" if $main::DEBUG;
#  
# JOBTYPE to num mappings
my %jobtypes=("compute",1,
	      "stagein",2,
	      "stageout",3,
	      "replica",4,
	      "intersitetx",5,
	      "createdir",6,
	      "computestaged",7,
	      "cleanup",8);


if(defined $run){
    my @listoffiles=glob "$run/*cdir.sub";
    
    if (scalar(@listoffiles) >0) {
	my $subfile=$listoffiles[0];
	warn "#Opening file $subfile\n" if $main::DEBUG;
	open(FI, "<$subfile") || die "Error: Cannot open file $subfile : $!\n";
	while(<FI>){
	    if ( $_ =~ "pegasus_wf_name "){
		$workflow= (split "=",  $_,  2 )[1];
		$workflow =~ s/^\s+//g;
		$workflow =~ s/\s+$//g;
		$workflow =~ s/\"//g;
	    }
	    if ($_ =~ "pegasus_wf_time"){
		$time=(split "=", $_, 2)[1];
		$time =~ s/^\s+//g;
		$time =~ s/\s+$//g;
                $time =~ s/\"//g;
	    }
	    warn "#Got workflow = $workflow, time =$time from rundir\n" if $main::DEBUG;
	}
	close(FI);
    }
} 

my ($rc,$errors,@result);

my $arg1="-constraint";
my $args=undef;

## construct the command line string
my @arg=($condor_q);
push(@arg, '-constraint') if defined $workflow || defined $time || defined $site || defined $jobtype;
$args = "(pegasus_wf_name==\"$workflow\")" if defined $workflow;

if (defined $time) {
    $args.="&&" if defined $args;
    $args.= "(pegasus_wf_time==\"$time\")";
}
if (defined $site) {
    $args.="&&" if defined $args;
    $args.= "(pegasus_site==\"$site\")";
}

if (defined $jobtype) {
    $args.="&&" if defined $args;
    $args.= "(pegasus_job_class==$jobtypes{$jobtype})";
}

push(@arg,"$args") if defined $args;

push(@arg,$user);

warn "# Running @arg \n" if $main::debug;

## Run the command 
@result=pipe_out_cmd(@arg);

## Print the output result
 print "$_\n" foreach ( @result );

exit(parse_exit($?));
