#!/bin/sh
#
# configure a blank, fresh PEGASUS
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Author: Douglas Scheftner dscheftn at cs dot uchicago dot edu
#

scriptversion='$Id$'
self="`basename $0`"

# 
# figure out PEGASUS_HOME - must be set
#
if [ "_$PEGASUS_HOME" = '_' ]; then
    echo "$self: Error: PEGASUS_HOME not set."
    echo "Please set the PEGASUS_HOME environmental variable and restart bin/pegasus-config found in the pegasus distribution"
    echo
    echo "Exiting pegasus-config"
    exit 1
fi
pegasushome="$PEGASUS_HOME"

#
# === global variables ==========================================
#

host=`hostname`
if [ `expr index $host .` -eq 0 ]; then
    # figure out the FQDN of this host
    host=`gawk "/$host/ { print \\\$2 }" /etc/hosts | head -1`
fi

user="$USER" 
if [ "_$user" = '_' ]; then
    user="$LOGNAME"
fi

home="$HOME"
if [ "_$home" = '_' ]; then
    home=`gawk -F: "/^$user/ {print \\\$6}" /etc/passwd`
fi

shell="$SHELL"
if [ "_$shell" = '_' ]; then
    shell=`gawk -F: "/^$user/ {print \\\$7}" /etc/passwd`
fi

#
# create a temporary file - this will stay, if the script fails
#
tmp=`mktemp /tmp/config-pegasus.XXXXXX`
tmp2=`mktemp /tmp/config-pegasus.XXXXXX`

#
# === shell helper functions ====================================
#

my_usage () {
    # purpose: Show usage string and exit
    cat <<EOF

Tool to provide a freshly-installed blank PEGASUS with a basic configuration.

Usage: $self [-h] [-v] [-s] [-p] [-S]

 --help|-h             provide this help.
 --verbose|-v          provide more information about what is going on. 
 --skip-question|-s    use default answers for most questions (upon re-run).
 --shell-planner|-S    run the Hello World workflow using the shell planner.
 --concrete-planner|-p run Hello World locally using the concrete planner.

EOF
    exit $(( $1 + 0 ))
}

function ShellSetup()
{
    ask_yesno 'Do you want to setup the PEGASUS_HOME shell env. variables in your login script? [y/n] '
    if [ "$ok" = 'y' ] ; then
	case "$shell" in
	    *bash)
            bourne_clean
            bourne_setup
	    ;;
	    *csh)
	    cshell_clean
	    cshell_setup
	    ;;
	    *sh)
            bourne_clean "$HOME/.profile"
	    bourne_setup "$HOME/.profile"
	    ;;
	    *)
	    echo "$self: Warning! Unable to determine your shell type ($shell)"
	    echo "$self: Ignoring login script setup"
	    ;;
	esac
    fi
}

function CheckCurrentLink()
{
    if test -h $HOME/.pegasus/current ; then
        rm $HOME/.pegasus/current
    fi

    if test -e $HOME/.pegasus/current -a ! -h $HOME/.pegasus/current ; then
        mv $HOME/pegasus $HOME/pegasus.`date +%Y.%m%d.%I%M`
    fi
}

function CheckSetup()
{
      case "$shell" in
	*bash)
           bourne_check
	   ;;
	   *csh)
	   cshell_check
	   ;;
	   *sh)
	   bourne_check "$HOME/.profile"    
	   ;;
	   *)
	   echo "$self: Warning! Unable to determine your shell type ($shell)"
	   echo "$self: Ignoring login script setup"
	   ;;
	   esac
}

bourne_setup () {
    # purpose: Append setup information to a user's Bourne shell setup
    # paramtr: fn (opt. IN): suggested login script filename
    # returns: -
    fn=$1
    if [ "_$fn" = '_' ]; then
	if [ -r "$HOME/.profile" ]; then
	    fn="$HOME/.profile"
	elif [ -r "$HOME/.bash_profile" ]; then
	    fn="$HOME/.bash_profile"
	else
	    echo 'Unable to determine name of your login script'
	    echo 'Please create your $HOME/.bash_profile file'
	    echo
	    echo "Exiting pegasus-config"
	    exit 2
	fi
    fi

    echo "Appending $fn"
    (
	echo
	echo 'if [ -d "'$PEGASUS_HOME'" ]; then  ## pegasus-config'
	echo '    PEGASUS_HOME="'$PEGASUS_HOME'"  ## pegasus-config'
	echo '    export PEGASUS_HOME  ## pegasus-config'
	echo '    unset CLASSPATH  ## pegasus-config'
	echo '    source $PEGASUS_HOME/setup.sh  ## pegasus-config'
	echo 'fi  ## pegasus-config'
    ) >>$fn

    echo
    echo "A copy of the PEGASUS_HOME environmental setup code has been copied to $home/.pegasus/$subdir/bash_script_addition for future reference" 

    (
	echo
	echo 'if [ -d "'$PEGASUS_HOME'" ]; then  ## pegasus-config'
	echo '    PEGASUS_HOME="'$PEGASUS_HOME'"  ## pegasus-config'
	echo '    export PEGASUS_HOME  ## pegasus-config'
	echo '    unset CLASSPATH  ## pegasus-config'
	echo '    source $PEGASUS_HOME/setup.sh  ## pegasus-config'
	echo 'fi  ## pegasus-config'
    ) >$home/.pegasus/$subdir/bash_script_addition
}

bourne_check () {
    # purpose: Check if login script exists in the user's Bourne shell setup
    # paramtr: fn (opt. IN): suggested login script filename
    # returns: -
    fn=$1
    if [ "_$fn" = '_' ]; then
	if [ -r "$HOME/.profile" ]; then
	    fn="$HOME/.profile"
	elif [ -r "$HOME/.bash_profile" ]; then
	    fn="$HOME/.bash_profile"
	else
	    echo 'Unable to determine name of your login script'
	    echo 'Please create your $HOME/.bash_profile file'
	    echo
	    echo "Exiting pegasus-config"
	    exit 2
	fi
    fi

    echo
    echo "Checking $fn"

    value2=`grep "## pegasus-config" $HOME/.bash_profile | wc -l`

    if [ "$value2" -gt "1" ] ; then
	echo
	echo "The bourne setup script for the Virtual Data System has already been added to $fn"
	
	ask_yesno 'Do you want to replace the current Virtual Data System setup lines in your login script? [y/n] '
	if [ "$ok" = 'y' ] ; then
	    bourne_clean
	    bourne_setup
	fi
    else
	ShellSetup
    fi
    
}

bourne_clean () {
    fn=$1
    if [ "_$fn" = '_' ]; then
	if [ -r "$HOME/.profile" ]; then
	    fn="$HOME/.profile"
	elif [ -r "$HOME/.bash_profile" ]; then
	    fn="$HOME/.bash_profile"
	else
	    echo 'Unable to determine name of your login script'
	    echo 'Please create your $HOME/.bash_profile file'
	    echo
	    echo "Exiting pegasus-config"
	    exit 2
	fi
    fi

    echo
    echo "Checking $fn"
    echo

    datetemp=`date +%Y.%m%d.%I%M`

    mv $fn $fn.$datetemp
    
    sed 's/.*## pegasus-config//g' $fn.$datetemp > $fn

}

cshell_clean () {
    # purpose: Append setup information to a user's C-shell setup
    # paramtr: fn (opt. IN): suggested login script filename
    # returns: -
    # NEED TO UPDATE THIS
    fn=$1
    test "_$fn" = '_' && fn="$HOME/.login"

    echo
    echo "Checking $fn"

    datetemp=`date +%Y.%m%d.%I%M`

    mv $fn $fn.$datetemp
    
    sed 's/.*## pegasus-config//g' $fn.$datetemp > $fn
}

cshell_setup () {
    # purpose: Append setup information to a user's C-shell setup
    # paramtr: fn (opt. IN): suggested login script filename
    # returns: -
    fn=$1
    test "_$fn" = '_' && fn="$HOME/.login"

    echo "Appending $fn"
    (
	echo
	echo 'if ( -d "' $PEGASUS_HOME '" ) then ## pegasus-config'
	echo '    setenv PEGASUS_HOME "'$PEGASUS_HOME'" ## pegasus-config'
	echo '    unset CLASSPATH ## pegasus-config'
	echo '    source "${PEGASUS_HOME}/setup.csh" ## pegasus-config'
	echo 'endif ## pegasus-config'
    ) >>$fn

    echo "A copy of the PEGASUS_HOME environmental setup code has been copied to $home/.pegasus/$subdir/cshell_script_addition for future reference"
    echo 

    (
	echo
	echo 'if ( -d "' $PEGASUS_HOME '" ) then ## pegasus-config'
	echo '    setenv PEGASUS_HOME "'$PEGASUS_HOME'" ## pegasus-config'
	echo '    unset CLASSPATH ## pegasus-config'
	echo '    source "${PEGASUS_HOME}/setup.csh" ## pegasus-config'
	echo 'endif ## pegasus-config'
    ) >$home/.pegasus/$subdir/cshell_script_addition

}

cshell_check () {
    fn=$1
    test "_$fn" = '_' && fn="$HOME/.login"

    echo
    echo "Checking $fn"

    value2=`grep "## pegasus-config" $HOME/.login | wc -l`
    
    if [ "$value2" -gt "1" ] ; then
	echo
	echo "The bourne setup script for the Virtual Data System has already been added to $fn"
	
	ask_yesno 'Do you want to replace the current Virtual Data System setup lines in your login script? [y/n] '
	if [ "$ok" = 'y' ] ; then
	    cshell_clean
	    cshell_setup
	fi
    else
	ShellSetup
    fi
}

preserve_dst() {
    # purpose: back-up real file, or remove symlinks
    # paramtr: $1: location
    if test -h "$1"; then
	rm "$1"
    elif test -f "$1"; then
	echo "$self: File $1 already exists, moving to $1.`date +%Y.%m%d.%I%M`"
	mv "$1" "$1.`date +%Y.%m%d.%I%M`"
    fi
}

new_version () {
    # purpose: substitute files, creating symlinks
    # paramtr: $1: original catalog file location
    # paramtr: $2: template file location

    # backup real files, or remove symlinks
    preserve_dst "$1"

    # substitute parameters from template into next version
    perl -pe "s{<dbdriver>}{$dbdriver}g; s{<dbhost>}{$dbhost}g; s{<dbperl>}{$dbperl}g; s{<db_url>}{${db_url}}g; s{<dbname>}{$dbname}g; s{<dbuser>}{$dbuser}g; s{<dbpass>}{$dbpass}g; s{<rlsuri>}{${rls_uri}}g; s{<worknode>}{$worknode}g; s{<site>}{$worksite}g; s{<pegasushome>}{$pegasushome}g; s{<home>}{$home}g; s{<user>}{$user}g; s{<host>}{$host}g; s{<globus>}{${GLOBUS_LOCATION}}g; s{<java>}{${JAVA_HOME}}g;s{<pegasus.home.pegasus>}{$home/.pegasus/$subdir}g;" \
	"$2" > "$1"

    echo " Installed $1"
}

show_enter () {
    # purpose: show a message, show the default, read the response
    # paramtr: $1: message
    #          $2: default
    # returns: $resp contains the default or newly entered value
    echo -ne "$1 [$2]: "
    if [ $skipmode -gt 0 ]; then
	echo "$2"
	resp="$2"
    else 
	read resp
	test "_$resp" = '_' && resp="$2"
    fi
}

ask_yesno () {
    # purpose: Ask a yes/no question and read the response. Be anal about it
    #          It will always print an empty line before the message
    # paramtr: $1: message incuding the [y/n], [Y/n] or [y/N]
    #          opt. $2: a default value, if applicable, either 'y' or 'n'.
    # returns: $ok contains the entered value, guaranteed either 'y' or 'n'. 
    ok='@'
    while [ true ]; do
	echo
	echo -ne "$1"
	read resp

	if [ "_$resp" = '_' ]; then
	    # entered ENTER. Use default, if one is available
	    if [ "_$2" = '_' ]; then
		ok='@'
	    else
		ok="$2"
	    fi
	else
 	    # obtain first letter, and downcase
	    ok="`echo $resp | cut -c -1 | tr 'A-Z' 'a-z'`"
	fi

	if [ "$ok" = 'y' -o "$ok" = 'n' ]; then
	    break
	else
	    echo "$self: Illegal input \"$resp\""
	fi
    done
}

create_pegasus_var_dirs ()
{
    
    if ! test -d ~/.pegasus ; then
	mkdir ~/.pegasus
    fi
    
    nowtime=`date +%Y.%m%d.%I%M`
    
    if ! test -d ~/.pegasus/config."$nowtime" ; then
	mkdir ~/.pegasus/config."$nowtime"
    else
	echo Working
	sleep 60
	nowtime=`date +%Y.%m%d.%I%M`
	mkdir ~/.pegasus/config."$nowtime"
    fi
    
    echo "config.$nowtime"
}

createfn ()
{
    (
	echo -e "tut::echo\t/bin/echo\tINSTALLED INTEL32::LINUX\tnull"
	echo -e "unix::echo\t/bin/echo\tINSTALLED INTEL32::LINUX\tnull"
	echo -e "unix::grep\t/bin/grep\tINSTALLED INTEL32::LINUX\tnull"
	echo -e "unix::cat\t/bin/cat\tINSTALLED INTEL32::LINUX\tnull"
	echo -e "unix::sed\t/bin/sed\tINSTALLED INTEL32::LINUX\tnull"
	echo -e "unix::awk\t/usr/bin/awk\tINSTALLED INTEL32::LINUX\tnull"
	
    ) > $tmp2
}

#
# === main ======================================================
#

#
# check Java and Globus existence.
#
if [ "_$GLOBUS_LOCATION" = '_' ]; then
    echo "$self: Error: Your GLOBUS_LOCATION environment variable is not set."
    echo "Please set your GLOBUS_LOCATION environmental variable and please restart the $pegasushome/bin/pegasus-config script"
    echo
    echo "Exiting pegasus-config"
    exit 1
fi
if [ "_$JAVA_HOME" = '_' ]; then
    if [ "_$JDK_HOME" = '_' ]; then
	echo "$self: Error: Your JAVA_HOME environment variable is not set."
	echo "Please set your JAVA_HOME environmental variable and please restart the $pegasushome/bin/pegasus-config script"
	echo
	echo "Exiting pegasus-config"
	exit 1
    else
	echo "NOTICE: Setting JAVA_HOME to \$JDK_HOME. In the future, please set"
	echo "NOTICE: JAVA_HOME to $JDK_HOME"
	JAVA_HOME=$JDK_HOME
	export JAVA_HOME
    fi
fi

subdir=`create_pegasus_var_dirs`

#
# check that certain directories required for this script exist
#
for dir in "$PEGASUS_HOME" \
    "$PEGASUS_HOME/etc" \
    "$PEGASUS_HOME/share" \
    "$PEGASUS_HOME/sql" \
    "$PEGASUS_HOME/var" \
    "$JAVA_HOME/bin" \
    "$GLOBUS_LOCATION/lib"; do
    if [ ! -d "$dir" ]; then
	echo "$self: Error: Could not find dir $dir"
	echo "Please check that you have downloaded a valid pegasus release and restart the $pegasushome/bin/pegasus-config script"
	echo
	echo "Exiting pegasus-config"
	exit 1
    fi
done

#    "$PEGASUS_HOME/share/diamond.vdl.template" \


for reqfile in "$PEGASUS_HOME/share/mock-const.template" \
    "$PEGASUS_HOME/share/sites.txt.template" \
    "$PEGASUS_HOME/share/pegasusrc.template" \
    "$PEGASUS_HOME/share/helloworld.vdl.template" \
    "$PEGASUS_HOME/share/mock-const.template" \
    "$PEGASUS_HOME/share/tc.data.template"; do
  if [ ! -r "$reqfile" ]; then
      echo "$self: Error: Could not find the file $reqfile"
      echo "Please check that you have downloaded a valid pegasus release and restart the $pegasushome/bin/pegasus-config script"
      echo
      echo "Exiting pegasus-config"
      exit 1
  fi
done

#
# find latest .pegasusrc.vnnn version
#
if [ -f "$PEGASUS_HOME/share/.config-pegasus.options" ]; then
    # found - read it
    source "$PEGASUS_HOME/share/.config-pegasus.options"
else

    # not found - assume defaults
    dbhost="$dbhost"
    rls_uri="$rls_uri"
    worknode="$host"
    dbname="$dbname"
    dbuser="$dbuser"
    dbpass="$dbpass"
    dbtype='none'
    grid='osg'
fi
worksite=`echo $worknode | cut -d . -f 1`

#
# increase towards next version
#
thisversion=$nextversion
nextversion=`expr $nextversion + 1`
nvstr=000$nextversion
nextversion=`expr substr $nvstr \( length $nvstr - 2 \) 3`

#
# parse commandline options, long and short
#
OPTS=`getopt -l help,version,skip-question,shell-planner,concrete-planner -o hspSV -- "$@"`
test $? -ne 0 && my_usage 1
eval set -- "$OPTS"

debug=0
skipmode=0
shellplan=0
concreteplan=0

while true; do
    case "$1" in 
	--version|-V)
	    shift
	    echo "$0"
	    echo $scriptversion
	    exit 0
	    ;;
	--verbose|-v)
	    shift
	    debug=`expr $debug + 1`
	    ;;
	--help|-h)
	    shift
	    my_usage 0
	    ;;
	--skip-question|-s)
	    shift
	    skipmode=1
	    ;;
	--shell-planner|-S)
	    shift
	    shellplan=1
	    ;;
	--concrete-planner|-p)
	    shift
	    concreteplan=1
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    echo "$self: Error: Unknow argument \"$1\", see --help:"
	    my_usage 1
	    ;;
    esac
done

# say hello
echo
echo $scriptversion
echo

# set up ourselves to execute PEGASUS_HOME -- unless we are already set
if ! echo $CLASSPATH | tr ':' '\012' | grep $pegasushome >> /dev/null 2>&1; then
    test $debug -gt 0 && echo "$self: Setting up PEGASUS_HOME environment"
    unset CLASSPATH
    source $pegasushome/setup.sh
fi

ok=n
while [ \( _$ok != _y \) -a \( _$ok != _Y \) ]; do
    echo
    echo 'There are several database implementations to chose from'
    while true
      do
	show_enter ' (1) PostgreSQL\n (2) MySQL\nWhich type of database do you want to use' "$dbtype"
	dbtype=$resp
	ack=$resp
	
	if [ "$ack" == "1" -o "$ack" == "2" ] ; then
	    break
	fi

    done
    show_enter 'Enter database server hostname' "$dbhost"
    dbhost=$resp
    show_enter 'Enter the database name' "$dbname"
    dbname=$resp
    show_enter 'Enter the database username' "$dbuser"
    dbuser=$resp
    show_enter 'Enter the database passwd' "$dbpass"
    dbpass=$resp;

    ok=0
    while [ $ok -eq 0 ]; do
	show_enter 'Enter the RLS URI or fully qualified hostname' "$rls_uri"
	case "$resp" in
	    rlsn://*)
		rls_uri=$resp
		ok=1
		;;
	    rls://*)
		rls_uri=$resp
		ok=1
		;;
	    *.*.*|localhost)
		rls_uri="rls://$resp"
		ok=1
		;;
	    *)
		echo 
		echo "$self: \"$resp\" does not appear to be a valid RLS URI nor host"
		ok=0
		;;
	esac
    done

TABLE=(green grid3 isi osg osg-itb sofa)
    
while true
  do
  echo
  echo "The grids to choose from are"
  
  for index in 0 1 2 3 4 5   # Five lines.
    do
    echo ${TABLE[$index]}
  done
    
  echo
  show_enter 'Enter the grid to run on' "$grid"  
  grid=$resp
  
  for index in 0 1 2 3 4 5
    do
    if [ "${TABLE[$index]}" == "$grid" ] ; then
        echo $grid
        let test=1
        break
    fi
  done

  if [ "$test" == "1" ] ; then
      break
  fi

done

grid=$resp;

createfn $worknode #creates the fn file needs to map the tc.data TR info

pegasus-get-sites -t $home/.pegasus/$subdir/tc.data -s $home/.pegasus/$subdir/sites.txt --tc-style new --sc-style new --grid $grid -a $tmp2 -r $rls_uri >$tmp 2>&1
    
    echo
    echo "Here is the list of sites from the $grid"
    echo

while true
  do
  grep "pool" $HOME/.pegasus/$subdir/sites.txt | tr -d '{' | cut -c 6-
  show_enter 'Enter the site to run a Hello World job' "$worknode"
  worknode=$resp
  echo
  for site in `grep "pool" $HOME/.pegasus/$subdir/sites.txt | tr -d '{' | cut -c 6-`
    do
    if [ "$site" == "$resp" ] ; then
        let boolcheck=1
        break
    fi
  done

  if [ "$boolcheck" == "1" ] ; then
      break
  fi

done

    if [ "$dbtype" -eq 1 ]; then
	echo Database: PostgreSQL
    else
	echo Database: MySQL
    fi

    echo Database server hostname: $dbhost
    echo Database schema name: $dbname
    echo Database username: $dbuser
    echo Database password: $dbpass
    echo RLS contact URI: $rls_uri
    echo Grid: $grid
    echo Worker Node: $worknode
    echo PEGASUS_HOME: $pegasushome
    echo HOME: $home

    ask_yesno 'OK? [y/n] '
done
echo

#
# Save options for next time
#
if [ ! -f "$PEGASUS_HOME/share/.config-pegasus.options" ]; then
    touch "$PEGASUS_HOME/share/.config-pegasus.options"
    chmod 755 "$PEGASUS_HOME/share/.config-pegasus.options"
fi

(
    echo dbtype=$dbtype
    echo nextversion=$nextversion
    echo dbhost=$dbhost
    echo dbname=$dbname
    echo dbuser=$dbuser
    echo dbpass=$dbpass
    echo rls_uri=$rls_uri
    echo grid=$grid
    echo worknode=$worknode
) > $PEGASUS_HOME/share/.config-pegasus.options

# Assume db passed by user exists but is empty, and ready to initialize
# as a VDC. FIXME: test to ensure the given database is empty create the
# database if it does not exist
if [ "$dbtype" -eq 1 ]; then
    # 
    # Postgres
    #
    cmd="psql -h $dbhost -U $dbuser -d $dbname -t -A --field-separator=  "
    enter_pass=1
    show_tables="select tablename from pg_tables where tableowner='$dbuser'"
    new_schema='create-pg.sql'
    requiredSchemaSig="1.3,1.5,1.3,1.2,1"
    dbdriver=Postgres
    dbperl=Pg
    db_url="jdbc:postgresql://$dbhost/$dbname"
elif [ "$dbtype" -eq 2 ]; then
    # 
    # MySQL
    #
    cmd="mysql -h $dbhost -u $dbuser --password=$dbpass $dbname"
    cmd="$cmd --skip-column-names"
    enter_pass=0
    show_tables='show tables'
    new_schema='create-my.sql'
    requiredSchemaSig="1.3,1.5,1.3,1.2,1"
    dbdriver=MySQL
    dbperl=mysql
    db_url="jdbc:mysql://$dbhost/$dbname"
else
    echo "$self: Illegal database $dbtype"
    echo "The Virtual Data system is only compatible with MySQL and Postgre"
    echo "Please check your database and restart $pegasushome/bin/pegasus-config script"
    echo
    echo "Exiting pegasus-config"
    exit 1
fi

# 
# list all tables in databse
#
incr=0
while [ $incr -lt 3 ]; do
    test "$enter_pass" -eq 1 && \
	echo "Please re-enter your database password when prompted"
    cat <<EOF |
$show_tables
EOF
    $cmd > $tmp
    if [ $? -ne 0 ]; then
	echo
	echo "$self: Error connecting to database $dbname at $dbhost as $dbuser"
	echo "$self: Please try again"
	echo
	
	incr=`expr $incr + 1`
	if [ $incr -eq 3 ]; then
	    echo
	    echo 'Please confirm your database url, database login and password are valid before'
	    echo 'attempting to execute this script again'
	    echo
	    echo "This script can be found at $HOME/pegasus/bin/pegasus-config"
	    echo
	    echo "Exiting pegasus-config"
	    exit 2
	fi
    else
	break
    fi
done
unset incr

#
# determine, if the VDC is already installed
#
dbstate=bad
if grep 'pegasus_schema' $tmp >> /dev/null 2>&1; then
    dbstate=isvdc
elif [ ! -s $tmp ]; then
    dbstate=empty
elif grep -i 'no relations found' $tmp >> /dev/null 2>&1; then
    dbstate=empty
fi

# 
# if installed, check the version of the installed VDC schemata
#
echo
if [ $dbstate = bad ]; then
    echo "$self: Database has tables, but is not a VDC"
    echo "$self: Please update your tables with the appropriate sql script found in $PEGASUS_HOME/sql"
    exit 1
elif [ $dbstate = isvdc ]; then
    # 
    # obtain all schema version numbers in order
    #
    echo "Database holds an existing VDC - checking schema versions"

    incr=0
    while [ $incr -lt 3 ]; do
	test "$enter_pass" -eq 1 && \
	    echo "Please re-enter your database password when prompted"
	cat << "EOF" |
select 'vdc_version=',version from pegasus_schema where catalog='vdc';
select 'ptc_version=',version from pegasus_schema where catalog='ptc';
select 'tc_version=',version  from pegasus_schema where catalog='tc';
select 'rc_version=',version  from pegasus_schema where catalog='rc';
select 'wf_version=',version  from pegasus_schema where catalog='wf';
EOF
	$cmd | tr -d '\011' > $tmp
	if [ $? -ne 0 ]; then 
	    echo
	    echo "$self: Error connecting to database $dbname at $dbhost as $dbuser"
	    echo "$self: Please try again"
	    echo

	    incr=`expr $incr + 1`
	    if [ $incr -eq 3 ]; then
		echo
		echo 'Please confirm your database url, database login and password are valid'
		echo 'before attempting to execute this script again.'
		echo
		echo "This script can be found at $HOME/pegasus/bin/pegasus-config"
		echo
		echo "Exiting pegasus-config"
		exit 2
	    fi
	else
	    break
	fi
    done

    # show results - only in verbose mode
    if [ $debug -gt 0 ]; then
	echo 
	echo "Schema versions found:"
	cat $tmp
	echo
    fi

    # verify signature
    source $tmp
    vdcSchemaSig=$vdc_version,$ptc_version,$tc_version,$rc_version,$wf_version
    if [ $debug -gt 0 ]; then
	# show only if verbose mode
	echo "Detected signature: $vdcSchemaSig"
	echo "Required signature: $requiredSchemaSig"
    fi
    if [ $vdcSchemaSig = $requiredSchemaSig ]; then
	echo "$self: Schema versions verified - is acceptable"
    else
	echo "$self: Schema versions of supplied VDC is not acceptable for this PEGASUS_HOME version"
	echo
	echo "$self: Please update your VDC with the appropriate sql script found in $PEGASUS_HOME/sql"
	echo
	echo "Exiting pegasus-config"
	exit 1
    fi
elif [ $dbstate = empty ]; then
    # 
    # initialize new schema
    #
    echo "$self: Database is empty, will initialize."
    (
	cd "$PEGASUS_HOME/sql"
	$cmd < $new_schema >$tmp 2>&1
	if [ $? -eq 0 ]; then
	    echo "$self: Database $dbname successfully initialized."
	else
	    echo "$self: Warning: Database $dbname indicated errors: "
	    cat $tmp
	fi
    )
else
    echo "$self: Assertion failure: Illegal branch in code"
    echo
    echo "Exiting pegasus-config"
    exit 42
fi

#
# replace configuration and catalog files
#
echo 
echo "Substituting configuration files..."

new_version "$home/.pegasus/$subdir/pegasusrc" "$pegasushome/share/pegasusrc.template"
new_version "$home/.pegasus/$subdir/wfrc" "$pegasushome/share/wfrc.template" 
#new_version "$home/.pegasus/$subdir/site.select" "$pegasushome/share/site.select.template"
new_version "$home/.pegasus/$subdir/site.select" "$pegasushome/share/mock-const.template"
chmod 0755 "$home/.pegasus/$subdir/site.select"
#new_version "$home/.pegasus/$subdir/sites.txt" "$pegasushome/share/sites.txt.template" #no longer needed since using pegasus-get-sites
#new_version "$home/.pegasus/$subdir/tc.data"   "$pegasushome/share/tc.data.template" #no longer needed since using pegasus-get-sites
new_version "$home/.pegasus/$subdir/helloworld.vdl" "$pegasushome/share/helloworld.vdl.template"
new_version "$home/.pegasus/$subdir/diamond.vdl" "$pegasushome/share/diamond.vdl.template"

preserve_dst $home/.wfrc
preserve_dst $home/.pegasusrc

CheckCurrentLink

ln -s "$home/.pegasus/$subdir" "$home/.pegasus/current" 
ln -s "$home/.pegasus/current/pegasusrc" "$home/.pegasusrc" 
ln -s "$home/.pegasus/current/wfrc" "$home/.wfrc"

echo "Done substituting configuration files"

#
# Check, if PATH and vdlc are properly setup
#
echo 
if echo $PATH | tr ':' '\012' | grep "^$pegasushome" >> /dev/null 2>&1; then
    echo 'Attempting to generate an abstract plan'
    vdlc --dv $user::hello --label $self \
    --output $home/.pegasus/$subdir/helloworld.dax \
    $home/.pegasus/$subdir/helloworld.vdl > $tmp 2>&1
    if [ $? -eq 0 ]; then

	echo " $home/.pegasus/$subdir/helloworld.dax"
	echo "Successful abstract planning"
	echo
    else
	echo "$self: There were problem running the abstract planner:"
	cat $tmp
	echo
	echo "Exiting pegasus-config"
	exit 1
    fi

    vdlc --label $self  $home/.pegasus/$subdir/diamond.vdl -o $home/.pegasus/$subdir/diamond.dax > $tmp 2>&1
    if [ $? -eq 0 ]; then
	echo " $home/.pegasus/$subdir/diamond.dax"
	echo "Successful abstract planning"
    else
	echo "$self: There were problem running the abstract planner:"
	cat $tmp
	echo
	echo "Exiting pegasus-config"
	exit 1
    fi

    echo 
    echo 'Converting multi-line site catalog into XML format'
    genpoolconfig --poolconfig "$HOME/.pegasus/$subdir/sites.txt" --output "$HOME/.pegasus/$subdir/sites.xml" #> $tmp 2>&1
    if [ $? -eq 0 ]; then 
	preserve_dst "$HOME/$subdir/sites.xml"
	echo "Successful conversion"
    else
	echo "$self: There was a problem running genpoolconfig:"
	cat $tmp
	echo
	echo "Exiting pegasus-config"
	exit 1
    fi

    if [ $shellplan -gt 0 ]; then
	echo 
	echo 'Attempting to run the shell planner on abstract plan'
	dir=`mktemp -d /tmp/shplan-XXXXXX`
	oldtc="$dir/tc.data"
	echo -e "local\ttut::echo\t/bin/echo\tnull" > $oldtc
	oldrc="$dir/rc.data"
	touch $oldrc
	shplanner -Dpegasus.db.tc=$oldtc -Dpegasus.db.rc=$oldrc -o $dir -b \
	    $pegasushome/examples/vdl/helloworld/helloworld.dax > $tmp 2>&1
	if [ $? -eq 0 ]; then
	    echo " $dir/$self.sh"
	    echo "Successfully planned with shell planner"
	    echo
	    echo "Attempting to run shell plan..."
	    ( cd $dir && ./$self.sh ) > $tmp 2>&1
	    if [ $? -eq 0 ]; then
		echo "Output from running the shell plan:"
		sed -e 's/^/>> /' $dir/$user.hw.txt
		echo "Successfully ran shell plan"
	    else 
		echo "$self: Problems running shell plan:"
		cat $dir/$self.log
		echo
		cat $tmp
		echo
		echo "Exiting pegasus-config"
		exit 1
	    fi
	    rm -rf $dir
	else
	    echo "$self: There was a problem running shplanner:"
	    cat $tmp
	    echo
	    echo "Exiting pegasus-config"
	    exit 1
	fi
    fi

    #
    # Pegasus all-local run 
    # 
    if [ $concreteplan -gt 0 ]; then
	echo 
	echo 'Attempting to run the concrete planner on abstract plan'
	dir=`mktemp -d /tmp/cplan-XXXXXX`
	gencdag -d $pegasushome/examples/vdl/helloworld/helloworld.dax \
                -p local -o local -f -D $dir > $tmp 2>&1
	if [ $? -eq 0 ]; then
	    test $debug -gt 1 && sed -e 's/^/peg> /' $tmp
	    echo "Successfully planned with concrete planner"
	    echo
	    # 
            # Submitting the dags to condor for local run. The workflow
	    # label is "$self" in this case. 
            #
	    echo "Attempting to execute concrete plan..."
	    ( cd $dir && pegasus-submit-dag "$self-0.dag" ) > $tmp 2>&1

	    #
	    # Check if submission to condor was ok
	    #
	    if [ $? -eq 0 ]; then
		# if submit was successful, don't make a fuss
		echo "Successfully submitted concrete plan"
		#
		# Check if the run is successful
		#
		# do a while loop on dagman.out and check for 
		# "All jobs Completed!" or Aborting DAG... 
	    else 
		echo "$self: Problems submitting concrete plan to Condor:"
		echo 
		cat $tmp
		echo
		echo "Exiting pegasus-config"
		exit 1
	    fi
	else
	    echo "$self: There was a problem running concrete planner:"
	    cat $tmp
	    echo
	    echo "Exiting pegasus-config"
	    exit 1
	fi
	rm -rf $dir
    fi

else 
    echo "$self: Your \$PATH variable is not set up. Most likely, the "
    echo "$pegasushome/set-user-env script was not sourced yet."
    echo
    echo "Exiting pegasus-config"
    exit 1;
fi
rm $tmp
rm $tmp2

# 
# login shell setup
#
# Check to see if the setup already exists in the login script
	   
CheckSetup

# 
# some more tests (test0)
#
ask_yesno "Do you want to test your PEGASUS configuration?\nWarning: The testing can take as long as 30 minutes to complete [y/n] "
test "$ok" = "y" && $PEGASUS_HOME/test/test0/pegasus-test.pl

# 
# over and out
#
echo 
echo 'Configuration of the PEGASUS is complete'
echo
echo 'Completed succesfully'
echo
echo "Exiting pegasus-config"
exit 0
