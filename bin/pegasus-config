#!/usr/bin/env perl
#
# prototype for a tool like pkg-config that tells us all kinds of
# interesting things about Pegasus. This is mainly destined to be
# used inside scripts to determine various configuration options,
# locations and directories. 
#
# $Id$
#
use 5.006;
use strict;
use Cwd; 
use File::Spec;
use File::Basename;
use Getopt::Long qw(:config bundling no_ignore_case);
use POSIX (); 
use Sys::Hostname; 

# take a stab at guessing our PEGASUS_HOME, assuming 'bin' installation
BEGIN { 
    $main::home = $ENV{'PEGASUS_HOME'} = dirname(Cwd::abs_path(dirname($0)));
    die( "FATAL: Unable to determine where Pegasus resides.\n" )
	unless -d $main::home; 
}

use lib File::Spec->catdir( $main::home, 'lib', 'perl' );
use Work::Common; 

my $tmpdir = $ENV{'MY_TMP'} ||	# MY_TMP to override standard settings
    $ENV{TMP} ||                # standard
    $ENV{TEMP} ||               # windows standard
    $ENV{TMPDIR} ||             # also somewhat used
    File::Spec->tmpdir() ||     # OK, this gets used if all above fail
    ( -d '/scratch' ? '/scratch' : '/tmp' ); # last resort
my $userdir = $ENV{HOME} || (getpwuid($>))[7] || $tmpdir; # user $HOME

sub usage {
    my $app = basename($0); 
    print << "EOF";
Usage: $app [argument]

This is NOT an application to configure Pegasus, but an application
to query the current Pegasus installation.

Arguments:
 -h|--help        print this help and exit.
 -V|--version     print Pegasus version information and exit. 
 --home           print directory of Pegasus installation, 
                  formerly known as PEGASUS_HOME location. 
 --jar            tries to determine the pegasus.jar location. 
 -c|--classpath   TBD
 --java           TBD
 --perl           print the directory to include into your PERL5LIB.
 --python         print the directory to include into your PYTHONLIB.
 --local-site [d] create a site catalog entry for site "local". This is only
                  an XML snippet without root element nor XML headers. The
		  optional argument "d" points to the mount point to use.
                  If not specified, defaults to the user\'s \$HOME directory.
 --full-local [d] create a complete site catalog with only site "local". The
                  an XML snippet without root element nor XML headers. The
		  optional argument "d" points to the mount point to use.
                  If not specified, defaults to the user\'s \$HOME directory.

EOF
    exit 1;
}

sub site_snippet($) {
    my $home = shift;
    my @u = POSIX::uname(); 

    # check for presence of Globus
    my $g_l = $ENV{'GLOBUS_LOCATION'};
    unless ( defined $g_l ) { 
	my $gr = find_exec( 'globusrun' ); 
	if ( defined $gr && -x $gr ) { 
	    # OK, so we got Globus. Guess the globus location
	    $g_l = dirname( Cwd::abs_path(dirname($gr)) ); 
	}
	undef $g_l unless -d $g_l; 
    }

    print "  <!-- site: local -->\n";
    print "  <site handle=\"local\" arch=\"", lc($u[4]), "\" os=\"", uc($u[0]), "\">\n";

    # so we got Globus installed. Let's check, if there are any
    # services associated with this Globus on this site
    if ( defined $g_l ) { 
	my $g_v = `globus-version`; 
	chomp($g_v); 
	my @g_v = split /\./, $g_v; 
	my $type = $g_v[0] >= 5 ? 'gt5' : 'gt2'; 

	my $dir = File::Spec->catdir( $g_l, 'etc', 'grid-services' ); 
	my $glob = File::Spec->catfile( $dir, 'jobmanager-*' ); 
	my $fqdn = Sys::Hostname::hostname(); 
	foreach my $jm ( CORE::glob($glob) ) {
	    if ( open( J, "<$jm" ) ) {
		my %grmblftz = ( 'fork' => 'Fork',
				 'condor' => 'Condor',
				 'pbs' => 'PBS',
				 'lsf' => 'LSF' ); 
		chomp( $_ = <J> );
		close J; 
		my $basejm = basename($jm); 
		my $jobtype = ( $jm =~ /-fork$/ ? 'auxillary' : 'compute' ); 
		if ( /-type (\S+)/ ) { 
		    my $t = lc($1); 
		    print( '    <grid type="', $type, 
			   '" contact="', $fqdn, '/', $basejm, 
			   '" scheduler="', ( $grmblftz{$t} || ucfirst($t) ), 
			   '" jobtype="', $jobtype, "\" />\n" ); 
		}
	    }
	}
    }

    print "    <head-fs>\n";
    print "      <scratch>\n";
    print "\t<shared>\n"; 
    print "\t  <file-server protocol=\"file\" url=\"file://\" mount-point=\"$home\" />\n";
    print "\t  <internal-mount-point mount-point=\"$home\" />\n";
    print "\t</shared>\n"; 
    print "      </scratch>\n"; 
    print "      <storage>\n";
    print "\t<shared>\n";
    print "\t  <file-server protocol=\"file\" url=\"file://\" mount-point=\"$home\" />\n";
    print "\t  <internal-mount-point mount-point=\"$home\" />\n";
    print "\t</shared>\n";
    print "      </storage>\n";
    print "    </head-fs>\n"; 
    print "    <replica-catalog type=\"LRC\" url=\"dummyValue.url.edu\" />\n";
    print "    <profile namespace=\"env\" key=\"PEGASUS_HOME\">$main::home</profile>\n"; 
    print "    <profile namespace=\"env\" key=\"HOME\">$userdir</profile>\n"; 
    if ( defined $g_l ) {
	print "    <profile namespace=\"env\" key=\"GLOBUS_LOCATION\">$g_l</profile>\n"; 
    }
    print "  </site>\n";
}

# Parse command-line options.
usage() unless @ARGV;
GetOptions( "help|h" => \&usage
	  , 'version|V' => sub {
	      my $p_v= File::Spec->catfile( $main::home, 
					    'bin', 
					    'pegasus-version' ); 
	      exec { $p_v } ($p_v); 
	  }
	  , 'home' => sub {
	      print "$main::home\n"; 
	      exit 0; 
	  }
	  , 'java' => sub {
	      die "to be done";
	  }
	  , 'classpath|c' => sub {
	      die "to be done";
	  }
	  , 'jar' => sub {
	      my $p = File::Spec->catfile( $main::home,
					   'lib',
					   'pegasus.jar' ); 
	      if ( ! -r $p ) { 
		  # try development version locations
		  my $a = File::Spec->catfile( $main::home, 
					       'build', 'classes' ); 
		  if ( -d $a ) {
		      $p = $a;
		  } else {
		      die( "FATAL: Unable to locate pegasus.jar\n" );
		  }
	      }

	      print "$p\n";
	      exit 0;
	  }
	  , 'perl' => sub {
	      my $p = File::Spec->catfile( $main::home,
					   'lib',
					   'perl' ); 
	      die( "FATAL: Unable to locate PERL5LIB path\n" )
		  unless -d $p; 
	      print "$p\n";
	      exit 0;
	  }
	  , 'python' => sub {
	      my $p = File::Spec->catfile( $main::home,
					   'lib',
					   'python' ); 
	      die( "FATAL: Unable to locate PYTHONLIB path\n" )
		  unless -d $p; 
	      print "$p\n"; 
	      exit 0; 
	  }
	  , 'local-site:s' => sub {
	      site_snippet( ($_[1] || $userdir) ); 
	      exit 0; 
	  }
	  , 'full-local:s' => sub {
	      print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
	      print '<!-- generated: ', isodate, " -->\n"; 
	      print( '<sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"',
		     ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"',
		     ' xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog',
		     ' http://pegasus.isi.edu/schema/sc-3.0.xsd" version="3.0">', "\n" ); 
	      site_snippet( ($_[1] || $userdir) ); 
	      print "</sitecatalog>\n";
	      exit 0;
	  }
	  );
usage(); 
