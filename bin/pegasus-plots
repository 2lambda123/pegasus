#!/usr/bin/env python

import os
import re
import sys
import logging
import optparse
import math
import tempfile
import commands
import shutil

# Initialize logging object
logger = logging.getLogger()
# Set default level to INFO
logger.setLevel(logging.INFO)


import common
from Pegasus.plots_stats import utils as plot_utils
from Pegasus.plots_stats.plots import populate
from Pegasus.plots_stats.plots import pegasus_gantt
from Pegasus.plots_stats.plots import pegasus_host_over_time
from Pegasus.tools import utils

from netlogger.analysis.workflow.stampede_statistics import StampedeStatistics
#from netlogger.analysis.workflow.sql_alchemy import *
from datetime import timedelta

#regular expressions
re_parse_property = re.compile(r'([^:= \t]+)\s*[:=]?\s*(.*)')

#Global variables----
prog_base = os.path.split(sys.argv[0])[1]	# Name of this program
NEW_LINE_STR ="\n"
MAX_GRAPH_NODES = 100
calc_dax_graph = False
calc_dag_graph = False
calc_gantt_chart = False
calc_host_chart = False
max_graph_nodes = MAX_GRAPH_NODES
DEFAULT_OUTPUT_DIR = "plots"
	
def setup_logger(level_str):
	level_str = level_str.lower()
	if level_str == "debug":
		logger.setLevel(logging.DEBUG)
	if level_str == "warning":
		logger.setLevel(logging.WARNING)
	if level_str == "error":
		logger.setLevel(logging.ERROR)
	if level_str == "info":
		logger.setLevel(logging.INFO)
	populate.setup_logger(level_str)
	return

def setup(output_dir):
	src_img_path = os.path.join(common.pegasus_home, "share/plots/images/common/")
	dest_img_path = os.path.join(output_dir, "images/")
	if os.path.isdir(dest_img_path):
		logger.warning("Image directory exists. Deleting... " + dest_img_path)
		try:
			shutil.rmtree(dest_img_path)
		except:
			logger.error("Unable to remove image directory."+dest_img_path)
			sys.exit(1) 	 	
	shutil.copytree (src_img_path, dest_img_path)	

def generate_dag_graph(wf_info, output_dir):
	logger.info("Generating dag graph for  workflow "  + wf_info.wf_uuid)
	dag_file_path = wf_info.dag_file_path
	if dag_file_path is not None:
		dag2dot_file_path = os.path.join(common.pegasus_home, "libexec/visualize/dag2dot")
		dot_file_path = os.path.join(output_dir, wf_info.wf_uuid+".dot")
		dag_cmd = dag2dot_file_path 
		dag_cmd +=" --output "+ dot_file_path
		dag_cmd += " "+ dag_file_path
		logger.info("Executing command :\n"  + dag_cmd)
		status, output = commands.getstatusoutput(dag_cmd)
		if status == 0:
			logger.info("Finished executing command." )
		else:
			logger.warn("Failed to generate dag graph for workflow "+ wf_info.wf_uuid)
			logger.debug("%s: %d:%s" % (dag_cmd, status, output))
			return None
		png_file_path = os.path.join(output_dir, wf_info.wf_uuid+".png")
		dot_png_cmd = utils.find_exec("dot")
		if dot_png_cmd is None:
			logger.warn("dot is not present . Unable to create chart in png format. ")
			return None
		dot_png_cmd +=" -Tpng -o" + png_file_path
		dot_png_cmd += " "+ dot_file_path
		logger.info("Executing command :\n"  + dot_png_cmd)
		status, output = commands.getstatusoutput(dot_png_cmd)
		if status == 0:
			logger.info("Finished executing command." )
			return status
		else:
			logger.warn("%s: %d:%s" % (dot_png_cmd, status, output))
	else:
		logger.warn("Unable to find the dag file for workflow  " + wf_info.wf_uuid)
	return None
	
	
def generate_dax_graph(wf_info, output_dir):
	logger.info("Generating dax graph for  workflow "  + wf_info.wf_uuid)
	dax_file_path = wf_info.dax_file_path
	if dax_file_path is not None:
		dax2dot_file_path = os.path.join(common.pegasus_home, "libexec/visualize/dax2dot")
		dot_file_path = os.path.join(output_dir, wf_info.wf_uuid + ".dot")
		dax_cmd = dax2dot_file_path 
		dax_cmd +=" --output "+ dot_file_path
		dax_cmd += " "+ dax_file_path
		logger.info("Executing command :\n"  + dax_cmd)
		status, output = commands.getstatusoutput(dax_cmd)
		if status == 0:
			logger.info("Finished executing command." )
		else:
			logger.warn("Failed to generate dax graph for workflow "+ wf_info.wf_uuid)
			logger.debug("%s: %d:%s" % (dax_cmd, status, output))
			return None
		# Find dot command
		dot_png_cmd = utils.find_exec("dot")
		if dot_png_cmd is None:
			logger.warn("dot is not present . Unable to create chart in png format. ")
			return None
		png_file_path = os.path.join(output_dir, wf_info.wf_uuid +".png")
		dot_png_cmd +=" -Tpng -o" + png_file_path
		dot_png_cmd += " "+ dot_file_path
		logger.info("Executing command :\n"  + dot_png_cmd)
		status, output = commands.getstatusoutput(dot_png_cmd)
		if status == 0:
			logger.info("Finished executing command." )
			return status
		else:
			logger.warn("Failed to generate dax graph in png format for workflow " + wf_info.wf_uuid)
			logger.debug("%s: %d:%s" % (dot_png_cmd, status, output))
	else:
		logger.warn("Unable to find the dax file for workflow " + wf_info.wf_uuid)
	return None
	
	
def create_image_gallery(file_name ,wf_uuid_list , wf_parent_uuid_list, uuid_image_map,wf_uuid_label_map , isDax):
	wf_uuid_parent_ref = None
	try:
		fh = open(file_name, "w")
		content = """
<html>
<head>
<style>
.imgbox
{
float:left;
text-align:center;
width:450px;
height:450px;
margin:4px;
margin-bottom:8px;
padding:0px;
}
.thumbnail
{
width:300px;
height:300px;
margin:3px;
}
.box
{
width:450px;
padding:0px;
}
.workflow
{
clear:both;
}
</style>
</head>
<body>
<center>
"""
		if isDax:
			content += "<h3>DAX Graph </h3>" + NEW_LINE_STR
		else:
			content += "<h3>DAG Graph </h3>"+ NEW_LINE_STR
		for index in range(len(wf_uuid_list)):
			uuid = wf_uuid_list[index]
			image = uuid_image_map[index]
			label = wf_uuid_label_map[index]
			parent_uuid =wf_parent_uuid_list[index]
			if parent_uuid is None:
				content += "<h3 class= 'workflow'> Top level workflow ("+ uuid+")</h3>"
			else:
				if parent_uuid != wf_uuid_parent_ref:
					wf_uuid_parent_ref = parent_uuid 
					content += "<h3 class= 'workflow'> Sub  workflow's of workflow (" +  parent_uuid + ")</h3>"
			content += "<div  class ='imgbox' >"
			if image is None:
				content += "<a class= 'thumbnail' href ='#'>\n"
				content +="<img src ='images/not_available.jpg' height='300px' width='300px'>\n"
				content +="</img>\n</a>"
				content+="<div class ='box'>\n"
				content+= "wf_uuid :" + uuid +"<br/>"
				if isDax:
					content+= "dax label :" + label
				else:
					if image is not None:
						content+= "dag label :" + image
				content +="</div>"					
			else:
				content +="<a class= 'thumbnail'  href ='"+image+ "'>"
				content +="<img src ='"+image+ "' height='300px' width='300px'>"
				content +="</img>\n</a>\n"
				content+="<div class ='box'>\n"
				content+= "wf_uuid :" + uuid +"<br/>"
				if isDax:
					content+= "dax label :" +label
				else:
					if label is not None:
						content+= "dag label :" + label
				content +="</div>"
			content += "</div>"
		content +="""
</center>
</body>
</html>
"""
		fh.write( content)
	except IOError:
		logger.error("Unable to write to file " + data_file)
		sys.exit(1)
	else:
		fh.close()	
	
		



def createOuterhtml(wf_info, wf_uuid , output_dir ):
	data_file = os.path.join(output_dir,  "index.html")
	gantt_chart_parent_file = os.path.join("gantt_chart/" + wf_uuid +".html")
	dag_graph_parent_file = os.path.join("dag_graph/" + wf_uuid +".html")
	dax_graph_parent_file = os.path.join("dax_graph/" + wf_uuid +".html")
	host_chart_parent_file = os.path.join("host_chart/" + wf_uuid +".html")
	try:
		fh = open(data_file, "w")
		content = """
<html>
<head>
</head>
<body>
<center>
<h3>Pegasus plots </h3>
"""
		if calc_gantt_chart :
			content += "<a href ='" + gantt_chart_parent_file +  "'>Workflow Execution Gantt Chart</a><br/>" + NEW_LINE_STR
		if calc_host_chart :
			content += "<a href ='" + host_chart_parent_file + "'>Host Over Time Chart</a><br/>" + NEW_LINE_STR
		if calc_dax_graph :
			content += "<a href ='" + dax_graph_parent_file +  "'>DAX graph</a><br/>" + NEW_LINE_STR
		if calc_dag_graph :
			content += "<a href ='" + dag_graph_parent_file + "'>DAG graph</a><br/><br/><br/> " + NEW_LINE_STR
		content += plot_utils.print_property_table(wf_info.wf_env , False ,":")
		content += "</center>" + NEW_LINE_STR + "</body>" + NEW_LINE_STR +"</html>" + NEW_LINE_STR
		fh.write( content)
		print "Graphs and charts generated by pegasus-plots can be viewed by opening the generated html file in the web browser  : \n" + data_file
	except IOError:
		logger.error("Unable to write to file " + data_file)
		sys.exit(1)
	else:
		fh.close()
		
def create_charts(submit_dir , output_dir, config_properties , log_level ):
	wf_uuid_dax_image =[]
	wf_uuid_dax_label =[]
	wf_uuid_dag_image =[]
	wf_uuid_dag_label =[]
	wf_uuid_parent =[]
	populate.setup(submit_dir , config_properties)
	wf_uuid_list = populate.get_workflows_uuid()
	if len(wf_uuid_list) == 0:
		logger.error("Unable to populate workflow information.")
	if calc_gantt_chart :
		gantt_chart_output_dir = os.path.join(output_dir,"gantt_chart")
		pegasus_gantt.setup(submit_dir,gantt_chart_output_dir ,log_level)
	if calc_host_chart :
		host_chart_output_dir = os.path.join(output_dir,"host_chart")
		pegasus_host_over_time.setup(submit_dir,host_chart_output_dir ,log_level)
	if calc_dag_graph :
		dag_graph_output_dir = os.path.join(output_dir,"dag_graph")
		setup(dag_graph_output_dir)
	if calc_dax_graph :
		dax_graph_output_dir = os.path.join(output_dir,"dax_graph")
		setup(dax_graph_output_dir)
	root_wf_info = None
	for wf_uuid in wf_uuid_list:
		wf_info = populate.populate_chart(wf_uuid)
		if root_wf_info is None:
			root_wf_info = wf_info
		wf_uuid_parent.append(wf_info.parent_wf_uuid)
		if calc_gantt_chart :
			pegasus_gantt.generate_chart(wf_info)
		if calc_host_chart :
			pegasus_host_over_time.generate_chart(wf_info)
		if calc_dag_graph :
			if wf_info.total_jobs <= max_graph_nodes:
				if generate_dag_graph(wf_info,dag_graph_output_dir) is None:
					wf_uuid_dag_image.append(None)
				else:
					wf_uuid_dag_image.append(wf_info.wf_uuid+".png")
			else:
				wf_uuid_dag_image.append(None)
				logger.info("Dag graph for workflow '" + wf_uuid + "'  was not created because number of jobs is more than the maximum graph node generation limit ")
			wf_uuid_dag_label.append( wf_info.dag_label)
		if calc_dax_graph :
			if wf_info.total_tasks <= max_graph_nodes:
				if generate_dax_graph(wf_info,dax_graph_output_dir) is None:
					wf_uuid_dax_image.append(None)
				else:
					wf_uuid_dax_image.append(wf_info.wf_uuid+".png")
			else:
				wf_uuid_dax_image.append(None)
				logger.info("Dax graph for workflow '" + wf_uuid +"' was not created because number of tasks is more than the maximum  graph node generation limit ")
			wf_uuid_dax_label.append(wf_info.dax_label)
	if calc_dax_graph :
		data_file =  os.path.join(dax_graph_output_dir,wf_uuid_list[0]+".html")
		create_image_gallery(data_file, wf_uuid_list,wf_uuid_parent, wf_uuid_dax_image ,wf_uuid_dax_label, True )
	if calc_dag_graph :
		data_file =  os.path.join(dag_graph_output_dir,wf_uuid_list[0]+".html")
		create_image_gallery(data_file, wf_uuid_list,wf_uuid_parent, wf_uuid_dag_image ,wf_uuid_dag_label, False )
	createOuterhtml(wf_info, wf_uuid_list[0] , output_dir  )
	return
	
"""
Sets the plotting level 
@param plot_level
"""
def set_plotting_level(plots_level):
	global calc_dax_graph
	global calc_dag_graph
	global calc_gantt_chart
	global calc_host_chart
	if plots_level =='all':
		calc_dax_graph = True
		calc_dag_graph = True
		calc_gantt_chart = True
		calc_host_chart = True
	elif plots_level =='all_charts':
		calc_gantt_chart = True
		calc_host_chart = True
	elif plots_level =='all_graphs':
		calc_dax_graph = True
		calc_dag_graph = True
	elif plots_level == 'dax_graph':
		calc_dax_graph = True
	elif plots_level == 'dag_graph':
		calc_dag_graph = True
	elif plots_level == 'gantt_chart':
		calc_gantt_chart = True
	else:
		calc_host_chart = True	
	
	

# ---------main----------------------------------------------------------------------------
def main():
	# Configure command line option parser
	prog_usage = prog_base +" [options] SUBMIT DIRECTORY" 
	parser = optparse.OptionParser(usage=prog_usage)
	parser.add_option("-o", "--output", action = "store", dest = "output_dir",
			help = "writes the output to given directory.")
	parser.add_option("-c","--conf", action = "store", type = "string", dest = "config_properties",
			  help = "specifies the properties file to use. This option overrides all other property files.")
	parser.add_option("-m", "--max_graph_nodes", action = "store", type = "int", dest = "max_graph_nodes",
		  help = "Maximum limit on the number of tasks/jobs in the dax/dag upto which the graph should be generated; Default value is 100")
	parser.add_option("-p", "--plottinglevel", action = "store", dest = "plotting_level",
			choices=['all', 'all_charts', 'all_graphs' ,'dax_graph', 'dag_graph','gantt_chart','host_chart' ],
			help = "specifies the chart and graphs to generate. Valid levels are: all,all_charts, all_graphs, dax_graph,dag_graph,gantt_chart,host_chart; Default is all_charts.")
	parser.add_option("-l", "--loglevel", action = "store", dest = "log_level",
			choices=['debug', 'info', 'warning' ,'error'],
			help = "Log level. Valid levels are: debug,info,warning,error; Default is info.")
	# Parse command line options
	(options, args) = parser.parse_args()
	
	logger.info(prog_base +" : initializing...")
	if len(args) < 1:
		parser.error("Please specify Submit Directory")
		sys.exit(1)
	
	if len(args) > 1:
		parser.error("Invalid argument")
		sys.exit(1) 
	
	submit_dir = os.path.abspath(args[0])
	# Copy options from the command line parser
	if options.plotting_level is not None:
		 plotting_level = options.plotting_level
	else:
		plotting_level =  'all_charts'
	set_plotting_level(plotting_level)
		
	if options.output_dir is not None:
		output_dir = options.output_dir
	else :
		output_dir = os.path.join(submit_dir, DEFAULT_OUTPUT_DIR)
	plot_utils.create_directory(output_dir, True)
	if options.log_level is None:
		options.log_level = "info"
	if options.max_graph_nodes is not None:
		global max_graph_nodes
		max_graph_nodes = options.max_graph_nodes
	setup_logger(options.log_level)
	create_charts(submit_dir, output_dir,options.config_properties, options.log_level)
	
	sys.exit(0)
	
	

if __name__ == '__main__':
	main()
