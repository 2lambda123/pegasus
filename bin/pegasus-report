#!/usr/bin/env perl

my $version = '$Revision$';      # don't edit, automatically updated by CVS

use File::Find;
use XML::Simple;
use File::Basename;
use Cwd;
use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);

my $dagFileDir = '';
my @debugDirs;
my $filePath = '';
my $cutPath = '';
my @errors;  #array of errors from the errors.txt file or the equivalent
my @ignoredErrors; #array of errors that we are not interested in
my %masterHash; #hash table that is printed in the end
my $outputFile;
my @filesToIgnore; #files that should be ignored
my $errorfile;
my $errorlines=0; #number of lines the user wants to include before and after the error
my $tflag;
my $idflag;

sub version();
sub usage(;$);

GetOptions('help|h' => \&usage,
	   'version|V' => \&version,
	   'output|o:s' => \$outputFile,
	   'dagfilepath|d=s' => \$dagFileDir,
	   'errorfile|e:s' => \$errorfile,
	   'lines|l:i' => \$errorlines,
	   'time|t'=>\$tflag,
	   'id|i'=>\$idflag
	   );

if ($tflag && $idflag)
{
    print "The time and id flag cannot be simultaneously used\n";
    usage();
}

if (!$dagFileDir){usage()};

if (!$outputFile){ $outputFile=''};

if (!$errorfile)
{
    my $envpath = $ENV{"PEGASUS_HOME"};
    if (! -e "$envpath/share/errors.txt"){
	print "\nThe default errors.txt could not be found at $envpath/share/errors.txt \n";
	usage();
    }
    else{
	$errorfile="$envpath/share/errors.txt"
    }
}

if ($errorlines){
 if ($errorlines !~ m/\d+/){ 
     print "The argument to -l must be an integer\n";
     usage();
 }
}

sub usage(;$){
print << "EOF";

Usage: ./pegasus-report [-d path/to/dir] [...]

Generic options:

-o|--output        Name of the file that will contain the output of the search
-e|--errorfile     Path to the file that contains the list of errors.  The default is PEGASUS_HOME/share/errors.txt
-l|--lines         Number of lines from the searched file to include before and after the error
-t|--time          Sort output by time
-i|--id            Sort output by jobid

Mandatory argument(s):
-d|--dagfilepath   Path to the directory that contains the .dag file

EOF
exit 0;
}

sub version(){
    print "Vds-report version $version\n";
    exit 0;
}

sub ReadLogFiles($){
    my $dagDir = shift || die "no dagDir\n";
    
    my @dagLogs = glob("$dagDir/*.log");
    
    foreach my $logFile (@dagLogs){
	#Does the file exist?
	if (-e $logFile 
	    && (basename $logFile) ne "jobstate.log" 
	    && (basename $logFile) ne "monitord.log" )
	{
	    MatchPatterns(\@errors, \@ignoredErrors, \$logFile);
	}
    }    
}

sub RemoveFilesToIgnore()
{
    foreach my $ddrs (@debugDirs)
    {
	foreach my $fti (@filesToIgnore)
	{
	    if (scalar(@debugDirs) > 0)
	    {
		while (index ($ddrs,$fti) >= 0 )
		{
		    $ddrs = pop @debugDirs;
		    if (scalar(@debugDirs) <= 0)
		    { last; }
		}
	    }
	}
    }    
}

sub LineFormat( $ )
{
    my $line = shift || die "no number";

    if ($line < 10){
	$line = "   $line";
    }
    elsif ($line < 100){
	$line = "  $line";
    }
    elsif ($line < 1000){
	$line = " $line";
    }

    return $line;
}

sub MatchLines( $$ )
{
    my $dagLogPath = shift || die "no dag path\n"; 
    my $patternArr = shift || die "pattern array\n";
    my @errorList;
    my $bool = 0;
    my $i = 0;

    open (FILEPATH, "${$dagLogPath}");
    while (<FILEPATH>){
	$i++;
	if ($_ =~ @{$patternArr}[0])
	{ $bool = 1; }
	elsif ($_ =~ @{$patternArr}[1])
	{ $bool = 0; }

	if ($bool == 1)
	{ push(@errorList, LineFormat($i) . " - " . $_); }
    }   
    close (FILEPATH);

    $masterHash{ ${$dagLogPath} } = [ @errorList ]; 
}

sub ReadIDOutFiles()
{
    my @errorList;
    my $xmlfile='';
        
    foreach my $outfile (@debugDirs)
    {
       	if ($outfile =~ m/.out/ && ! -z $outfile)
	{  
	    my $xs1 = XML::Simple->new();
	    my $switch=0;
	    
	    open INFILE, "$outfile";	    
	    while (<INFILE>)
	    {
		if ($_ =~ m/^<\?xml/)
		{ $switch++; }
		
		if ($_ =~ m/<\/invocation>/){
		    $xmlfile .= $_;
		    $switch--;
		}
		
		if ($switch == 1 )
		{ $xmlfile .= $_; }
	    }
	    close INFILE;		
	    
	    if ( $xmlfile ne '' ){
		my $doc = $xs1->XMLin($xmlfile);		
		
		$xmlfile='';
		
		if ( $doc->{mainjob}->{status}->{regular}->{exitcode} 
		     && $doc->{mainjob}->{status}->{regular}->{exitcode} > 0 
		     && $doc->{statcall}->{stdout}->{data}){
		    push(@errorList, "errorcode ->  $doc->{mainjob}->{status}->{regular}->{exitcode}\n");
		    push(@errorList, "stdout -> $doc->{statcall}->{stdout}->{data}");
		    push(@errorList, "Executable = " . $doc->{mainjob}->{statcall}->{file}->{name} . "\n");
		    push(@errorList, "Duration Time = " . $doc->{mainjob}->{duration} . "\n");
		    push(@errorList, "Start time = ". $doc->{mainjob}->{start} . "\n");
		    push(@errorList, "User time = ". $doc->{mainjob}->{usage}->{utime} . "\n");
		    push(@errorList, "System time = ". $doc->{mainjob}->{usage}->{stime} . "\n");
		}
		
		if ( $doc->{statcall}->{stderr}->{data}){
		    push(@errorList, "stderr -> $doc->{statcall}->{stderr}->{data}");
		}
		$masterHash{ $outfile } = [ @errorList ]; 
	    }
	}
    }
}

sub ReadDagOutFiles($){
    #This does not read kickstart records.  This will read the condor.out file

    my $dagDir = shift || die "no dagDir\n";
    
    my @dagOut = glob("$dagDir/*.out");
    my @patternArr;
    
    $patternArr[0] ='-+\sJob\s-+';
    $patternArr[1] ='-+\s+<END>';

    foreach my $logFile (@dagOut){
	#Does the file exist?
	if (-e $logFile && $logFile !~ m/.dag.dagman.out$/ ){
	    MatchPatterns(\@errors, \@ignoredErrors, \$logFile);
	}
	elsif ($logFile =~ m/.dag.dagman.out$/ )
	{
	    MatchLines(\$logFile,\@patternArr);
	}
    }    
}

sub TimeSplitEury($)
{
    my $inputline = shift || die "Cannot time split\n";

    $inputline =~ /(^.*\s)(\d\d\d\d\d\d\d\dT\d\d\d\d\d\d\.\d\d\d)(.*$)/;
	my $year = substr($2,0,4);
        my $month = substr($2,4,2);
	my $day = substr($2,6,2);
	my $hour = substr($2,9,2);
	my $minute = substr($2,11,2);
	my $second = substr($2,13,6);
	return "$month\/$day - $hour\:$minute\:$second - $3";
}

sub TimeSplitDbg($)
{
    my $inputline = shift || die "Cannot time split\n";
    my $returnval;

    $inputline =~ /(\d\d\d\d\d\d\d\dT\d\d\d\d\d\d\.\d\d\d)(.*$)/;
	my $year = substr($1,0,4);
	my $month = substr($1,4,2);
	my $day = substr($1,6,2);
	my $hour = substr($1,9,2);
	my $minute = substr($1,11,2);
	my $second = substr($1,13,6);

   if ($2 !~ m/\n$/)
	{ $returnval = "$month\/$day - $hour\:$minute\:$second -$2\n"}
   else
	{ $returnval = "$month\/$day - $hour\:$minute\:$second -$2"};
							   
   return "$returnval";
}

sub ReadEuryFileOld($){
    my $dagDir = shift || die "no Euryale File\n";
    my @errorList;
    my $i=0;
    my $euryFile = "$dagDir/euryale.log";
    my $formattedtime;
    my @inputarr;
    my %site;
    my  $bool = 0;
    #Does the file exist?
    if (-e "$euryFile")
    {
	    open (FILEPATH, "$euryFile") || die "No euryale file path\n";
	    @inputarr = <FILEPATH>;
	    close FILEPATH;

	    foreach my $inputline (@inputarr)
	    {  
		if ($inputline =~ m/projected for/)
		{
		    $inputline =~ /(^.*)(ID\d\d\d\d\d\d)(\s.*for\s)(.*)/;
		    $site{ $2 } = $4;
		}

		if ($inputline =~ m/status\s\d/){
		    $inputline =~ /(^.*\s)(status\s)(\d)/;
		    if ($3 > 0)
		    {
			$bool = 1;
		    }
		}

		if ($inputline =~ m/ABORT:/ 
		    || $inputline =~ m/FATAL:/
		    || $inputline =~ m/projected for/
		    || ($inputline =~ m/status\s\d/ && $bool == 1))
		{   
		    my $inter = $i - $errorlines;
		    if ($inter < 0)
		    { $inter=0; }
		    my $intertop = $i + $errorlines + 1;
		    if ($intertop > (scalar(@inputarr) -1))
		    { $intertop = (scalar(@inputarr) -1); }
		    
		    while ($inter <= $intertop){
			if ($inputarr[$inter] =~ m/\d+T\d+\.\d+/){
			    $formattedtime = TimeSplitEury($inputarr[$inter]);
			    $formattedtime =~ /(^.*)(ID\d\d\d\d\d\d)(.*)/;
			    
			    my $intertemp = $inter + 1;
			    my $addin='';
			    if (exists $inputarr[$inter] && defined $site{ $2 })
			    {
				if ($formattedtime =~ m/projected for/)
				{ $addin =LineFormat($intertemp) ." - $formattedtime \n"; }
				else
				{ 
				    $addin = LineFormat($intertemp) . " - $formattedtime at $site{ $2 }\n"; 
				}
				
			    }
			    push(@errorList,$addin);
			}
			$inter++;
		    }
		}
		$bool = 0;
		$i++;		
	    }
	    $masterHash{ $euryFile } = [ @errorList ]; 
	}   
}

sub ReadEuryFile($){
    my $dagDir = shift || die "no Euryale File\n";
    my @errorList;
    my $i=0;
    my $euryFile = "$dagDir/euryale.log";
    my $formattedtime;
    my @inputarr;
    my %site;
    my  $bool = 0;
    #Does the file exist?
    if (-e "$euryFile")
    {
	    open (FILEPATH, "$euryFile") || die "No euryale file path\n";
	    @inputarr = <FILEPATH>;
	    close FILEPATH;

	    foreach my $inputline (@inputarr)
	    {  
		if ($inputline =~ m/status\s\d/){
		    $inputline =~ /(^.*\s)(status\s)(\d)/;
		    if ($3 > 0)
		    {
			$bool = 1;
		    }
		}

		if ($inputline =~ m/ABORT:/ 
		    || $inputline =~ m/FATAL:/
		    || $inputline =~ m/projected for/
		    || ($inputline =~ m/status\s\d/ && $bool == 1))
		{   
		    my $inter = $i - $errorlines;
		    if ($inter < 0)
		    { $inter=0; }
		    my $intertop = $i + $errorlines;
		    if ($intertop > (scalar(@inputarr) -1))
		    { $intertop = (scalar(@inputarr) -1); }
		 
		    if ($inputline =~ m/projected for/)
		    {
			$inputline =~ /(^.*)(ID.*)(\sPRE.*for\s)(.*)/;
			$inputline =~ /(^.*)(ID\d\d\d\d\d\d)(\s.*for\s)(.*)/;
			$site{ $2 } = $4;
		    }
		    
		    while ($inter <= $intertop)
		    {
			if ($inputarr[$inter] =~ m/\d+T\d+\.\d+/)
			{
			    $formattedtime = TimeSplitEury($inputarr[$inter]);
			    $formattedtime =~ /(^.*)(ID\d\d\d\d\d\d)(.*)/;
			    
			    my $intertemp = $inter + 1;
			    my $addin='';
			    			    
			    if (exists $inputarr[$inter])
			    {
				if ($formattedtime =~ m/projected for/ && defined $2) #NEED TO TEST THIS
				{ 
				    $addin = LineFormat($intertemp) . " - $formattedtime at $site{ $2 }\n"; 
				}
				else
				{ 
				    $addin = LineFormat($intertemp) ." - $formattedtime \n"; 
				}
				
				push(@errorList,$addin);
			    }				
			}
			$inter++;
		    }
		}
		$bool = 0;
		$i++;		
	    }
	    $masterHash{ $euryFile } = [ @errorList ]; 
	}   
}

sub ReadDagOld($){
	     
    my $filePath = shift || die "no filepath\n";
    my @paths = ();
    my $fullPath = '';
#    my @subPath;
    
    my $cutPath = dirname($filePath);
    
    print "filepath = $filePath\n";

    open (FILEPATH, "$filePath");
    while (<FILEPATH>){
	if ($_ =~ m/^SCRIPT POST/){

	#    print "line = $_ \n";

	   $_ =~ /^(.*SCRIPT\sPOST\s)(.*)(\s\/.*\s)(.*)/; #pegasus match
	    
	    $2 =~/^(.*)(\s.*)/;

#	    $_ =~ /^(.*.pl\s)(.*sub)(.*)/; #euryale match
	   
	   $fullPath = $cutPath . "/" . $2;

	   print "2 here is $2\n";
	   print "cutpath = $cutPath\n";
	   print "fullpath = $fullPath\n";
	    
	    my $test = substr($fullPath,-3,3);
	    
	    $fullPath =~ s/$test/*/;
	   
	   print "fullpath = $fullPath \n";
	   my @subPath = glob("$fullPath");
	    
	    foreach my $sub (@subPath){
#		print "sub = $sub \n";
		push (@paths,$sub);
	    }
	}
    }
	close (FILEPATH);
	return @paths;
    }

sub FindFiles
{
#    print "$File::Find::name\n";
    push(@debugDirs,"$File::Find::name");
}

sub ReadDag($){
		
    my $filePath = shift || die "no filepath\n";
        
    my $cutPath = dirname($filePath) ;
   
    find(\&FindFiles , "$cutPath");
    
}


sub FindDag($){
    my $dagDir = shift || die "no Dag Dir\n";

    my @dagPath = glob("$dagDir/*.dag");
        
    die "Too many or too few dags" unless scalar(@dagPath) == 1;
    
    return $dagPath[0];
}

sub AddIgnoredErrorPatterns($)
{
    my $igErrors = shift || die "no ignoredErrors \n";
    push (@ignoredErrors,$igErrors);
}

sub AddErrorPatterns($)
{
    my $errs = shift || die "no errors\n";
    push (@errors,$errs);
}


sub AddIgnoredFilePatterns($)
{
    my $ignore = shift || die "no errors\n";
    push (@filesToIgnore,$ignore);
}

sub ReadErrorFile()
{
    my @errorPatterns = ();
    my @errorPatternsIgnore = ();
    my $fullPath = '';
    my $switch = 0; #0 errors #1 errors to ignore
    
    open (FILEPATH, "$errorfile");
    while (<FILEPATH>)
    {
	if (index ($_ ,'#List of Errors to find') >= 0)
	{ $switch = 0; }
	elsif (index ($_ ,'#List of Errors to ignore') >= 0)
	{ $switch = 1; }
	elsif (index ($_ ,'#Files to ignore') >= 0)
	{ $switch = 2; }
	
	if ($switch == 0)
	{
	    $_ =~ s/[\r\n]*$//;
	    if ($_ ne '' && $_ !~ m/^#/)
		{
		    AddErrorPatterns($_);
		}
	    }
	    elsif ($switch == 1)
	    {
		$_ =~ s/[\r\n]*$//;
		
		if ($_ ne '' && $_ !~ m/^#/)
		    {		
			AddIgnoredErrorPatterns($_);
		    }
		}
		elsif ($switch == 2)
		{		    
		    $_ =~ s/[\r\n]*$//;
		    if ($_ ne '' && $_ !~ m/^#/)
			{	
			    AddIgnoredFilePatterns($_);
			}
		    }
		}
		close (FILEPATH);
	    }
	    	    
sub MatchPatterns($$$)
{
    my $errorArr = shift || die "no error patterns\n";  #array of all of the error patterns to look for
    my $errorIgArr = shift || die "no ignore error patterns\n"; #array of all of the error patterns to ignore
    my $filePath = shift || die "no file path\n";
    my @errorList;  #errorArr that has also been filtered through errorIgArr
    my $skip = 0;
    my $errorTemp;
    my $lineTemp;
    my $nextFile = 0;
    my $i = 0;
    my @inputarr;
    
    open (FILEPATH, "${$filePath}");
    @inputarr = <FILEPATH>;
    close FILEPATH;
    
    foreach my $inputline (@inputarr)
    {
	foreach my $error (@{$errorArr})
	{
	    $lineTemp = $inputline;
	    $lineTemp =~ tr/A-Z/a-z/;
	    $errorTemp = $error;
	    $errorTemp =~ tr/A-Z/a-z/;
	    
	    if (index ($lineTemp ,$errorTemp) >= 0){
		foreach my $errorIg (@{$errorIgArr})
		{
		    $errorIg =~ tr/A-Z/a-z/;
		    
		    if (index ($lineTemp ,$errorIg) >= 0){
			$skip = 1;
			last;  
		    }
		}
		
		if ($skip == 0){
		    if ($inputline =~ m/mv failure/)  #If statment to catch ftp errors in the .dbg files.  Not sure how well this will work
		    {
			my $ii = $i -1;
			my @mvarr;

			push(@mvarr,$inputline);
			while($inputarr[$ii] =~ m/LIST:/){
			    push(@mvarr,$inputarr[$ii]);
			    $ii--;
			}
			push(@mvarr,$inputarr[$ii]);
			
			foreach my $sendit (reverse @mvarr){
			    push(@errorList, LineFormat( $ii ) . " - $sendit");
			    $ii++;
			}
		    }
		    else{ 
			my $inter = $i - $errorlines;
			if ($inter < 0)
			{ $inter=0; }
			my $intertop = $i + $errorlines;
			
			if ($intertop > (scalar(@inputarr) -1))
			{ $intertop = (scalar(@inputarr) -1); }
			
			while ($inter <= $intertop)
			{
			    $inputarr[$inter] =~ s/[\r\n]*$//;
			    $inputarr[$inter] = $inputarr[$inter] . "\n";
			    
			    if ($inputarr[$inter] =~ m/(\d\d\d\d\d\d\d\dT\d\d\d\d\d\d\.\d\d\d)(.*$)/)
				{
				    $inputarr[$inter] = TimeSplitDbg($inputarr[$inter]);
				}
				
				if ($inputarr[$inter] =~ m/GRAM Job submission failed/)
				{
				    $inputarr[$inter] .= "Please refer to http://www-unix.globus.org/toolkit/docs/2.4/faq_errors.html for documentation on this error\n";
				}
				
				my $intertemp = $inter + 1;
				
				push(@errorList, LineFormat( $intertemp ) . " - $inputarr[$inter]");
				$inter++;
			    }
			    
			}
			$skip = 0;
		    }
		}
	    }
	    $i++;
	}
	
	close (FILEPATH);
	
	if ( scalar(@errorList) != 0 )
	{
	    $masterHash{ ${$filePath} } = [ @errorList ]; 
	}	
    }
    
sub PathChopper( $ )
{
    my $fullpath = shift || die "no path to chop \n";
    my @pathchopped = split(/\//,$fullpath);

    my $length = scalar(@pathchopped);

    return "**/" . $pathchopped[$length -3] . "/" . $pathchopped[$length -2] . "/" . $pathchopped[$length -1]
    }

sub GetTime( $ )
{
    my $time = shift || die "no time string\n";

    $time =~ /(^.*-\s)(\d\d\/\d\d\s\-\s\d\d\:\d\d:\d\d\.\d\d\d)(.*$)/;

    return $2;
}

sub TimePrintIt()
{
    my %outputhash = ();

    open STDOUT, ">> $outputFile";    
    
    foreach my $printIt ( sort keys %masterHash) #for the local debug files, etc
    {	
	if (@{ $masterHash{$printIt} })	{	
      	    foreach my $print ( @{ $masterHash{$printIt} } ){
		my $line = PathChopper($printIt) ." - $print";   
		my $time = GetTime($line);
		if ( defined $time ){
		    $outputhash{ $time } .= $line;
		}
	    }
	}
    }

    foreach my $print ( sort keys %outputhash)
    {
	print "$print - $outputhash{ $print }";
    }

 close STDOUT;
}

sub GetID( $ )
{
    my $time = shift || die "no time string\n";

    $time =~ /(^.*\/)(ID\d\d\d\d\d\d)(.*$)/;

    return $2;
}

sub IDPrintIt()
{
    my %outputhash = ();
    open STDOUT, ">> $outputFile";    
    
    foreach my $printIt ( sort keys %masterHash) #for the local debug files, etc
    {	
	if (@{ $masterHash{$printIt} })	{	
      	    foreach my $print ( @{ $masterHash{$printIt} } ){
		my @inputarr;
		my $line = PathChopper($printIt) ." - $print";   
		my $id = GetID($line);
		if ( defined $id ){
		    if (exists $outputhash{ $id })
		    {
			@inputarr = @{ $outputhash{ $id } };
			push (@inputarr,$line);
			$outputhash{ $id } = [ @inputarr ];
		    }
		    else
		    {
			push (@inputarr,$line);
			$outputhash{ $id } = [ @inputarr ];
		    }
		}
	    }
	}
    }

    foreach my $print ( sort keys %outputhash)
    {
	print "$print \n @{$outputhash{ $print }}\n";
    }

 close STDOUT;
}

sub PrintIt()
{
    open STDOUT, ">> $outputFile";    
    
    my @globalfiles = qw(euryale.log .log dag.dagman.out);
    
    foreach my $globalkey ( @globalfiles ) #for global files to print first
    {
	foreach my $printitglobal ( reverse keys %masterHash )
	{	
	    if ( (index ($printitglobal , $globalkey) >= 0) && @{ $masterHash{$printitglobal} })
	    {	
		print STDOUT "\n" . PathChopper($printitglobal) . "\n";
		foreach my $printhash ( @{ $masterHash{$printitglobal} } )
		{
		    print STDOUT "$printhash";   
		}

	        delete $masterHash{$printitglobal};
	    }
	}
    }

    foreach my $printIt ( sort keys %masterHash) #for the local debug files, etc
    {	
	if (@{ $masterHash{$printIt} })
	{	
	    print STDOUT "\n" . PathChopper($printIt) . " \n";
      	    foreach my $print ( @{ $masterHash{$printIt} } )
	    {
		print STDOUT "$print";   
	    }
	}
    }
 close STDOUT;
}

sub GetAllFiles( $ )
{
    my $path = shift || die "no path\n";
    
    my $dagFilePath = FindDag($path);

#    @debugDirs = ReadDag($dagFilePath);
    ReadDag($dagFilePath);
    

}

sub ReadErrFiles()
{
    foreach my $subFile (@debugDirs)
    {
	if ($subFile =~ m/.err/ && -s $subFile)
	{
	    my @errorList;

	    open (FILEPATH, "$subFile");
	    while (<FILEPATH>)
	    {
		push(@errorList,$_);
	    }
	    $masterHash{ $subFile }  = [ @errorList ];  
	    close FILEPATH;
	}       
    }
}

sub ReadDbgFiles()
{
    foreach my $subFile (@debugDirs){

	#Does the file exist?
	if ($subFile =~ m/.dbg/ && -e $subFile){
	    MatchPatterns(\@errors, \@ignoredErrors, \$subFile);
	}
    }
}

#####MAIN

#Need Dag path check if the dagFileEven exists
#Check if Dag is a .dag file

die "Cannot find $errorfile" unless -e $errorfile;

ReadErrorFile();

if (substr($dagFileDir, 0,1) ne '/'){
    #not full path
    my $path = cwd;
    $dagFileDir = $path . "/" . $dagFileDir;
    
}

GetAllFiles($dagFileDir);
RemoveFilesToIgnore();
ReadLogFiles($dagFileDir);
ReadDagOutFiles($dagFileDir);
ReadIDOutFiles();
ReadEuryFile($dagFileDir);
ReadDbgFiles();
ReadErrFiles();

if ($tflag)
{ TimePrintIt(); }
elsif ($idflag)
{ IDPrintIt(); }
else
{ PrintIt(); }



