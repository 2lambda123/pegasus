#!/usr/bin/env perl
#
# experimental site selector for grid slow start
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Author: Jens-S. Vöckler voeckler@cs.uchicago.edu
# Revision : $Revision: 1.4 $
#
use 5.006;
use strict;
use subs qw(log);		# replace Perl's math log with logging
use Fcntl qw(:DEFAULT);
use Carp;
use Socket;

use Time::Local;
use Time::HiRes;

# load our own local modules
use Work::Common;
use Work::Properties qw(:parse);
use Site::Selector qw(%multikeys);
use Site::Intent qw(:lock);

# globals
$main::DEBUG = 1;		# for now
$main::window = 3;		# starting window size

# revision handling
$main::revision='1.0';	        # don't edit, automatically updated by CVS
$main::revision=$1 if ( '$Revision: 1.4 $' =~ /Revision:\s+([0-9.]+)/ );

# variables
my $props = Work::Properties->new( PARSE_WFRC );
my $windowdb = $props->property('wf.slow.start') || 
    die "Missing property wf.slow.start should point to a rendez-vous file\n";
my $tempfile = shift || die "Need a filename as first argument\n";
my $tailsock = 'tailstatd.sock';

# setup logging
sysopen( LOG, 'slowstart.log', O_CREAT|O_APPEND|O_WRONLY, 0666 ) ||
    die "Unable to create logger: $!\n";
$SIG{__DIE__} = sub { log( 'DIED: ', substr($_[0],0,-1) ) };
$SIG{__WARN__} = sub { log(substr($_[0],0,-1)) };

#
# --- functions ---------------------------------------------------
#
sub log {
    # purpose: Appends a message to a common log file
    # paramtr: various
    # returns: bytes written
    my @now = Time::HiRes::gettimeofday();
    my @tm = localtime( $now[0] );
    my $prefix = sprintf( "%4d%02d%02dT%02d%02d%02d.%03d %7s ",
			  $tm[5]+1900, $tm[4]+1, $tm[3],
			  $tm[2], $tm[1], $tm[0], 
			  $now[1] / 1000, "[$$]" );
    $prefix .= join('',@_) . "\n";
    # atomic write
    syswrite( LOG, $prefix );
}

my $re_date = q{(\d{4}).?(\d{2}).?(\d{2})};
my $re_time = q{(\d{2}).?(\d{2}).?(\d{2})(\.\d+)?};
my $re_zone = q{(Z|[-+](\d{2}).?(\d{2}))};

sub dateiso($) {
    # purpose: Turns an ISO stamp back into a UTC stamp
    # paramtr: $iso (IN): ISO stamp
    # returns: UTC stamp
    local($_) = shift;
    if ( /${re_date}T?${re_time}${re_zone}/ ) {
	( $8 eq 'Z' ) ?
	    timegm($6,$5,$4,$3,$2-1,$1) :
	    timelocal($6,$5,$4,$3,$2-1,$1);
    } else {
	0;
    }
}

sub my_connect ($$) {
    # purpose: use optional bind() follow by connect() on a socket.
    #          The bind will only be attempted in the presence of GTPR
    # warning: Use inside eval { } as this method employs die()!
    # fix me : no concept of timeouts (yet)
    # paramtr: $host (IN): remote hostname
    #          $port (IN): remote port number
    # returns: hashref to list of site information from tailstatd
    local(*S);
    my $host = shift;
    my $port = shift;
    my $site = inet_aton($host);

    # get the protocol
    my $proto = getprotobyname('tcp') || die "getprotobyname: $!\n";

    # instantiate a socket
    socket( S, PF_INET, SOCK_STREAM, $proto ) || die "socket: $!\n";

    # handle non-local peer and G_T_P_R with local bind
    if ( exists $ENV{'GLOBUS_TCP_PORT_RANGE'} && $site ne INADDR_LOOPBACK ) {
	my ($lo,$hi) = split /\D/, $ENV{'GLOBUS_TCP_PORT_RANGE'}, 2;
	my ($i,$sin);
	for ( $i = $lo; $i < $hi; ++$i ) {
	    $sin = sockaddr_in( $i, INADDR_ANY );
	    bind( S, $sin ) && last;
	}
	die "unable to bind to a local port\n" if ( $i >= $hi );
    }

    # connect
    connect( S, sockaddr_in( $port, $site ) ) || 
	die "connect $host:$port: $!\n";

    # send request
    syswrite( S, "GET site * TSSP/1.0\r\n" ) ||
	die "sending request to $host:$port: $!\n";

    # slurp initial line
    $_ = <S>;
    die "Wrong protocol version\n" unless /^TSSP\/1.0 2/;
    
    # slurp remainder
    my (%result,@x);
    while ( <S> ) {
	s/[\r\n]+$//;		# chomp
	@x = split /\s+/;
	if ( /^\s/ ) {
	    # NEW: some history on time spent pending.
	    shift(@x) unless $x[0];
	    $result{$site}{pinfo}{ dateiso($x[0]) } = {
		count => $x[1],
		total => $x[2],
		ratio => ( $x[1] ? $x[2] / $x[1] : 0 )
		};
	} else {
	    $site = $x[0];
	    $result{$site} = { mtime => dateiso($x[1]),
			       pending => $x[2],
			       running => $x[3],
			       other => $x[4],
			       success => $x[5],
			       failure => $x[6],
			       smtime => dateiso($x[7]),
			       fmtime => dateiso($x[8]) };
	}
    }

    # close socket
    close S;
    %result;
}

sub pend($$;$) {
    # purpose: sums up the pending time and jobs started
    # returns: averaged pending time in last $cutoff minutes
    my $now = shift || time;
    my $siteinfo = shift;
    my $cutoff = shift || 600;

    if ( exists $siteinfo->{pinfo} ) {
	my ($count,$total) = (0,0);	# default result
	foreach my $x ( keys %{$siteinfo->{pinfo}} ) {
	    next unless abs($now-$x) < $cutoff;
	    $count += $siteinfo->{pinfo}{$x}{count};
	    $total += $siteinfo->{pinfo}{$x}{total};
	}
	( $count == 0 ? 3E3 : $total / $count );
    } else {
	# site has no pinfo at all -- all failures? too early? 
	( abs($now-$siteinfo->{fmtime}) < $cutoff ? 1E6 : 1E4 );
    }
}

sub algorithm1(\@\%$;$) {
    # purpose: sums up the pending time and jobs started
    # returns: the site with the least average pending time.
    my $sref = shift;
    my $iref = shift;
    my $db = shift;
    my $cutoff = shift || 600;

    # initialize with weighted average pending time
    my $now = time;
    my %site = map { $_ => ( pend($now,$iref->{$_}) / $db->{$_} ) } @{$sref}; 
    my @site = sort { $site{$a} <=> $site{$b} } @{$sref};
    log( 'choices 2: ', join( ', ', map { 
	$_ . '=' . sprintf("%.1f",$site{$_}) } @site ) );

    # takes sites with least weighted average pending time.
    my $site = shift @site;
    log( "phase 2? $site has least apt=", sprintf("%.1f",$site{$site}) );
    return $site;
}

sub start($$;$) {
    # purpose: sums up the jobs started
    # returns: sum of started jobs in last $cutoff minutes
    my $now = shift || time;
    my $siteinfo = shift;
    my $cutoff = shift || 600;

    if ( exists $siteinfo->{pinfo} ) {
	my $count = 0;		# default result
	foreach my $x ( keys %{$siteinfo->{pinfo}} ) {
	    next unless abs($now-$x) < $cutoff;
	    $count += $siteinfo->{pinfo}{$x}{count};
	}
	$count;
    } else {
	# site has no pinfo at all -- all failures? too early? 
	( abs($now-$siteinfo->{fmtime}) < $cutoff ? -1 : 0 );
    }
}

sub algorithm2(\@\%$;$) {
    # purpose: sums up the jobs that were started in the last interval
    # returns: the site with the most jobs started.
    my $sref = shift;
    my $iref = shift;
    my $db = shift;
    my $cutoff = shift || 600;

    # initialize with weighted average pending time
    my $now = time;
    my %site = map { $_ => ( start($now,$iref->{$_}) * $db->{$_} ) } @{$sref}; 
    my @site = sort { $site{$b} <=> $site{$a} } @{$sref};
    log( 'choices 2: ', join( ', ', map { $_ . '=' . $site{$_} } @site ) );

    # takes sites with largest weighted started jobs in last interval.
    my $site = shift @site;
    log( "phase 2? $site has max weighted starts=$site{$site}" );
    return $site;
}

sub past_success($$) {
    my $now = shift || time;
    my $info = shift;
    return $now unless defined $info;

    my $diff = $now;
    if ( exists $info->{smtime} && $info->{smtime} > 0 ) {
	# site has success info
	if ( exists $info->{fmtime} && $info->{fmtime} > 0 ) {
	    # site has fail info
	    $diff -= $info->{smtime}
		if ( $info->{smtime} > $info->{fmtime} );
	} else {
	    # site has no failure info
	    $diff -= $info->{smtime};
	}
    } else {
	# site has no success info
    }

    $diff;
}

sub check_past_success(\@\%$;$) {
    # purpose: check sites that had successes in the past
    # returns: the site with more recent success. 
    my $sref = shift;
    my $iref = shift;
    my $db = shift;
    my $cutoff = shift || 3600;

    # initialize with weighted average pending time
    my $now = time;
    my %site = map { $_ => past_success($now,$iref->{$_}) } @{$sref};
    my @site = sort { $site{$a} <=> $site{$b} }
               grep { $site{$_} <= $cutoff } @{$sref};

    my $site;			# result
    if ( @site > 0 ) {
	# takes sites with largest weighted started jobs in last interval.
	log( 'choices 2: ', join( ', ', map { $_ . '=' . $site{$_} } @site ) );
	$site = shift @site;
	log( "phase 2? $site has best weighted recent success: $site{$site}" );
    }

    # undef => last resort, wait for conditions to change
    $site;
}

sub good($) {
    # purpose: find sites that are failing without fail... 
    # paramtr: $info (IN): site info, may not exist
    # returns: true if site is good, false if site is evil
    my $info = shift;

    # OK, we don't know anything (yet)
    return 1 unless defined $info;

    # No success whatsoever for that site, give up on it!
    return undef if ( $info->{success} == 0 && $info->{failure} > 10 );
    
    if ( $info->{fmtime} > $info->{smtime} &&
	 abs( time - $info->{fmtime} ) < 3600 ) {
	# recent failure on site, more recent than success
	return undef if ( $info->{success} < $info->{failure} );
    }

    1;
}

sub work($\%\%) {
    # purpose: the works -- find the right site
    # paramtr: $s (IN): instance of Site::Selector
    #          %db (IO): tied database shared between siblings
    #          %info (IN): information obtained from tailstatd
    # returns: undef if no good choice, site handle if successful
    my $s = shift;
    my $db = shift;
    croak "need a hash as 2nd argument to work" unless ref $db eq 'HASH';
    my $iref = shift;
    croak "need a hash as 3rd argument to work" unless ref $iref eq 'HASH';

    my $site;
    my @site = $s->site;	# collect site candidates

    # IN THIS PHASE: Initialize intent counter and default window size
    # for each candidate, but only iff the candidate does not exist yet. 
    foreach $site ( @site ) {
	unless ( exists $db->{$site} ) {
	    # site does not exist in database -- we are before slow start.
	    # chose this candidate to send an initial (probe) job to. 
	    log( "phase 1? $site is yet unknown" );
	    $db->{$site} = $main::window;
	    return $site;
	}
    }
    # POST-CONDITION: All site candidates in @site have at least one probe
    # job running submitted to them. All $db{@site} exist and are defined.
    @site = sort { $db->{$b} <=> $db->{$a} } @site;
    log( 'choices 1: ', join( ', ', map { $_ . '=' . $db->{$_} } @site ) );

    # make @site a continuous priority queue, with largest open window 
    # first. Also weed out any sites that have their window closed.
    my @temp = grep { $db->{$_} > 0 && good($iref->{$_}) } @site;

    if ( @temp == 0 ) {
	# no matches -- are there past successes anywhere?
	log( "phase 2: no open windows, checking past successes" );
	return check_past_success( @site, %{$iref}, $db );
    } elsif ( @temp == 1 ) {
	# exactly one match, sigh, take it
	$site = shift @temp;
	log( "phase 2? $site is the only match with w=", $db->{$site} );
	return $site;
    } else { # ( @temp > 1 )
	# multiple matches, now let's have some fun with %info
	return algorithm2( @temp, %{$iref}, $db );
    }

    # done -- nothing found
    undef;
}

#
# --- main ---------------------------------------------------
#
log('starting');
END { log('exiting'); close LOG }

# read site selector tempfile
my $s = Site::Selector->new($tempfile) || die( "Reading $tempfile: $!\n" );
#log( 'choices: ', join(', ', $s->site) );

# initialize shared knowledge
my $i = Site::Intent->new($windowdb) || die( "Managing $windowdb: $!\n" );

# slurp brain.db from tailstatd
my %config = slurp_braindb('.') or 
    die( 'open ', $Work::Common::brainbase, ": $!\n" );

# determine point of contact to tailstatd
my $sockfn = File::Spec->catfile( $config{run}, $tailsock );

# wait a little, if the tailstat socket file is not there
for ( my $retries=0; $retries < 10; ++$retries ) {
    last if -r $sockfn;
    log( 'waiting for tailstat socket to appear, retry ', $retries+1 );
    Time::HiRes::sleep( 10 * rand() );
}
open( IN, "<$sockfn" ) || die "open $sockfn: $!\n";
my ($host,$port) = split /\s+/, <IN>;
close IN;

# determine some form of unique job identifier
my $ujid = $s->hash('wf.ujid');
$ujid = $s->hash('wf.jobid') unless ( defined $ujid && $ujid ne '!!UJID!!' );

my (%db,%info,$result);
do {
    # NEVER talk to tailstatd while we hold the lock!
    # import sites that are known to be active
    %info = eval { my_connect( $host, $port ) };
    log( $@ ), last if ( $@ );

    if ( $i->dbtie(\%db) ) {
	# death in &work must not leave db locked indefinitely.
	# Thus bracket the sensitive call into eval().
	$result = eval { work( $s, %db, %info ) };
	log( $@ ) if $@;

	# shrink window size while we still have the lock
	--$db{$db{$ujid}=$result} if ( defined $result );
	
	# release lock
	$i->dbuntie(\%db);
    } else {
	# uh-oh
	log( "UH-OH: tie $windowdb: $!" );
	last;
    }

    if ( defined $result ) {
	log( "chosen site $result" );
    } else {
	# sleep a while and retry
	my $sleep = 60 * rand();
	log( 'no good match found, sleeping ', sprintf( "%.3f s", $sleep ) );
	Time::HiRes::sleep($sleep);
    }
} until ( defined $result );

print STDOUT "SOLUTION:$result\n";
exit( defined $result && length($result) ? 0 : 42 );
