#!/usr/bin/env python

"""
Usage: pegasus-dashboard [options]
"""

##
#  Copyright 2007-2012 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##

# Revision : $Revision: 2012 $

__author__ = "Rajiv Mayani"

#Python modules
import os
import sys
import atexit
import optparse
import subprocess
from decimal import Decimal
from time import localtime, strftime

# Use pegasus-config to find our Pegasus environment
bin_dir = os.path.normpath(os.path.join(os.path.dirname(sys.argv[0])))
pegasus_config = os.path.join(bin_dir, "pegasus-config") + " --python-dump"
config = subprocess.Popen(pegasus_config, stdout=subprocess.PIPE, shell=True).communicate()[0]
exec config

# We also need the externals lib 
pegasus_config = os.path.join(bin_dir, "pegasus-config") + " --noeoln --python-externals"
lib_ext_dir = subprocess.Popen(pegasus_config, stdout=subprocess.PIPE, shell=True).communicate()[0]

# Insert the lib directories in our search path
os.sys.path.insert(0, lib_ext_dir)

pegasus_env_path = {
'pegasus_bin_dir'       : pegasus_bin_dir,
'pegasus_conf_dir'      : pegasus_conf_dir,
'pegasus_java_dir'      : pegasus_java_dir,
'pegasus_perl_dir'      : pegasus_perl_dir,
'pegasus_python_dir'    : pegasus_python_dir,
'pegasus_php_dir'       : pegasus_php_dir,
'pegasus_javascript_dir': pegasus_javascript_dir,
'pegasus_share_dir'     : pegasus_share_dir
}

#Pegasus modules
from Pegasus.tools import utils

#Flask modules
from flask import Flask, request, render_template, g

#Dashboard modules
from Pegasus.dashboard.Dashboard import Dashboard, Utils, NoWorkflowsFoundError

_master_db_url = None
app = Flask (__name__, static_folder=os.path.join (pegasus_env_path ['pegasus_share_dir'], 'dashboard/static'))

from jinja2 import FileSystemLoader
app.jinja_loader = FileSystemLoader (os.path.join (pegasus_env_path ['pegasus_share_dir'], 'dashboard/templates'))

"""
List all work-flows in the master database.
"""
@app.route('/')
def index ():
    
    if request.is_xhr:
        try:
            dashboard = Dashboard (_master_db_url)
            args = __get_datatables_args ()
            count, filtered, workflows, totals = dashboard.get_root_workflow_list (**args)
            
        except NoWorkflowsFoundError, e:
            return render_template ('workflow.xhr.json', count=e.count, filtered=e.filtered, workflows=[], table_args=args)
        
        return render_template ('workflow.xhr.json', count=count, filtered=filtered, workflows=workflows, table_args=args)
    
    #Not an AJAX request.
    try:
        dashboard = Dashboard (_master_db_url)
        args = __get_datatables_args ()
        count, filtered, workflows, totals = dashboard.get_root_workflow_list (**args)
        
    except NoWorkflowsFoundError:
        #Log this.
        return '', 204

    return render_template ('workflow.html', workflows=workflows, counts=totals)

"""
Get details of the latest instance of a specific work-flow.
"""
@app.route('/root/<root_wf_id>/workflow')
@app.route('/root/<root_wf_id>/workflow/<wf_id>')
def workflow (root_wf_id, wf_id=None):
    
    wf_uuid = request.args.get ('wf_uuid', None)
    
    if not wf_id and not wf_uuid:
        raise ValueError, 'Workflow ID or Workflow UUID is required'
    
    if wf_id:
        dashboard = Dashboard (_master_db_url, root_wf_id, wf_id=wf_id)
    else:
        dashboard = Dashboard (_master_db_url, root_wf_id)

    counts, details, statistics = dashboard.get_workflow_information (wf_id, wf_uuid)

    return render_template ('workflow/workflow_details.html', root_wf_id=root_wf_id, wf_id=details.wf_id, workflow=details, counts=counts, statistics=statistics);

"""
Get a list of all successful jobs of the latest instance for a given work-flow.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/sub_workflows/', methods=['GET'])
def sub_workflows (root_wf_id, wf_id):
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    sub_workflows = dashboard.get_sub_workflows (wf_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (sub_workflows) > 0:
            return render_template ('workflow/sub_workflows.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, workflows=sub_workflows)
        else:
            return '', 204
    else:
        return render_template ('workflow/sub_workflows.html', root_wf_id=root_wf_id, wf_id=wf_id, workflows=sub_workflows)

"""
Get a list of all failed jobs of the latest instance for a given work-flow.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/jobs/failed/', methods=['GET'])
def failed_jobs (root_wf_id, wf_id):
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    failed_jobs_list = dashboard.get_failed_jobs (wf_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (failed_jobs_list) > 0:
            return render_template ('workflow/jobs_failed.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=failed_jobs_list)
        else:
            return '', 204
    else:
        return render_template ('workflow/jobs_failed.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=failed_jobs_list)


"""
Get a list of all running jobs of the latest instance for a given work-flow.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/jobs/running/', methods=['GET'])
def running_jobs (root_wf_id, wf_id):
    #Setup context
    g.wf_id = wf_id
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    running_jobs_list = dashboard.get_running_jobs (wf_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (running_jobs_list) > 0:
            return render_template ('workflow/jobs_running.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=running_jobs_list)
        else:
            return '', 204
    else:
        return render_template ('workflow/jobs_running.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=running_jobs_list)


"""
Get a list of all successful jobs of the latest instance for a given work-flow.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/jobs/successful/', methods=['GET'])
def successful_jobs (root_wf_id, wf_id):
    #Setup context
    g.wf_id = wf_id
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    successful_jobs_list = dashboard.get_successful_jobs (wf_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (successful_jobs_list) > 0:
            return render_template ('workflow/jobs_successful.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=successful_jobs_list)
        else:
            return '', 204
    else:
        return render_template ('workflow/jobs_successful.html', root_wf_id=root_wf_id, wf_id=wf_id, jobs=successful_jobs_list)


"""
Get details of a specific job instance.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>', methods=['GET'])
def job (root_wf_id, wf_id, job_id):
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    job = dashboard.get_job_information (wf_id, job_id)
    
    if not job:
        return 'Bad Request', 400
    
    return render_template ('workflow/job/job_details.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, job=job)

"""
Get stdout contents for a specific job instance.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/stdout', methods=['GET'])
def stdout (root_wf_id, wf_id, job_id):
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    text = dashboard.get_stdout (wf_id, job_id)
    
    if text.stdout_text == None and text.stdout_file == None:
        return 'No stdout for work-flow ' + wf_id + ' job-id ' + job_id
    else:
        return text.stdout_text

    
"""
Get stderr contents for a specific job instance.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/stderr', methods=['GET'])
def stderr (root_wf_id, wf_id, job_id):
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    text = dashboard.get_stderr (wf_id, job_id)
    
    if text.stderr_text == None and text.stderr_file == None:
        return 'No Standard error for work-flow ' + wf_id + ' job-id ' + job_id;
    else:
        return text.stderr_text

"""
Get list of successful invocations for a given job.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/invocations/successful', methods=['GET'])
def successful_invocations (root_wf_id, wf_id, job_id):
    #Setup context
    g.wf_id = wf_id
    g.job_id = job_id
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    successful_invocations_list = dashboard.get_successful_job_invocation (wf_id, job_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (successful_invocations_list) > 0:
            return render_template ('workflow/job/invocations_successful.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, invocations=successful_invocations_list)
        else:
            return '', 204
    else:
        return render_template ('workflow/job/invocations_successful.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, invocations=successful_invocations_list)

"""
Get list of failed invocations for a given job.
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/invocations/failed', methods=['GET'])
def failed_invocations (root_wf_id, wf_id, job_id):
    #Setup context
    g.wf_id = wf_id
    g.job_id = job_id
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    failed_invocations_list = dashboard.get_failed_job_invocation (wf_id, job_id)

    # is_xhr = True if it is AJAX request.
    if request.is_xhr:
        if len (failed_invocations_list) > 0:
            return render_template ('workflow/job/invocations_failed.xhr.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, invocations=failed_invocations_list)
        else:
            return '', 204
    else:
        return render_template ('workflow/job/invocations_failed.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, invocations=failed_invocations_list)

"""
Get detailed invocation information
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/invocation/', methods=['GET'])
@app.route('/root/<root_wf_id>/workflow/<wf_id>/job/<job_id>/invocation/<task_id>', methods=['GET'])
def invocation (root_wf_id, wf_id, job_id, task_id=None):
    
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    invocation = dashboard.get_invocation_information (wf_id, job_id, task_id)
        
    return render_template ('workflow/job/invocation/invocation_details.html', root_wf_id=root_wf_id, wf_id=wf_id, job_id=job_id, task_id=task_id, invocation=invocation)

"""
Get job-distribution information
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/charts', methods=['GET'])
def charts (root_wf_id, wf_id):
    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    job_dist = dashboard.plots_transformation_statistics (wf_id)

    return render_template ('workflow/charts.html', root_wf_id=root_wf_id, wf_id=wf_id, job_dist=job_dist)

"""
Get job-distribution information
"""
@app.route('/root/<root_wf_id>/workflow/<wf_id>/charts/time_chart', methods=['GET'])
def time_chart (root_wf_id, wf_id):

    dashboard = Dashboard (_master_db_url, root_wf_id, wf_id)
    time_chart_job, time_chart_invocation = dashboard.plots_time_chart (wf_id)
    
    return render_template ('workflow/charts/time_chart.json', root_wf_id=root_wf_id, wf_id=wf_id, time_chart_job=time_chart_job, time_chart_invocation=time_chart_invocation)

"""
Extract list of arguments passed in the request
"""
def __get_datatables_args ():
    table_args = dict ()
    
    if request.args.get ('sEcho'):
        table_args ['sequence'] = request.args.get ('sEcho')
    
    if request.args.get ('iColumns'):
        table_args ['column-count'] = int (request.args.get ('iColumns'))
        
    if request.args.get ('sColumns'):
        table_args ['columns'] = request.args.get ('sColumns')
        
    if request.args.get ('iDisplayStart'):
        table_args ['offset'] = int (request.args.get ('iDisplayStart'))
         
    if request.args.get ('iDisplayLength'):
        table_args ['limit'] = int (request.args.get ('iDisplayLength'))
        
    if request.args.get ('sSearch'):
        table_args ['filter'] = request.args.get ('sSearch')
        
    if request.args.get ('bRegex'):
        table_args ['filter-regex'] = request.args.get ('bRegex')
            
    if request.args.get ('iSortingCols'):
        table_args ['sort-col-count'] = int (request.args.get ('iSortingCols'))
    
    if request.args.get ('iColumns'):
        for i in range (int (request.args.get ('iColumns'))):
            i = str (i)
            
            if request.args.get ('mDataProp_' + i):
                table_args ['mDataProp_' + i] = request.args.get ('mDataProp_' + i)
            
            if request.args.get ('sSearch_' + i):
                table_args ['sSearch_' + i] = request.args.get ('sSearch_' + i)
            
            if request.args.get ('bRegex_' + i):
                table_args ['bRegex_' + i] = request.args.get ('bRegex_' + i)
            
            if request.args.get ('bSearchable_' + i):
                table_args ['bSearchable_' + i] = request.args.get ('bSearchable_' + i)
    
            if request.args.get ('iSortCol_' + i):
                table_args ['iSortCol_' + i] = int (request.args.get ('iSortCol_' + i))
    
            if request.args.get ('bSortable_' + i):
                table_args ['bSortable_' + i] = request.args.get ('bSortable_' + i)
        
            if request.args.get ('sSortDir_' + i):
                table_args ['sSortDir_' + i] = request.args.get ('sSortDir_' + i)
            
    return table_args

"""
Decimal to Float 
"""
@app.template_filter ('dec_to_float')
def dec_to_float (dec):
    return float (dec)

"""
Change an integer duration to be represented as a data string 
"""
@app.template_filter ('time_to_date_str')
def time_to_date_str (time):
    return strftime ("%Y-%m-%d %H", localtime (time))

"""
Convert string to lower case 
"""
@app.template_filter ('to_lower_case')
def to_lower_case (str):
    return str.lower ()

"""
Convert string to upper case 
"""
@app.template_filter ('to_upper_case')
def to_upper_case (str):
    return str.upper ()

"""
Capitalizes first character of the String 
"""
@app.template_filter ('capitalize')
def capitalize (str):
    return str.capitalize ()

@app.errorhandler (404)
def page_not_found (error):
    return 'This page does not exist', 404

"""
Change an integer duration to be represented as d days h hours m mins s secs 
"""
@app.template_filter ('time_to_str')
def time_to_str (time):

    if time is not None and (isinstance (time, Decimal) or isinstance (time, float)):
        str_time = ''
        time = int (time)
        
        if time >= Utils.DAY:
            temp_time = time / Utils.DAY
            
            if temp_time > 1:
                str_time += str (temp_time) + ' days '
            else:
                str_time += str (time / Utils.DAY) + ' day '
            
            time = time % Utils.DAY
        
        if time >= Utils.HOUR:
            
            temp_time = time / Utils.HOUR
            
            if temp_time > 1:
                str_time += str (temp_time) + ' hours '
            else:
                str_time += str (time / Utils.HOUR) + ' hour '
            
            time = time % Utils.HOUR
            
        if time >= Utils.MIN:
            
            temp_time = time / Utils.MIN
            
            if temp_time > 1:
                str_time += str (temp_time) + ' mins '
            else:
                str_time += str (time / Utils.MIN) + ' min '
            
            time = time % Utils.MIN
            
        if time > 0:
            
            if time > 1:
                str_time += str (time) + ' secs '
            else:
                str_time += str (time) + ' sec '
                
        return str_time.strip ()
    
    else:
        
        return time

if __name__ == '__main__':

    usage = 'pegasus-dashboard [options]'
    description = 'pegasus-dashboard [npdfm]'
    
    parser = optparse.OptionParser (usage=usage, description=description)

    parser.add_option ("-n", "--host", action="store", type="str", dest="host", default='0.0.0.0', help="Hostname or IP address to bind to. Default: All IP's")
    parser.add_option ("-p", "--port", action="store", type="int", dest="port_number", default=8000, help="Port number on which to start the dash board Default: 8000")
    parser.add_option ("-d", "--debug", action="store_const", const=True, dest="debug", help="For development mode, only")
    parser.add_option ("-f", "--pidfile", action="store", type="str", dest="pid_filename", default='dashboard.pid', help="Location of PID file. Default: dashboard.pid")
    parser.add_option ("-m", "--masterdburl", action="store", type="str", dest="master_db", default='sqlite:///%s/.pegasus/workflow.db' % os.getenv('HOME'), help="URL to connect to the master the database")

    # Parsing command-line options
    (options, args) = parser.parse_args ()

    if not options.debug:
        if utils.pid_running (options.pid_filename):
            print 'Application already running'
        else:
            atexit.register (Utils.delete_pid_file, options.pid_filename)
            utils.write_pid_file (options.pid_filename)

    _master_db_url = options.master_db
    app.run (host=options.host, port=options.port_number, debug=options.debug)
