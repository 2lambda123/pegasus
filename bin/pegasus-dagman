#!/usr/bin/env python

"""
pegasus-dagman

This program is to be run as a replacement for condor_dagman inside of a submit file.
The dag can be submitted by running the command condor_submit_dag -dagman /path/to/pegasus-dagman my.dag

Usage: pegasus-dagman [options] 
"""

##
#  Copyright 2007-2010 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##
# Author : gmehta at isi dot edu
# Revision : $Revision$
__author__ = "Gaurang Mehta"

import os, sys
import time
import subprocess
import common                   # Takes care of setting up PEGASUS_HOME and PYTHONPATH
from Pegasus.tools.utils import find_exec

SLEEP_TIME = 30
MAX_MONITORD_LAUNCH = 5

'''
Launches the condor_dagman program with all the arguments passed to pegasus-dagman
'''
def dagman_launch(arguments):
    dagman_bin = find_exec("condor_dagman")
    if dagman_bin != None :
        arguments.insert(0, dagman_bin)
        try :
            dagman_proc = subprocess.Popen(arguments, env=os.environ, stdout=sys.stdout, stderr=sys.stderr)
            print "Launched Dagman with Pid %d" % dagman_proc.pid
        except OSError, err :
            print "Error: Could not launch Dagman." + err
            sys.exit(1)
    else :
        print "Error : Condor Dagman not found"
        sys.exit(127)
    return dagman_proc

'''
Launches Monitord in std daemon mode
'''
def monitord_launch():
    global MAX_MONITORD_LAUNCH
    if MAX_MONITORD_LAUNCH > 0 :
        monitord_bin = find_exec("pegasus-monitord")
        if monitord_bin != None :
            try :
                log = open('monitord.log', 'w')
                monitord_proc = subprocess.Popen([monitord_bin, "-N",os.getenv('_CONDOR_DAGMAN_LOG')],
                                                 env=os.environ, stdout=log, stderr=subprocess.STDOUT)
                print "Launched Monitord with Pid %d" % monitord_proc.pid
                return monitord_proc
            except OSError, err :
                print "Error: Could not launch Monitord." + err
        else :
            print "Error : pegausus-monitord not found"
    MAX_MONITORD_LAUNCH -= 1
    return None

#-- main--------------------------------------------------------------
    
if __name__ == "__main__":
    # Launch DAGMAN
    dagman = dagman_launch(sys.argv[1:])
    # Launch Monitord
    monitord = monitord_launch()
        
        
    dagman.poll()
    monitord.poll()
    
    while monitord.returncode == None or dagman.returncode == None :
        if dagman.returncode == None and monitord.returncode != None :
            # Dagman has not finished. We may need to restart monitord.
            monitord = monitord_launch()
        time.sleep(SLEEP_TIME)
        monitord.poll()
        dagman.poll()
        
    # Dagman and Monitord have exited. Lets exit pegasus-dagman with a merged returncode
    print "Dagman exited with code %d" % dagman.returncode
    print "Monitord exited with code %d" % monitord.returncode
    sys.exit(dagman.returncode & monitord.returncode)
