#!/usr/bin/env python

"""
pegasus-dagman

This program is to be run as a replacement for condor_dagman inside
of a submit file. The dag can be submitted by running the command
condor_submit_dag -dagman /path/to/pegasus-dagman my.dag

Usage: pegasus-dagman [options] 
"""

##
#  Copyright 2007-2010 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##
# Author : gmehta at isi dot edu
# Revision : $Revision$
__author__ = "Gaurang Mehta"
__author__ = "Mats Rynge"

import os, sys, signal, subprocess
import logging
import time
import math
import shutil

def find_prog(prog,dir=[]):
    def is_prog(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(prog)
    if fpath:
        if is_prog(prog):
            return prog
    else:
        for path in dir+os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, prog)
            if is_prog(exe_file):
                return exe_file
    return None

logger = logging.getLogger("pegasus-dagman")

# Use pegasus-config to find our lib path
bin_dir = os.path.normpath(os.path.join(os.path.dirname(sys.argv[0])))
pegasus_config = os.path.join(bin_dir, "pegasus-config")
lib_dir = subprocess.Popen([pegasus_config,"--noeoln","--python"], stdout=subprocess.PIPE, shell=False).communicate()[0]
lib_ext_dir = subprocess.Popen([pegasus_config,"--noeoln","--python-externals"], stdout=subprocess.PIPE, shell=False).communicate()[0]
print "Pegasus LIB %s" % lib_dir
print "Pegasus LIB %s" % lib_ext_dir
print "Pegasus BIN_DIR %s" % bin_dir
print "Pegasus DAGMAN is  %s" % sys.argv[0]

# Insert this directory in our search path
os.sys.path.insert(0, lib_dir)
os.sys.path.insert(0, lib_ext_dir)

from Pegasus.tools import utils
utils.configureLogging()

dagman = None
monitord = None
shadowq = None

def find_prog(name):
    PATH = os.getenv("PATH", "/bin:/usr/bin:/usr/local/bin")
    PATH = PATH.split(os.pathsep)
    PATH.insert(0, bin_dir)

    for path in PATH:
        exe = os.path.join(path, name)
        if os.path.isfile(exe) and os.access(exe, os.X_OK):
            return exe

    raise Exception("%s not found" % name)

def dagman_launch(dagman_bin):
    '''Launches the condor_dagman program with all
       the arguments passed to pegasus-dagman'''
    try:
        arguments = sys.argv[1:]
        arguments.insert(0, "condor_scheduniv_exec."+os.getenv("CONDOR_ID"))

        proc = subprocess.Popen(arguments,
                                stdout=sys.stdout,
                                stderr=sys.stderr,
                                executable=dagman_bin)

        logger.info("Launched Dagman with pid %d" % proc.pid)

        return proc
    except OSError, err:
        logger.error("Could not launch Dagman",  err)
        sys.exit(1)

def monitord_launch(monitord_bin):
    '''Launches Monitord in condor foreground mode'''
    try:
        # PM-688: Rotate log file, if it exists
        logfile = "monitord.log"
        utils.rotate_log_file(logfile)
        log = open(logfile, 'a')

        dagman_log = os.getenv('_CONDOR_DAGMAN_LOG')

        proc = subprocess.Popen([monitord_bin, "-N", dagman_log],
                                stdout=log,
                                stderr=subprocess.STDOUT)

        logger.info("Launched monitord with pid %d" % proc.pid)

        log.close()

        return proc
    except OSError, err:
        logger.error("Could not launch monitord", err)
        return None

def shadowq_launch(shadowq_bin):
    try:
        logfile = "shadowq.log"
        utils.rotate_log_file(logfile)
        log = open(logfile, 'a')

        dag_file = None
        for i in range(0, len(sys.argv)):
            if sys.argv[i] == "-Dag":
                dag_file = sys.argv[i+1]
                break

        proc = subprocess.Popen([shadowq_bin, dag_file],
                                stdout=log,
                                stderr=subprocess.STDOUT)

        logger.info("Launched shadowq with pid %d" % proc.pid)

        log.close()

        return proc
    except OSError, err:
        logger.error("Could not launch shadowq", err)
        return None

def is_dagman_copy_to_spool():
    '''Checks using condor_config_val if dagman_copy_to_spool is set
    then copy condor_dagman to the current dir "bin_dir" 
    '''
    condor_config_val = find_prog("condor_config_val")
    copy_to_spool = subprocess.Popen([condor_config_val,"DAGMAN_COPY_TO_SPOOL"], stdout=subprocess.PIPE, shell=False).communicate()[0]
    logger.info("DAGMAN_COPY_TO_SPOOL is set to %s" % copy_to_spool)
    return copy_to_spool.lower().strip() == "true"

def sighandler(signum, frame):
    ''' Signal handler to catch and pass SIGTERM, SIGABRT, SIGUSR1, SIGTERM '''
    print "pegasus-dagman caught SIGNAL", signum
    if dagman != None:
        os.kill(dagman.pid, signum)
    if monitord != None:
        if signum == signal.SIGUSR1:
            signum = signal.SIGINT
        os.kill(monitord.pid, signum)

if __name__ == "__main__":

    os.setpgid(0, 0)
    signal.signal(signal.SIGTERM, sighandler)
    signal.signal(signal.SIGINT, sighandler)
    signal.signal(signal.SIGABRT, sighandler)
    signal.signal(signal.SIGUSR1, sighandler)
    signal.signal(signal.SIGUSR2, sighandler)

    logger.info("Pegasus python lib: %s", lib_dir)
    logger.info("Pegasus external python lib: %s", lib_ext_dir)
    logger.info("Pegasus bin: %s", bin_dir)
    logger.info("pegasus-dagman: %s", sys.argv[0])

    dagman_bin = find_prog("condor_dagman")
    monitord_bin = find_prog("pegasus-monitord")
    shadowq_bin = find_prog("pegasus-shadow-queue")

    # If copy_to_spool is set, copy dagman binary to dag submit directory
    copy_to_spool = is_dagman_copy_to_spool()
    if copy_to_spool:
        old_dagman_bin = dagman_bin
        dagman_bin = os.path.join(os.getcwd(), "condor_scheduniv_exec."+os.getenv("CONDOR_ID"))
        shutil.copy2(old_dagman_bin, dagman_bin)
        logger.info("Copied condor_dagman from %s to %s" % (old_dagman_bin, dagman_bin))

    procs = {}

    dagman = dagman_launch(dagman_bin)
    if dagman is None:
        exit(1)
    procs[dagman.pid] = dagman

    monitord = monitord_launch(monitord_bin)
    if monitord is not None:
        procs[monitord.pid] = monitord

    shadowq = shadowq_launch(shadowq_bin)
    if shadowq is not None:
        procs[shadowq.pid] = shadowq

    while len(procs) > 0:
        pid, rc = os.wait()
        if pid in procs:
            p = procs.pop(pid)
            p.returncode = rc

    logger.info("Dagman exited with code %d", dagman.returncode)
    if monitord is not None:
        logger.info("Monitord exited with code %d", monitord.returncode)
    if shadowq is not None:
        logger.info("Shadow Queue exited with code %d", shadowq.returncode)

    if copy_to_spool:
        logger.info("Removing copied condor_dagman from submit directory %s", dagman_bin)
        os.remove(dagman_bin)

    sys.exit(dagman.returncode)

