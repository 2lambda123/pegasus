#!/usr/bin/env perl
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Authors Jens Voeckler voeckler@cs.uchicago.edu
#         Gaurang Mehta gmehta@isi.edu
# Revision : $Revision: 1.3 $

require 5.005;
use strict;
#use warnings;			# use only for devel+debugging
#use diagnostics;		# use only for devel+debugging
use File::Basename; 		# standard module since 5.005
use File::Spec;			# standard module since 5.005 or 5.6.0

# debug off
$main::debug = undef;
my $submitfile = shift || 
    die "ERROR: First argument must be a submit file.\n";
my $logfile = shift || 
    die "ERROR: Second argument must be the Condor logfile.\n";
my $bigfile=shift;
$main::debug=shift;

print "DEBUG=$main::debug\n";
warn "# sub=$submitfile, log=$logfile big=$bigfile\n" if $main::debug;

sub find_exec ($) {
    # purpose: determine location of a binary
    # paramtr: $program (IN): basename of the executable to look for
    # returns: fully qualified path to binary, undef if not found
    my $program = shift;
    local($_);
    foreach ( File::Spec->path ) {
        my $fs = File::Spec->catfile( $_, $program );
        return $fs if -x $fs;
    }
    undef;
}

sub exit_code ($$) {
    # purpose: check the exit code of a process
    # paramtr: $rc (IN): the raw exitcode
    #          $id (IN): some name to use in the generated messages
    # returns: undef: should not happen
    #          0: all is well
    #          1: non-zero exitcode
    #          2: died on signal
    my $rc = shift;
    my $id = shift;

    printf STDERR "# jobid=%s, exitcode=0x%04X\n", $id, $rc if $main::debug;
    if ( $rc == 0 ) {
	print "$id finished successfully (job=$main::id).\n";
	return 0;
    } elsif ( ($rc >> 8) ) {
	print "$id exited with exitcode ", $rc>>8, "\n";
	return 1;
    } elsif ( ($rc & 127) > 0 ) {
	print "$id died on signal ", $rc & 127, "\n";
	return 2;
    }

    undef;
}

sub pipe_io_cmd(\[$@*]@) {
    # purpose: Runs a cmd w/o invoking a shell, sends vector data to
    #          child's stdin and captures stdout+stderr
    # warning: DO NOT use shell meta characters in the argument string.
    # paramtr:    @input (IN): true vector from caller, input lines, no CRLF
    #          or $input (IN): CLOB of data to write, CRLF contained
    #          or *INPUT (IN): Perl FH for input to be read from (until EOF)
    #             @arg (IN): executable and its arguments
    # returns: failed: undef
    #          scalar: first line of output
    #          vector: all lines of output
    my $input = shift;
    die "missing executable" if @_ == 0;

    # must catch or ignore SIGPIPE
    local $SIG{PIPE} = 'IGNORE';

    # create the handles for communication with child
    local(*CIN,*PIN,*COUT,*POUT);
    unless ( pipe( CIN, PIN ) ) {
        warn "pipe in: $!\n";
        return undef;
    }
    # we are going to put stderr onto stdout later
    unless ( pipe( POUT, COUT ) ) {
        warn "pipe out: $!\n";
        close( PIN );
        close( CIN );
        return undef;
    }

    # finally, fork
    my $pid = fork();
    unless ( defined $pid ) {
        warn "fork: $!\n";
        close( PIN ); close( CIN );
        close( COUT ); close( POUT );
        return undef;
    }

    my @result;
    if ( $pid == 0 ) {
        # child process -- close dangling ends
        close( PIN );
        open( STDIN, ">&CIN" ) || exit(126); # dup2
        select STDIN; $|=1;
        
        close( POUT );
        open( STDERR, ">&COUT" ) || exit(126); # dup2
        select STDERR; $|=1;
        open( STDOUT, ">&COUT" ) || exit(126); # dup2
        select STDOUT; $|=1;

        exec { $_[0] } @_;
        exit 127;               # exec not found
    } else {
        # parent -- close dangling ends
        close( CIN );
        close( COUT );

        # write input data
        if ( defined $input ) {
            if ( ref($input) eq 'ARRAY' ) {
                # case @input
                foreach ( @{$input} ) {
                    warn "<< $_\n" if $main::debug;
                    print PIN "$_\n";
                }
            } elsif ( ref($input) eq 'SCALAR' ) {
                # case $input
                print PIN ${$input};
            } elsif ( ref($input) eq 'GLOB' ) {
                # case FH
                while ( <$input> ) {
                    print PIN $_;
                    chomp;
                    warn "<< $_\n" if $main::debug;
                }
            } else {
                # case ????
                warn 'Illegal input type ', ref($input), ", ignoring!\n";
            }
        } 
        close(PIN);

        # read what child has to say
        while ( <POUT> ) {      # long: ( defined ($_ = scalar <POUT>) )
            s/[\r\n]*$//;       # chomp
            push( @result, $_ );
            warn ">> $_\n" if $main::debug;
        }
        close(POUT);
    }

    # reap child
    while ( waitpid( $pid, 0 ) < 0 ) {
        warn "# waitpid: $!\n";
        last unless $! == 4;    # EINTR
    }

    # done
    wantarray ? @result : $result[0];
}


my %condor;			# location of certain Condor executables
foreach my $condor ( qw( condor_wait condor_submit condor_rm ) ) {
    $condor{$condor} = find_exec($condor) || 
	die "ERROR: Unable to determine location of $condor.\n";
    warn "# Found $condor{$condor}\n" if $main::debug;
}

sub handler {
    my $sig = shift;
    # you should not do this in signal handler, but what the heck
    warn "# Signal $sig found\n" if $main::debug;
    die "ERROR: Killed by SIG$sig\n";
}

$SIG{HUP} = \&handler;
$SIG{INT} = \&handler;
$SIG{TERM} = \&handler;
$SIG{QUIT} = \&handler;
$SIG{__DIE__} = sub {
    $SIG{__DIE__} = 'DEFAULT';	# reset die handler
    system( $condor{'condor_rm'}, $main::id ) if $main::id > 0;
    die @_;
};

sub get_submit_file{
#returns a file handle to a submit file from a big submit file
# param 1 = big submit file
# param 2 = submit file name
# returns filename of the temporary submit file.
    my $stdin='';
    if($bigfile ne "") {
	open(BIGFILE,"<$bigfile") || die "Error: Unable to open big file $bigfile";
	my $start="@\@$submitfile@@";
	my $end="queue";
	while (<BIGFILE>) {
	    if(/$start/../$end/) {
		if(!($_ =~ $start)) {
		    $stdin=$stdin.$_;
		}
	    }
	}
    } else {
	open(SUBFILE,"<$submitfile") || die "Error: Unable to open submit file $submitfile";
	while (<SUBFILE>) {
	    $stdin=$stdin.$_;
	}
    }
    return $stdin;
}


# submit


my ($rc,$errors,@result);
warn "# Running ", $condor{'condor_submit'}," -a ignore this\n"
    if $main::debug;

my $stdin=get_submit_file();
if ($main::debug) {
    my @lines=split("\n",$stdin);
    foreach (@lines) {
	warn "# $_\n";
    }
}
@result = pipe_io_cmd( $stdin,$condor{'condor_submit'},"-a","#ignore this");
foreach ( @result ) {
    if ( /^1 job\(s\) submitted to cluster (\d+)./ ) {
	$main::id = $1;
	warn "# id=$main::id\n" if $main::debug;
    } elsif ( /WARNING/ ) {
	die "ERROR: $_\n";
    } else {
	$errors .= $_;
    }
}
exit_code( $?, 'submit' );
die "ERROR: Failed to submit job\n$errors" 
    unless $main::id > 0;

# wait
$stdin=undef;
warn "# Running ", $condor{'condor_wait'}, " $logfile $main::id\n"
    if $main::debug;
@result = pipe_io_cmd($stdin, $condor{'condor_wait'}, $logfile, $main::id );
# check wait results
exit( exit_code($?, 'job') );
