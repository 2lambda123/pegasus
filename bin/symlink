#!/usr/bin/env perl
# Author Gaurang Mehta

use 5.006;
use strict;
use File::Basename;
use File::Path;
# some reasonable defaults


$main::DEBUG = 1;		# for now

#sub parse_exit(;$) {
#    # purpose: parse an exit code any way possible
    # paramtr: $ec (IN): exit code from $?
    # returns: string that shows what went wrong
#    my $ec = shift;
#    $ec=$? unless defined $ec;#
#
#    my $result;
#    if ( ($ec & 127) > 0 ) {
#        my $signo = ($ec & 127);
#        my $core = ( ($ec & 128) == 128 ? ' (core)' : '' );
#        $result = "died on signal $signo$core";
#    } elsif ( ($ec >> 8) > 0 ) {
#        $result = "exit code @{[$ec >> 8]}";
#    } else {
#        $result = "OK";
#    }
#    $result;
#}

#linenumber in the input file
my $linenum=0;
# number of src dest pairs found
my $pairs=0;
# number of transfer succeded
my $success=0;
# number of transfers failed
my $failures=0;
# source url
my $src=undef;
# dest url
my $dest=undef;


#open STDIN and read the input
while(<STDIN>){
    $linenum++;
    next if /^\#/; #skip comments
    s/^\s+//; # remove leading whitespace
    s/[ \r\n\t]+$//; #remove trailing whitespace + CRLF
    if(!defined($src)){
	$src=$_;
    }elsif (!defined($dest)){
	$dest=$_;
    }
    if(defined($src) && defined($dest)){
	$pairs++;
	print STDOUT "SRC URL: ", $src,"\n";
	print STDOUT "DES URL:" ,$dest,"\n";
	if($src =~ /^file\:\/\// && $dest =~ /^file\:\/\//){
	    $src =~ s/^file\:\/\/[a-zA-Z0-9\-\.]*//;
	    $dest =~ s/^file\:\/\/[a-zA-Z0-9\-\.]*//;

	    print STDOUT "CHOPPED SRC:", $src,"\n";
	    print STDOUT "CHOPPED DES:", $dest,"\n";

	    # make sure that the src exists
	    if (! -e $src) {
		print STDERR "SRC does not exist\n";
		$failures++;
	        $src=undef;
	        $dest=undef;
		next;
	    }
	    
	    # check and see if the files are the same
	    my $src_inode = (stat($src))[2];
	    my $dest_inode = (stat($dest))[2];
	    if ($src_inode == $dest_inode){
	        print STDOUT "SRC and DEST are same file\n";
		$success++;
	    } else {
		my $destdir=dirname($dest);
		if(! -d $destdir) {
		    my $res=mkpath($destdir);
		    	if ($res==1){
			    print STDOUT "MKDIR success\n";
			} else {
			    print STDERR "MKDIR ERROR\n";
			}
		    
		}
		if (-e $dest) {
	     		#remove existing link
		    unlink($dest);
		}
		
		# symlink source to dest
		my $res=symlink($src,$dest);
		if ($res==1){
		    print STDOUT "SYMLINK success\n";
		    $success++;
		} else {
		    print STDERR "SYMLINK ERROR ", $src, "->",$dest,"\n";
		    $failures++;
		}
	    }
	    # reset all the variables
	    $src=undef;
	    $dest=undef;
	}else{	    
	    print STDERR "One of the url's is not a file url. Use guc or curl to get the file\n";
	    $src=undef;
	    $dest=undef;
	    $failures++;
	}	
    }
}

print STDOUT "RESULTS: TOTAL [",$pairs,"] SUCCESS [",$success,"] FAILURES [",$failures,"]\n";

if($failures){
    exit 1;
}else{
    exit 0;
}
