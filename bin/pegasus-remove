#!/usr/bin/env perl
#
# This file or a portion of this file is licensed under the terms of
# the Globus Toolkit Public License, found in file GTPL, or at
# http://www.globus.org/toolkit/download/license.html. This notice must
# appear in redistributions of this file, with or without modification.
#
# Redistributions of this Software, with or without modification, must
# reproduce the GTPL in: (1) the Software, or (2) the Documentation or
# some other similar material which is provided with the Software (if
# any).
#
# Copyright 1999-2004 University of Chicago and The University of
# Southern California. All rights reserved.
#
# Author  Gaurang Mehta gmehta@isi.edu
# Revision : $Revision$

use 5.006;
use strict;
use Carp;
use File::Basename; 		# standard module since 5.005
use File::Spec;			# standard module since 5.005 or 5.6.0
use Getopt::Long qw(:config bundling no_ignore_case);
BEGIN { 
    require File::Spec->catfile( dirname($0), 'common.pm' );
    common->import(':all');
}
use Work::Common;

# debug off
$main::debug = 0;
$_ = '$Revision$';      # don't edit, automatically updated by CVS
$main::revision=$1 if /Revision:\s+([0-9.]+)/o;



sub myversion() {
    my $version = version();
    print "Pegasus $version, @{[basename($0)]} $main::revision\n";
    exit 0;
}


sub usage(;$) {
    my $msg = shift;
    print "ERROR: $msg\n" if defined $msg && lc($msg) ne 'help';

    print << "EOF";
Usage: @{[basename($0)]} -d <dagid> | dagdir
 Pegasus_remove helps remove your your entire workflow.. 
 -d|--dagid N    The id of the dag to be removed
 -v|--verbose   Enter verbose mode, default is not
 -V|--version   Print version number and exit.
 dagdir         The directory for the dag that you want removed
EOF
    exit(1);
}



sub handler {
    # purpose: generic signal handler
    # paramtr: whatever the OS sends a signal handler and Perl makes of it
    # returns: dies
    my $sig = shift;
    # you should not do this in signal handler, but what the heck
    warn "# Signal $sig found\n" if $main::debug;
    die "ERROR: Killed by SIG$sig\n";
}



#
# --- main
#

$SIG{HUP} = \&handler;
$SIG{INT} = \&handler;
$SIG{TERM} = \&handler;
$SIG{QUIT} = \&handler;


my $dagid=undef;
my $condor_rm=find_exec('condor_rm');

GetOptions( "dagid|d=s"    => \$dagid,
	    "version|V" => \&myversion,
	    "verbose|v" => \$main::debug,
	    "help|h|?" => \&usage );


my $run = shift;



if (defined $run){
# where were we...
    my $here = File::Spec->curdir();
    $SIG{'__DIE__'} = sub {
	chdir($here) if defined $here;
    };
    chdir($run) || die "ERROR: Cannot Change to directory $run: $!\n";

    my %config = slurp_braindb( $run ) or die "ERROR: Cannot Open braindb: $!\n";

    my $original;
    my @rescue = check_rescue($run,$config{dag});
    if ( @rescue > 0 ) {
	my (@stat,%rescue,$maxsize);
	foreach my $fn ( @rescue ) {
	    if ( (@stat = stat($fn)) > 0 ) {
		$rescue{$fn} = [ @stat ];
		$maxsize = $stat[7] if $maxsize < $stat[7];
	    }
	}
	
	print "\n\nDetected the presence of Rescue DAGs:\n";
	my $width = log10($maxsize);
	foreach my $fn ( @rescue ) {
	    printf( " %s %*u %s\n", 
		    isodate($rescue{$fn}[9]), 
		    $width, $rescue{$fn}[7], 
		    basename($fn) );
	}
	
	# overwrite with "latest" (read: longest basename) rescue DAG
	$original = $config{dag};
	$config{dag} = $rescue[$#rescue];
	print "\nWILL USE ", $config{dag}, "\n\n";
    }

    my $daglogfile=$config{dag}.".dagman.out";

    open(DID,"$daglogfile") || die "Error: Cannot open file $daglogfile: $! \n";
    while (<DID>) {
	if($_ =~ /\(CONDOR_DAGMAN\) STARTING UP/){
	    $dagid=(split /\./,  (split)[3],2)[1];
          }
    }
    chdir($here);
}


my @result;
my $args=undef;

## construct the command line string
if(defined $dagid){
    my @arg=($condor_rm,$dagid);
    warn "# Running @arg \n" if $main::debug;
## Run the command 
    @result=pipe_out_cmd(@arg);
## Print the output result
    print "$_\n" foreach ( @result );
    exit(parse_exit($?));
} else {
    usage("Error: You need to provide either a dagid or dagdirectory to remove the workflow\n");
}
