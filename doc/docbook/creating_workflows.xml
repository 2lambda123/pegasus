<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="creating_workflows">
  <title>Creating Workflows</title>

  <section id="abstract_workflows">
    <title>Abstract Workflows (DAX)</title>

    <para>The DAX is a description of an abstract workflow in XML format that
    is used as the primary input into Pegasus. The DAX schema is described in
    <ulink
    url="schemas/dax-3.4/dax-3.4.xsd">dax-3.4.xsd</ulink>
    The documentation of the schema and its elements can be found in <ulink
    url="schemas/dax-3.4/dax-3.4.html">dax-3.4.html</ulink>.</para>

    <para>A DAX can be created by all users with the DAX generating API in
    Java, Perl, or Python format</para>

    <note>
       We highly recommend using the DAX API. 
    </note>

    <para>Advanced users who can read XML schema definitions can generate a
    DAX directly from a script</para>

    <para>The sample workflow below incorporates some of the elementary graph
    structures used in all abstract workflows.</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">fan-out</emphasis>, <emphasis
        role="bold">scatter</emphasis>, and <emphasis
        role="bold">diverge</emphasis> all describe the fact that multiple
        siblings are dependent on fewer parents.</para>

        <para>The example shows how the <emphasis role="bold"> Job 2 and
        3</emphasis> nodes depend on <emphasis role="bold">Job 1</emphasis>
        node.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">fan-in</emphasis>, <emphasis
        role="bold">gather</emphasis>, <emphasis role="bold">join</emphasis>,
        and <emphasis role="bold">converge</emphasis> describe how multiple
        siblings are merged into fewer dependent child nodes.</para>

        <para>The example shows how the <emphasis role="bold">Job 4</emphasis>
        node depends on both <emphasis role="bold">Job 2 and Job 3</emphasis>
        nodes.</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">serial execution</emphasis> implies that
        nodes are dependent on one another, like pearls on a string.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">parallel execution</emphasis> implies that
        nodes can be executed in parallel</para>
      </listitem>
    </itemizedlist>

    <para><figure id="components_blackdiamond">
        <title>Sample Workflow</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/DiamondWorkflow.png"
                       valign="middle"/>
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>The example diamond workflow consists of four nodes representing
    jobs, and are linked by six files.</para>

    <itemizedlist>
      <listitem>
        <para>Required input files must be registered with the Replica catalog
        in order for Pegasus to find it and integrate it into the
        workflow.</para>
      </listitem>

      <listitem>
        <para>Leaf files are a product or output of a workflow. Output files
        can be collected at a location.</para>
      </listitem>

      <listitem>
        <para>The remaining files all have lines leading to them and
        originating from them. These files are products of some job steps
        (lines leading to them), and consumed by other job steps (lines
        leading out of them). Often, these files represent intermediary
        results that can be cleaned.</para>
      </listitem>
    </itemizedlist>

    <para>There are two main ways of generating DAX's</para>

    <orderedlist>
      <listitem>
        <para>Using a DAX generating API in <link
        linkend="api-java">Java</link>, <link linkend="api-perl">Perl</link>
        or <link linkend="api-python">Python</link>.</para>

        <para><emphasis role="bold">Note:</emphasis> We recommend this
        option.</para>
      </listitem>

      <listitem>
        <para>Generating XML directly from your script.</para>

        <para><emphasis role="bold">Note:</emphasis> This option should only
        be considered by advanced users who can also read XML schema
        definitions.</para>
      </listitem>
    </orderedlist>

    <para>One example for a DAX representing the example workflow can look
    like the following:</para>

    <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- generated on: 2016-01-21T10:36:39-08:00 --&gt;
&lt;!-- generated by: vahi [ ?? ] --&gt;
&lt;adag xmlns="http://pegasus.isi.edu/schema/DAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pegasus.isi.edu/schema/DAX http://pegasus.isi.edu/schema/dax-3.6.xsd" version="3.6" name="diamond" index="0" count="1"&gt;

&lt;!-- Section 1: Metadata attributes for the workflow (can be empty)  --&gt;

   &lt;metadata key="name"&gt;diamond&lt;/metadata&gt;
   &lt;metadata key="createdBy"&gt;Karan Vahi&lt;/metadata&gt;

&lt;!-- Section 2: Invokes - Adds notifications for a workflow (can be empty) --&gt;

   &lt;invoke when="start"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
   &lt;invoke when="at_end"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;

&lt;!-- Section 3: Files - Acts as a Replica Catalog (can be empty) --&gt;

   &lt;file name="f.a"&gt;
      &lt;metadata key="size"&gt;1024&lt;/metadata&gt;
      &lt;pfn url="file:///Volumes/Work/lfs1/work/pegasus-features/PM-902/f.a" site="local"/&gt;
   &lt;/file&gt;

&lt;!-- Section 4: Executables - Acts as a Transformaton Catalog (can be empty) --&gt;

   &lt;executable namespace="pegasus" name="preprocess" version="4.0" installed="true" arch="x86" os="linux"&gt;
      &lt;metadata key="size"&gt;2048&lt;/metadata&gt;
      &lt;pfn url="file:///usr/bin/keg" site="TestCluster"/&gt;
   &lt;/executable&gt;
   &lt;executable namespace="pegasus" name="findrange" version="4.0" installed="true" arch="x86" os="linux"&gt;
      &lt;pfn url="file:///usr/bin/keg" site="TestCluster"/&gt;
   &lt;/executable&gt;
   &lt;executable namespace="pegasus" name="analyze" version="4.0" installed="true" arch="x86" os="linux"&gt;
      &lt;pfn url="file:///usr/bin/keg" site="TestCluster"/&gt;
   &lt;/executable&gt;

&lt;!-- Section 5: Transformations - Aggregates executables and Files (can be empty) --&gt;


&lt;!-- Section 6: Job's, DAX's or Dag's - Defines a JOB or DAX or DAG (Atleast 1 required) --&gt;

   &lt;job id="j1" namespace="pegasus" name="preprocess" version="4.0"&gt;
      &lt;metadata key="time"&gt;60&lt;/metadata&gt;
      &lt;argument&gt;-a preprocess -T 60 -i  &lt;file name="f.a"/&gt; -o  &lt;file name="f.b1"/&gt;   &lt;file name="f.b2"/&gt;&lt;/argument&gt;
      &lt;uses name="f.a" link="input"&gt;
         &lt;metadata key="size"&gt;1024&lt;/metadata&gt;
      &lt;/uses&gt;
      &lt;uses name="f.b1" link="output" transfer="true" register="true"/&gt;
      &lt;uses name="f.b2" link="output" transfer="true" register="true"/&gt;
      &lt;invoke when="start"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
      &lt;invoke when="at_end"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
   &lt;/job&gt;
   &lt;job id="j2" namespace="pegasus" name="findrange" version="4.0"&gt;
      &lt;metadata key="time"&gt;60&lt;/metadata&gt;
      &lt;argument&gt;-a findrange -T 60 -i  &lt;file name="f.b1"/&gt; -o  &lt;file name="f.c1"/&gt;&lt;/argument&gt;
      &lt;uses name="f.b1" link="input"/&gt;
      &lt;uses name="f.c1" link="output" transfer="true" register="true"/&gt;
      &lt;invoke when="start"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
      &lt;invoke when="at_end"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
   &lt;/job&gt;
   &lt;job id="j3" namespace="pegasus" name="findrange" version="4.0"&gt;
      &lt;metadata key="time"&gt;60&lt;/metadata&gt;
      &lt;argument&gt;-a findrange -T 60 -i  &lt;file name="f.b2"/&gt; -o  &lt;file name="f.c2"/&gt;&lt;/argument&gt;
      &lt;uses name="f.b2" link="input"/&gt;
      &lt;uses name="f.c2" link="output" transfer="true" register="true"/&gt;
      &lt;invoke when="start"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
      &lt;invoke when="at_end"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
   &lt;/job&gt;
   &lt;job id="j4" namespace="pegasus" name="analyze" version="4.0"&gt;
      &lt;metadata key="time"&gt;60&lt;/metadata&gt;
      &lt;argument&gt;-a analyze -T 60 -i  &lt;file name="f.c1"/&gt;   &lt;file name="f.c2"/&gt; -o  &lt;file name="f.d"/&gt;&lt;/argument&gt;
      &lt;uses name="f.c1" link="input"/&gt;
      &lt;uses name="f.c2" link="input"/&gt;
      &lt;uses name="f.d" link="output" transfer="true" register="true"/&gt;
      &lt;invoke when="start"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
      &lt;invoke when="at_end"&gt;/pegasus/libexec/notification/email -t notify@example.com&lt;/invoke&gt;
   &lt;/job&gt;

&lt;!-- Section 7: Dependencies - Parent Child relationships (can be empty) --&gt;

   &lt;child ref="j2"&gt;
      &lt;parent ref="j1"/&gt;
   &lt;/child&gt;
   &lt;child ref="j3"&gt;
      &lt;parent ref="j1"/&gt;
   &lt;/child&gt;
   &lt;child ref="j4"&gt;
      &lt;parent ref="j2"/&gt;
      &lt;parent ref="j3"/&gt;
   &lt;/child&gt;
&lt;/adag&gt;</programlisting>

    <para>The example workflow representation in form of a DAX requires
    external catalogs, such as transformation catalog (TC) to resolve the
    logical job names (such as diamond::preprocess:2.0), and a replica catalog
    (RC) to resolve the input file <filename>f.a</filename>. The above
    workflow defines the four jobs just like the example picture, and the
    files that flow between the jobs. The intermediary files are neither
    registered nor staged out, and can be considered transient. Only the final
    result file <filename>f.d</filename> is staged out.</para>
  </section>

  <section id="replica">
    <title>Data Discovery (Replica Catalog)</title>

    <para>The Replica Catalog keeps mappings of logical file ids/names (LFN's)
    to physical file ids/names (PFN's). A single LFN can map to several PFN's.
    A PFN consists of a URL with protocol, host and port information and a
    path to a file. Along with the PFN one can also store additional key/value
    attributes to be associated with a PFN.</para>

    <para>Pegasus supports the following implementations of the Replica
    Catalog.</para>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">File</emphasis>(Default)</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Regex</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Directory</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Database via JDBC</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">MRC</emphasis></para>
      </listitem>
    </orderedlist>

    <section id="rc-FILE">
      <title>File</title>

      <para>In this mode, Pegasus queries a file based replica catalog. The
      file format is a simple multicolumn format. It is neither
      transactionally safe, nor advised to use for production purposes in any
      way. Multiple concurrent instances will conflict with each other. The
      site attribute should be specified whenever possible. The attribute key
      for the site attribute is <emphasis
      role="bold">"site".</emphasis></para>

      <programlisting>
LFN PFN
LFN PFN a=b [..]
LFN PFN a="b" [..]
"LFN w/LWS" "PFN w/LWS" [..]
      </programlisting>

      <para>The LFN may or may not be quoted. If it contains linear
      whitespace, quotes, backslash or an equal sign, it must be quoted and
      escaped. The same conditions apply for the PFN. The attribute key-value
      pairs are separated by an equality sign without any whitespaces. The
      value may be quoted. The LFN sentiments about quoting apply.</para>

      <para>The file mode is the Default mode. In order to use the File mode
      you have to set the following properties</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica=File</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.file=<replaceable>&lt;path to
            the replica catalog file&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="rc-regex">
      <title>Regex</title>

      <para>In this mode, Pegasus queries a file based replica catalog. The
      file format is a simple multicolumn format. It is neither
      transactionally safe purposes in any way. Multiple concurrent instances
      will conflict with each other. The site attribute should be specified
      whenever possible. The attribute key for the site attribute is <emphasis
      role="bold">"site".</emphasis></para>

      <para>In addition users can specifiy regular expression based LFN's. A
      regular expression based entry should be qualified with an attribute
      named 'regex'. The attribute regex when set to true identifies the
      catalog entry as a regular expression based entry. Regular expressions
      should follow Java regular expression syntax.</para>

      <para>For example, consider a replica catalog as shown below.</para>

      <para>Entry 1 refers to an entry which does not use a regular
      expressions. This entry would only match a file named 'f.a', and nothing
      else.</para>

      <para>Entry 2 referes to an entry which uses a regular expression. In
      this entry f.a referes to files having name as f&lt;any-character&gt;a
      i.e. faa, f.a, f0a, etc.</para>

      <programlisting>#1
f.a file:///Volumes/data/input/f.a site="local"
#2
f.a file:///Volumes/data/input/f.a site="local" <emphasis role="bold">regex</emphasis>="true"
</programlisting>

      <para>Regular expression based entries also support substitutions. For
      example, consider the regular expression based entry shown below.</para>

      <para>Entry 3 will match files with name alpha.csv, alpha.txt,
      alpha.xml. In addition, values matched in the expression can be used to
      generate a PFN.</para>

      <para>For the entry below if the file being looked up is alpha.csv, the
      PFN for the file would be generated as
      file:///Volumes/data/input/csv/alpha.csv. Similary if the file being
      lookedup was alpha.csv, the PFN for the file would be generated as
      file:///Volumes/data/input/xml/alpha.xml i.e. The section [0], [1] will
      be replaced. Section [0] refers to the entire string i.e. alpha.csv.
      Section [1] refers to a partial match in the input i.e. csv, or txt, or
      xml. Users can utilize as many sections as they wish.</para>

      <programlisting>#3
alpha\.(csv|txt|xml) file:///Volumes/data/input/<emphasis role="bold">[1]</emphasis>/<emphasis
          role="bold">[0]</emphasis> site="local" <emphasis role="bold">regex</emphasis>="true"</programlisting>

      <para>In case of a LFN name matching multiple entries in the file, the
      implementation picks up the first matching regex as it appears in the
      file. If you want to specify a default location for all LFN's that don't
      match any regex expression, you can have this entry as the last entry in
      your file.</para>

      <programlisting>#4 all unmatched LFN's reside in the same input directory.

.*     file:///Volumes/data/input/<emphasis role="bold">[0]</emphasis> site="local" <emphasis
          role="bold">regex</emphasis>="true"</programlisting>
    </section>

    <section id="rc-directory">
      <title>Directory</title>

      <para>In this mode, Pegasus does a directory listing on an input
      directory to create the LFN to PFN mappings. The directory listing is
      performed recursively, resulting in deep LFN mappings. For example, if
      an input directory $input is specified with the following
      structure</para>

      <programlisting>$input
$input/f.1
$input/f.2
$input/D1
$input/D1/f.3</programlisting>

      <para>Pegasus will create the mappings the following LFN PFN mappings
      internally</para>

      <programlisting>f.1 file://$input/f.1  site="local"
f.2 file://$input/f.2  site="local"
D1/f.3 file://$input/D1/f.3 site="local"</programlisting>

      <para>Users can optionally specify additional properties to configure
      the behavior of this implementation.</para>

      <orderedlist>
        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.directory</emphasis> to specify
          the path to the directory where the files exist.</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.directory.site</emphasis> to
          specify a site attribute other than local to associate with the
          mappings.</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.directory.flat.lfn</emphasis> to
          specify whether you want deep LFN's to be constructed or not. If not
          specified, value defaults to false i.e. deep lfn's are constructed
          for the mappings.</para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.directory.url.prefix</emphasis>
          to associate a URL prefix for the PFN's constructed. If not
          specified, the URL defaults to file://</para>
        </listitem>
      </orderedlist>

      <tip>
        <para>pegasus-plan has -<emphasis role="bold">-input-dir</emphasis>
        option that can be used to specify an input directory on the command
        line. This allows you to specify a separate replica catalog to catalog
        the locations of output files.</para>
      </tip>
    </section>

    <section id="rc-JDBCRC">
      <title>JDBCRC</title>

      <para>In this mode, Pegasus queries a SQL based replica catalog that is
      accessed via JDBC. To create the schema for JDBCRC use the <link
      linkend="cli-pegasus-db-admin">pegasus-db-admin</link> command line
      tool.</para>

      <note>
        <para>A site attribute was added to the SQL schema as a unique key for
        4.4. To update an existing database schema, use pegasus-db-admin
        tool.</para>

        <figure>
          <title>Schema Image of the JDBCRC.</title>

          <mediaobject>
            <imageobject>
              <imagedata fileref="images/jdbcrc-schema.png" width="4in"/>
            </imageobject>
          </mediaobject>
        </figure>
      </note>

      <para>To use JDBCRC, the user additionally needs to set the following
      properties</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">pegasus.catalog.replica JDBCRC
          </emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">pegasus.catalog.replica.db.driver mysql
          | sqlite </emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.url=<replaceable>&lt;jdbc url
          to the database&gt; e.g
          jdbc:mysql://database-host.isi.edu/database-name |
          jdbc:sqlite:/shared/jdbcrc.db </replaceable></emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.user=<replaceable>&lt;database
          user&gt;</replaceable></emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.password=<replaceable>&lt;database
          password&gt;</replaceable></emphasis></para>
        </listitem>
      </orderedlist>

      <para>Users can use the command line client
      <emphasis>pegasus-rc-client</emphasis> to interface to query, insert and
      remove entries from the JDBCRC backend. Starting 4.5 release, there is
      also support for sqlite databases. Specify the jdbc url to refer to a
      sqlite database .</para>
    </section>

    <section id="rc-MRC">
      <title>MRC</title>

      <para>In this mode, Pegasus queries multiple replica catalogs to
      discover the file locations on the grid.</para>

      <para>To use it set</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica=<replaceable>MRC</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>

      <para>Each associated replica catalog can be configured via properties
      as follows.</para>

      <para>The user associates a variable name referred to as [value] for
      each of the catalogs, where [value] is any legal identifier (concretely
      [A-Za-z][_A-Za-z0-9]*) For each associated replica catalogs the user
      specifies the following properties</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">pegasus.catalog.replica.mrc.[value]
          </emphasis>- specifies the type of replica catalog.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">pegasus.catalog.replica.mrc.[value].key
          </emphasis>- specifies a property name key for a particular
          catalog</para>
        </listitem>
      </itemizedlist>

      <para>For example, to query a File catalog and JDBCRC at the same time
      specify the following:</para>

      <para><itemizedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica=MRC</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.mrc.jdbcrc=JDBCRC</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.mrc.jdbcrc.url=<replaceable>&lt;jdbc
            url &gt;</replaceable></emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.mrc.file1=File</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.mrc.file1.url=</emphasis><emphasis
            role="bold">&lt;path to file based replica
            catalog&gt;</emphasis></para>
          </listitem>
        </itemizedlist></para>

      <para>In the above example,<emphasis role="bold"> jdbcrc</emphasis> and
      <emphasis role="bold"> file1</emphasis> are any valid identifier names
      and <emphasis role="bold">url</emphasis> is the property key that needed
      to be specified.</para>

      <para>Another example is to use MRC with multiple input directories.
      Sample properties for that configuration are listed below</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">pegasus.catalog.replica=MRC
          </emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory1=Directory
          </emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory1.directory=/path/to/dir1</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory1.directory.site=obelix</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory2=Directory</emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory2.directory=/path/to/dir2
          </emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.mrc.directory2.directory.site=corbusier</emphasis></para>
        </listitem>
      </itemizedlist>

      <section id="pegasus-rc-client">
        <title>Replica Catalog Client pegasus-rc-client</title>

        <para>The client used to interact with the Replica Catalogs is
        pegasus-rc-client. The implementation that the client talks to is
        configured using Pegasus properties.</para>

        <para>Lets assume we create a file f.a in your home directory as shown
        below.</para>

        <screen><command>$ date &gt; $HOME/f.a </command></screen>

        <para>We now need to register this file in the <emphasis
        role="bold">File</emphasis> replica catalog located in <emphasis
        role="bold">$HOME/rc</emphasis> using the pegasus-rc-client. Replace
        the <emphasis role="bold">gsiftp://url</emphasis> with the appropriate
        parameters for your grid site.</para>

        <screen><emphasis>$<command> pegasus-rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc insert \
 f.a</command> <replaceable>gsiftp://somehost:port/path/to/file/f.a site=local</replaceable></emphasis></screen>

        <para>You may first want to verify that the file registeration is in
        the replica catalog. Since we are using a File catalog we can look at
        the file <emphasis role="bold">$HOME/rc</emphasis> to view
        entries.</para>

        <screen><command>$ cat $HOME/rc</command><computeroutput>
    
# file-based replica catalog: 2010-11-10T17:52:53.405-07:00
f.a gsiftp://somehost:port/path/to/file/f.a site=local</computeroutput></screen>

        <para>The above line shows that entry for file <emphasis
        role="bold">f.a</emphasis> was made correctly.</para>

        <para>You can also use the <emphasis
        role="bold">pegasus-rc-client</emphasis> to look for entries.</para>

        <screen><command>$ pegasus-rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc lookup LFN f.a</command><computeroutput>

f.a gsiftp://somehost:port/path/to/file/f.a site=local</computeroutput></screen>
      </section>
    </section>
  </section>

  <section id="site">
    <title>Resource Discovery (Site Catalog)</title>

    <para>The Site Catalog describes the compute resources (which are often
    clusters) that we intend to run the workflow upon. A site is a homogeneous
    part of a cluster that has at least a single GRAM gatekeeper with a
    <emphasis role="bold">jobmanager-fork</emphasis>
    and<emphasis>jobmanager-&lt;scheduler&gt; </emphasis> interface and at
    least one <emphasis role="bold">gridftp</emphasis> server along with a
    shared file system. The GRAM gatekeeper can be either WS GRAM or Pre-WS
    GRAM. A site can also be a condor pool or glidein pool with a shared file
    system.</para>

    <para>The Site Catalog can be described as an XML . Pegasus currently
    supports two schemas for the Site Catalog:</para>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">XML4</emphasis>(Default) Corresponds to
        the schema described <ulink
        url="schemas/sc-4.0/sc-4.0.html">here</ulink>.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">XML3</emphasis>(Deprecated) Corresponds to
        the schema described <ulink
        url="schemas/sc-3.0/sc-3.0.html">here</ulink></para>
      </listitem>
    </orderedlist>

    <section id="sc-XML4">
      <title>XML4</title>

      <para>This is the default format for Pegasus 4.2. This format allows
      defining filesystem of shared as well as local type on the head node of
      the remote cluster as well as on the backend nodes</para>

      <figure>
        <title>Schema Image of the Site Catalog XML4</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sc-4.0_p2.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Below is an example of the XML4 site catalog</para>

      <programlisting>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog http://pegasus.isi.edu/schema/sc-4.0.xsd"
             version="4.0"&gt;

    &lt;site  handle="local" arch="x86_64" os="LINUX"&gt;
        &lt;directory type="shared-scratch" path="/tmp/workflows/scratch"&gt;
            &lt;file-server operation="all" url="file:///tmp/workflows/scratch"/&gt;
        &lt;/directory&gt;
        &lt;directory type="local-storage" path="/tmp/workflows/outputs"&gt;
            &lt;file-server operation="all" url="file:///tmp/workflows/outputs"/&gt;
        &lt;/directory&gt;
    &lt;/site&gt;

    &lt;site  handle="condor_pool" arch="x86_64" os="LINUX"&gt;
        &lt;grid type="gt5" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="auxillary"/&gt;
        &lt;grid type="gt5" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="compute"/&gt;
        &lt;directory type="shared-scratch" path="/lustre"&gt;
            &lt;file-server operation="all" url="gsiftp://smarty.isi.edu/lustre"/&gt;
        &lt;/directory&gt;
        &lt;replica-catalog type="LRC" url="rlsn://smarty.isi.edu"/&gt;
    &lt;/site&gt;

    &lt;site  handle="staging_site" arch="x86_64" os="LINUX"&gt;
        &lt;directory type="shared-scratch" path="/data"&gt;
            &lt;file-server operation="put" url="scp://obelix.isi.edu/data"/&gt;
            &lt;file-server operation="get" url="http://obelix.isi.edu/data"/&gt;
        &lt;/directory&gt;
    &lt;/site&gt;

&lt;/sitecatalog&gt;
      </programlisting>

      <para>Described below are some of the entries in the site
      catalog.</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis role="bold">site</emphasis> - A site
            identifier.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Directory</emphasis> - Info about
            filesystems Pegasus can use for storing temporary and long-term
            files. There are several configurations:</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">shared-scratch</emphasis> - This
                describe a scratch file systems. Pegasus will use this to
                store intermediate data between jobs and other temporary
                files.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">local-storage</emphasis> - This
                describes the storage file systems (long term). This is the
                directory Pegasus will stage output files to.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">local-scratch</emphasis> - This
                describe the scratch file systems available locally on a
                compute node. This parameter is not commonly used and can be
                left unset in most cases.</para>
              </listitem>
            </itemizedlist>

            <para>For each of the directories, you can specify access methods.
            Allowed methods are <emphasis role="bold">put</emphasis>,
            <emphasis role="bold">get</emphasis>, and <emphasis
            role="bold">all</emphasis> which means both put and get. For each
            mehod, specify a URL including the protocol. For example, if you
            want share data via http using the /var/www/staging directory, you
            can use scp://hostname/var/www for the put element and
            http://hostname/staging for the get element.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">arch,os,osrelease,osversion,
            glibc</emphasis> - The arch/os/osrelease/osversion/glibc of the
            site. OSRELEASE, OSVERSION and GLIBC are optional</para>

            <para>ARCH can have one of the following values X86, X86_64,
            SPARCV7, SPARCV9, AIX, PPC.</para>

            <para>OS can have one of the following values LINUX,SUNOS,MACOSX.
            The default value for sysinfo if none specified is
            X86::LINUX</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">replica-catalog</emphasis> - URL for a
            local replica catalog (LRC) to register your files in. Only used
            for RLS implementation of the RC. This is optional and support for
            RLS has been dropped in Pegasus 4.5.0 release.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Profiles</emphasis> - One or many
            profiles can be attached to a site.</para>

            <para>One example is the environments to be set on a remote
            site.</para>
          </listitem>
        </orderedlist></para>

      <para>To use this site catalog the follow properties need to be
      set:</para>

      <orderedlist>
        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.site.file=<replaceable>&lt;path to the
          site catalog file&gt;</replaceable></emphasis></para>
        </listitem>
      </orderedlist>
    </section>

    <section id="sc-XML3">
      <title>XML3</title>

      <para><warning>
          <para>This format is now deprecated in favor of the XML4 format. If
          you are still using the File format you should convert it to XML4
          format using the client pegasus-sc-converter</para>
        </warning></para>

      <para>This is the default format for Pegasus 3.0. This format allows
      defining filesystem of shared as well as local type on the head node of
      the remote cluster as well as on the backend nodes</para>

      <figure>
        <title>Schema Image of the Site Catalog XML 3</title>

        <mediaobject>
          <imageobject>
            <imagedata fileref="images/sc-3.0_p2.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Below is an example of the XML3 site catalog</para>

      <programlisting>&lt;sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog 
http://pegasus.isi.edu/schema/sc-3.0.xsd" version="3.0"&gt;
  &lt;site  handle="isi" arch="x86" os="LINUX" osrelease="" osversion="" glibc=""&gt;
      &lt;grid  type="gt2" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="auxillary"/&gt;
      &lt;grid  type="gt2" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="compute"/&gt;
          &lt;head-fs&gt;
               &lt;scratch&gt;
                  &lt;shared&gt;
                     &lt;file-server protocol="gsiftp" url="gsiftp://skynet-data.isi.edu"
                                  mount-point="/nfs/scratch01" /&gt;
                     &lt;internal-mount-point mount-point="/nfs/scratch01"/&gt;
                  &lt;/shared&gt;
               &lt;/scratch&gt;
               &lt;storage&gt;
                  &lt;shared&gt;
                     &lt;file-server protocol="gsiftp" url="gsiftp://skynet-data.isi.edu" 
                                  mount-point="/exports/storage01"/&gt;
                     &lt;internal-mount-point mount-point="/exports/storage01"/&gt;
                  &lt;/shared&gt;
               &lt;/storage&gt;
          &lt;/head-fs&gt;
      &lt;replica-catalog  type="LRC" url="rlsn://smarty.isi.edu"/&gt;
      &lt;profile namespace="env" key="PEGASUS_HOME" &gt;/nfs/vdt/pegasus&lt;/profile&gt;
      &lt;profile namespace="env" key="GLOBUS_LOCATION" &gt;/vdt/globus&lt;/profile&gt;
  &lt;/site&gt;
&lt;/sitecatalog&gt;</programlisting>

      <para>Described below are some of the entries in the site
      catalog.</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis role="bold">site</emphasis> - A site
            identifier.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">replica-catalog</emphasis> - URL for a
            local replica catalog (LRC) to register your files in. Only used
            for RLS implementation of the RC. This is optional and support for
            RLS has been dropped in Pegasus 4.5.0.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">File Systems</emphasis> - Info about
            filesystems mounted on the remote clusters head node or worker
            nodes. It has several configurations</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="bold">head-fs/scratch</emphasis> - This
                describe the scratch file systems (temporary for execution)
                available on the head node</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">head-fs/storage</emphasis> - This
                describes the storage file systems (long term) available on
                the head node</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">worker-fs/scratch</emphasis> -
                This describe the scratch file systems (temporary for
                execution) available on the worker node</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold">worker-fs/storage</emphasis> -
                This describes the storage file systems (long term) available
                on the worker node</para>
              </listitem>
            </itemizedlist>

            <para>Each scratch and storage entry can contain two sub
            entries,</para>

            <itemizedlist>
              <listitem>
                <para><emphasis role="bold"/> SHARED for shared file systems
                like NFS, LUSTRE etc.</para>
              </listitem>

              <listitem>
                <para><emphasis role="bold"/> LOCAL for local file systems
                (local to the node/machine)</para>
              </listitem>
            </itemizedlist>

            <para>Each of the filesystems are defined by used a file-server
            element. Protocol defines the protocol uses to access the files,
            URL defines the url prefix to obtain the files from and
            mount-point is the mount point exposed by the file server.</para>

            <para>Along with this an internal-mount-point needs to defined to
            access the files directly from the machine without any file
            servers.</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">arch,os,osrelease,osversion,
            glibc</emphasis> - The arch/os/osrelease/osversion/glibc of the
            site. OSRELEASE, OSVERSION and GLIBC are optional</para>

            <para>ARCH can have one of the following values X86, X86_64,
            SPARCV7, SPARCV9, AIX, PPC.</para>

            <para>OS can have one of the following values LINUX,SUNOS,MACOSX.
            The default value for sysinfo if none specified is
            X86::LINUX</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Profiles</emphasis> - One or many
            profiles can be attached to a pool.</para>

            <para>One example is the environments to be set on a remote
            pool.</para>
          </listitem>
        </orderedlist></para>

      <para>To use this site catalog the follow properties need to be
      set:</para>

      <orderedlist>
        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.site.file=<replaceable>&lt;path to the
          site catalog file&gt;</replaceable></emphasis></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Site Catalog Converter pegasus-sc-converter</title>

      <para>Pegasus 4.2 by default now parses Site Catalog format conforming
      to the SC schema 4.0 (XML4) available <ulink role=""
      url="schemas/sc-4.0/sc-4.0.xsd"
      userlevel="">here</ulink> and is explained in detail in the Catalog
      Properties section of <link linkend="running_workflows">Running
      Workflows</link>.</para>

      <para>Pegasus 4.2 comes with a pegasus-sc-converter that will convert
      users old site catalog (XML3) to the XML4 format. Sample usage is given
      below.</para>

      <programlisting><emphasis role="bold">$ pegasus-sc-converter -i sample.sites.xml -I XML3 -o sample.sites.xml4 -O XML4
</emphasis>
2010.11.22 12:55:14.169 PST:   Written out the converted file to sample.sites.xml4
</programlisting>

      <para>To use the converted site catalog, in the properties do the
      following:</para>

      <orderedlist>
        <listitem>
          <para>unset pegasus.catalog.site or set pegasus.catalog.site to
          XML</para>
        </listitem>

        <listitem>
          <para>point pegasus.catalog.site.file to the converted site
          catalog</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section id="transformation">
    <title>Executable Discovery (Transformation Catalog)</title>

    <para>The Transformation Catalog maps logical transformations to physical
    executables on the system. It also provides additional information about
    the transformation as to what system they are compiled for, what profiles
    or environment variables need to be set when the transformation is invoked
    etc.</para>

    <para>Pegasus currently supports two implementations of the Transformation
    Catalog</para>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">Text: </emphasis>A multiline text based
        Transformation Catalog (DEFAULT)</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">File:</emphasis> A simple multi column
        text based Transformation Catalog</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Database:</emphasis> A database backend
        (MySQL or PostgreSQL) via JDB</para>
      </listitem>
    </orderedlist>

    <para>In this guide we will look at the format of the Multiline Text based
    TC.</para>

    <section id="tc-Text">
      <title>MultiLine Text based TC (Text)</title>

      <para>The multile line text based TC is the new default TC in Pegasus.
      This format allows you to define the transformations</para>

      <para>The file is read and cached in memory. Any modifications, as
      adding or deleting, causes an update of the memory and hence to the file
      underneath. All queries are done against the memory representation. The
      file sample.tc.text in the etc directory contains an example</para>

      <para><programlisting>tr example::keg:1.0 { 

#specify profiles that apply for all the sites for the transformation 
#in each site entry the profile can be overriden 

  profile env "APP_HOME" "/tmp/myscratch"
  profile env "JAVA_HOME" "/opt/java/1.6"

  site isi {
    profile env "HELLo" "WORLD"
    profile condor "FOO" "bar"
    profile env "JAVA_HOME" "/bin/java.1.6"
    pfn "/path/to/keg"
    arch "x86"
    os "linux"
    osrelease "fc"
    osversion "4"
    type "INSTALLED"
  }

  site wind {
    profile env "CPATH" "/usr/cpath"
    profile condor "universe" "condor"
    pfn "file:///path/to/keg"
    arch "x86"
    os "linux"
    osrelease "fc"
    osversion "4"
    type "STAGEABLE"
  }
}</programlisting></para>

      <para>The entries in this catalog have the following meaning</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis role="bold">tr</emphasis> tr - A transformation
            identifier. (Normally a Namespace::Name:Version.. The Namespace
            and Version are optional.)</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">pfn</emphasis> - URL or file path for
            the location of the executable. The pfn is a file path if the
            transformation is of type INSTALLED and generally a url (file:///
            or http:// or gridftp://) if of type STAGEABLE</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">site</emphasis> - The site identifier
            for the site where the transformation is available</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">type</emphasis> - The type of
            transformation. Whether it is Iinstalled ("INSTALLED") on the
            remote site or is availabe to stage ("STAGEABLE").</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">arch, os, osrelease,
            osversion</emphasis> - The arch/os/osrelease/osversion of the
            transformation. osrelease and osversion are optional.</para>

            <para>ARCH can have one of the following values x86, x86_64,
            sparcv7, sparcv9, ppc, aix. The default value for arch is
            x86</para>

            <para>OS can have one of the following values linux,sunos,macosx.
            The default value for OS if none specified is linux</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">Profiles</emphasis> - One or many
            profiles can be attached to a transformation for all sites or to a
            transformation on a particular site.</para>
          </listitem>
        </orderedlist></para>

      <para>To use this format of the Transformation Catalog you need to set
      the following properties</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation=Text</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.file=<replaceable>&lt;path
            to the transformation catalog
            file&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="tc-File">
      <title>Singleline Text based TC (File)</title>

      <warning>
        <para>This format is now deprecated in favor of the multiline TC. If
        you are still using the single line TC you should convert it to
        multiline using the tc-converter client.</para>
      </warning>

      <para>The format of the this TC is as follows.</para>

      <programlisting>#site  logicaltr   physicaltr   type  system  profiles(NS::KEY="VALUE")

site1 sys::date:1.0 /usr/bin/date  INSTALLED INTEL32::LINUX:FC4.2:3.6 ENV::PATH="/usr/bin";PEGASUS_HOME="/usr/local/pegasus"</programlisting>

      <para>The system and profile entries are optional and will use default
      values if not specified. The entries in the file format have the
      following meaning:</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold">site</emphasis> - A site
          identifier.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">logicaltr</emphasis> - The logical
          transformation name. The format is NAMESPACE::NAME:VERSION where
          NAMESPACE and NAME are optional.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">physicaltr</emphasis> - The physical
          transformation path or URL.</para>

          <para>If the transformation type is INSTALLED then it needs to be an
          absolute path to the executable. If the type is STAGEABLE then the
          path needs to be a HTTP, FTP or gsiftp URL</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">type</emphasis> - The type of
          transformation. Can have on of two values</para>

          <itemizedlist>
            <listitem>
              <para><emphasis role="bold">INSTALLED</emphasis>: This means
              that the transformation is installed on the remote site</para>
            </listitem>

            <listitem>
              <para><emphasis role="bold">STAGEABLE</emphasis>: This means
              that the transformation is available as a static binary and can
              be staged to a remote site.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis role="bold">system</emphasis> - The system for which
          the transformation is compiled.</para>

          <para>The formation of the sytem is ARCH::OS:OSVERSION:GLIBC where
          the GLIBC and OS VERSION are optional. ARCH can have one of the
          following values INTEL32, INTEL64, SPARCV7, SPARCV9, AIX, AMD64. OS
          can have one of the following values LINUX,SUNOS. The default value
          for system if none specified is INTEL32::LINUX</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Profiles</emphasis> - The profiles
          associated with the transformation. For indepth information about
          profiles and their priorities read the Profile Guide.</para>

          <para>The format for profiles is NS::KEY="VALUE" where NS is the
          namespace of the profile e.g. Pegasus,condor,DAGMan,env,globus. The
          key and value can be any strings. Remember to quote the value with
          double quotes. If you need to specify several profiles you can do it
          in several ways</para>

          <itemizedlist>
            <listitem>
              <para>NS1::KEY1="VALUE1",KEY2="VALUE2";NS2::KEY3="VALUE3",KEY4="VALUE4"</para>

              <para>This is the most optimized form. Multiple key values for
              the same namespace are separated by a comma "," and different
              namespaces are separated by a semicolon ";"</para>
            </listitem>

            <listitem>
              <para>NS1::KEY1="VALUE1";NS1::KEY2="VALUE2";NS2::KEY3="VALUE3";NS2::KEY4="VALUE4"</para>

              <para>You can also just repeat the triple of NS::KEY="VALUE"
              separated by semicolons for a simple format;</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>

      <para>To use this format of the Transformation Catalog you need to set
      the following properties</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation=File</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.file=<replaceable>&lt;path
            to the transformation catalog
            file&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="tc-Database">
      <title>Database TC (Database)</title>

      <para>The database TC alows you to use a relational database. To use the
      database TC you need to have installed a MySQL or PostgreSQL server. The
      schema for the database is available in $PEGASUS_HOME/sql directory. You
      will have to install the schema into either PostgreSQL or MySQL by
      running the appropriate commands to load the two scheams <emphasis
      role="bold">create-XX-init.sql</emphasis> and <emphasis
      role="bold">create-XX-tc.sql</emphasis> where XX is either <emphasis
      role="bold">my</emphasis> (for MySQL) or <emphasis
      role="bold">pg</emphasis> (for PostgreSQL)</para>

      <para>To use the Database TC you need to set the following
      properties</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.db.driver=MySQL |
            Postgres</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.db.url=<replaceable>&lt;jdbc
            url to the databse&gt;</replaceable></emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.db.user=<replaceable>&lt;database
            user&gt;</replaceable></emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.transformation.db.password=<replaceable>&lt;database
            password&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section id="pegasus-tc-client">
      <title>TC Client pegasus-tc-client</title>

      <para>We need to map our declared transformations (preprocess,
      findranage, and analyze) from the example DAX above to a simple "mock
      application" name "keg" ("canonical example for the grid") which reads
      input files designated by arguments, writes them back onto output files,
      and produces on STDOUT a summary of where and when it was run. Keg ships
      with Pegasus in the bin directory. Run keg on the command line to see
      how it works.</para>

      <screen><command>$ keg -o /dev/fd/1</command>
<computeroutput>
Timestamp Today: 20040624T054607-05:00 (1088073967.418;0.022)
Applicationname: keg @ 10.10.0.11 (VPN)
Current Workdir: /home/unique-name
Systemenvironm.: i686-Linux 2.4.18-3
Processor Info.: 1 x Pentium III (Coppermine) @ 797.425
Output Filename: /dev/fd/1</computeroutput></screen>

      <para>Now we need to map all 3 transformations onto the "keg"
      executable. We place these mappings in our File transformation catalog
      for site clus1.</para>

      <note>
        <para>In earlier version of Pegasus users had to define entries for
        Pegasus executables such as transfer, replica client, dirmanager, etc
        on each site as well as site "local". This is no longer required.
        Pegasus versions 2.0 and later automatically pick up the paths for
        these binaries from the environment profile PEGASUS_HOME set in the
        site catalog for each site.</para>

        <para>A single entry needs to be on one line. The above example is
        just formatted for convenience.</para>
      </note>

      <para>Alternatively you can also use the pegasus-tc-client to add
      entries to any implementation of the transformation catalog. The
      following example shows the addiition the last entry in the File based
      transformation catalog.</para>

      <screen><command>$ pegasus-tc-client -Dpegasus.catalog.transformation=Text \
-Dpegasus.catalog.transformation.file=$HOME/tc -a -r clus1 -l black::analyze:1.0 \
-p gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg  -t STAGEABLE -s INTEL32::LINUX \
-e ENV::KEY3="VALUE3"</command><computeroutput>

2007.07.11 16:12:03.712 PDT: [INFO] Added tc entry sucessfully</computeroutput></screen>

      <para>To verify if the entry was correctly added to the transformation
      catalog you can use the pegasus-tc-client to query.</para>

      <screen><command>$ pegasus-tc-client -Dpegasus.catalog.transformation=File \
-Dpegasus.catalog.transformation.file=$HOME/tc -q -P -l black::analyze:1.0</command>

<computeroutput>#RESID     LTX          PFN                  TYPE              SYSINFO

clus1    black::analyze:1.0    gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg
                STAGEABLE    INTEL32::LINUX</computeroutput></screen>

      <para/>
    </section>

    <section>
      <title>TC Converter Client pegasus-tc-converter</title>

      <para>Pegasus 3.0 by default now parses a file based multiline textual
      format of a Transformation Catalog. The new Text format is explained in
      detail in the chapter on Catalogs.</para>

      <para>Pegasus 3.0 comes with a pegasus-tc-converter that will convert
      users old transformation catalog ( File ) to the Text format. Sample
      usage is given below.</para>

      <programlisting><emphasis role="bold">$ pegasus-tc-converter -i sample.tc.data -I File -o sample.tc.text -O Text
</emphasis>
2010.11.22 12:53:16.661 PST:   Successfully converted Transformation Catalog from File to Text 
2010.11.22 12:53:16.666 PST:   The output transfomation catalog is in file  sample.tc.text 
</programlisting>

      <para>To use the converted transformation catalog, in the properties do
      the following:</para>

      <orderedlist>
        <listitem>
          <para>unset pegasus.catalog.transformation or set
          pegasus.catalog.transformation to Text</para>
        </listitem>

        <listitem>
          <para>point pegasus.catalog.transformation.file to the converted
          transformation catalog</para>
        </listitem>
      </orderedlist>
    </section>
  </section>

  <section id="variable_expansion">
    <title>Variable Expansion</title>

    <para>Pegasus Planner supports notion of variable expansions in the DAX
    and the catalog files along the same lines as bash variable expansion
    works. This is often useful, when you want paths in your catalogs or
    profile values in the DAX to be picked up from the environment. An error
    is thrown if a variable cannot be expanded.</para>

    <para>To specify a variable that needs to be expanded, the syntax is
    ${VARIABLE_NAME} , similar to BASH variable expansion. An important thing
    to note is that the variable names need to be enclosed in curly braces.
    For example</para>

    <programlisting> ${FOO}  - will be expanded by Pegasus
 $FOO    - will NOT be expanded by Pegasus.</programlisting>

    <para>Also variable names are case sensitive.</para>

    <para>Some examples of variable expansion are illustrated below:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">DAX</emphasis></para>

        <para>A job in the DAX file needs to have a globus profile key project
        associated and the value has to be picked up (per user) from user
        environment.</para>

        <programlisting>&lt;profile namespace="globus" key="project"&gt;${PROJECT}&lt;/profile&gt; 
</programlisting>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Site Catalog</emphasis></para>

        <para>In the site catalog, the site catalog entries are templated,
        where paths are resolved on the basis of values of environment
        variables. For example, below is a templated entry for a local site
        where $PWD is the working directory from where pegasus-plan is
        invoked.</para>

        <programlisting>&lt;site  handle="local" arch="x86_64" os="LINUX" osrelease="" osversion="" glibc=""&gt;
        &lt;directory  path="${PWD}/LOCAL/shared-scratch" type="shared-scratch" free-size="" total-size=""&gt;
                &lt;file-server  operation="all" url="file:///${PWD}/LOCAL/shared-scratch"&gt;
                &lt;/file-server&gt;
        &lt;/directory&gt;    
        &lt;directory  path="${PWD}/LOCAL/shared-storage" type="shared-storage" free-size="" total-size=""&gt;
                &lt;file-server  operation="all" url="file:///${PWD}/LOCAL/shared-storage"&gt;
                &lt;/file-server&gt;
        &lt;/directory&gt;
        &lt;profile namespace="env" key="PEGASUS_HOME"&gt;/usr&lt;/profile&gt;
        &lt;profile namespace="pegasus" key="clusters.num" &gt;1&lt;/profile&gt;
&lt;/site&gt;
</programlisting>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Replica Catalog</emphasis></para>

        <para>The input file locations in the Replica Catalog can be resolved
        based on values of environment variables.</para>

        <programlisting># File Based Replica Catalog
production_200.conf file://$PWD/production_200.conf site="local" </programlisting>

        <note>
          <para>Variable expansion is only supported for File based Replica
          Catalog, not Regex or other file based formats.</para>
        </note>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Transformation Catalog</emphasis></para>

        <para>Similarly paths in the transformation catalog or profile values
        can be picked up from the environment i.e environment variables OS ,
        ARCH and PROJECT are defined in user environment when launching
        pegasus-plan.</para>

        <programlisting># Snippet from a Text Based Transformation Catalog
tr pegasus::keg{
    site obelix {
        profile globus "project" "${PROJECT}"
        pfn "/usr/bin/pegasus-keg"
        arch "${ARCH}"
        os "${OS}"
        type "INSTALLED"
    }
}</programlisting>
      </listitem>
    </itemizedlist>

    <para/>
  </section>
</chapter>
