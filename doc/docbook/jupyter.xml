<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
        "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="jupyter">
    <title>Jupyter Notebooks</title>

    <section id="jupyter-introduction">
        <title>Introduction</title>

        <para>
            The <ulink url="http://jupyter.org/">Jupyter Notebook</ulink> is
            an open-source web application that allows you to create and share
            documents that contain live code, equations, visualizations and
            explanatory text.
        </para>

        <para>
            We have developed a Pegasus Python API for creating, launching, and
            monitoring workflows via Jupyter.
        </para>
    </section>

    <section id="jupyter-api">
        <title>The Pegasus DAX3 and Jupyter Python API</title>

        <para>
            The first step to enable Jupyter to use the Pegasus API is to
            import the Python Pegasus Jupyter API. The instance module will
            automatically load the Pegasus DAX3 API and the catalogs APIs.
        </para>

        <programlisting>from Pegasus.jupyter.instance import *</programlisting>

        <para>
            By default, the API automatically creates a folder in the user's
            $HOME directory based on the workflow name. However, a pre-defined
            path for the workflow files could be defined as follows:
        </para>

        <programlisting>workflow_dir = '/home/pegasus/wf-split-tutorial'</programlisting>

        <section id="jupyter-api-dax">
            <title>Creating an Abstract Workflow</title>

            <para>
                Workflow creation within Jupyter follows the same steps to
                generate a DAX with the <link linked="dax_generator_api">DAX
                Generator API</link>.
            </para>
        </section>

        <section id="jupyter-api-catalogs">
            <title>Creating the Catalogs</title>

            <para>
                The <emphasis><link linked="replica">Replica Catalog</link></emphasis>
                (RC) tells Pegasus where to find each of the input files for
                the workflow. We provide a Python API for creating the RC
                programmatically. For detailed information on how the RC works
                and its semantics can be found <link linked="replica">here</link>.
            </para>

            <programlisting>rc = ReplicaCatalog(workflow_dir)
rc.add('pegasus.html', 'file:///home/pegasus/pegasus.html', site='local')
            </programlisting>

            <para>
                The <emphasis><link linked="transformation">Transformation Catalog
                </link></emphasis> (TC) describes all of the executables (called
                "transformations") used by the workflow. The Python Jupyter API also
                provides methods to manage this catalog. A detailed description of
                the TC properties can be found <link linked="transformation">here</link>.
            </para>

            <programlisting>e_split = Executable('split', arch=Arch.X86_64, os=OSType.LINUX, installed=True)
e_split.addPFN(PFN('file:///usr/bin/split', 'condorpool'))

e_wc = Executable('wc', arch=Arch.X86_64, os=OSType.LINUX, installed=True)
e_wc.addPFN(PFN('file:///usr/bin/wc', 'condorpool'))

tc = TransformationCatalog(workflow_dir)
tc.add(e_split)
tc.add(e_wc)
            </programlisting>

            <para>
                The <emphasis><link linked="site">Site Catalog</link></emphasis>
                (SC) describes the sites where the workflow jobs are to be executed.
                A detailed description of the SC properties and handlers can be
                found <link linked="transformation">here</link>.
            </para>

            <programlisting>sc = SitesCatalog(workflow_dir)
sc.add_site('condorpool', arch=Arch.X86_64, os=OSType.LINUX)
sc.add_site_profile('condorpool', namespace=Namespace.PEGASUS, key='style', value='condor')
sc.add_site_profile('condorpool', namespace=Namespace.CONDOR, key='universe', value='vanilla')
            </programlisting>
        </section>

        <section id="jupyter-api-exec">
            <title>Workflow Execution</title>

            <para>
                Workflow execution and management are performed using an
                <emphasis>Instance</emphasis> object. An instance receives
                a DAX object (created with the <link linked="dax_generator_api">
                DAX Generator API</link>), and the catalogs objects
                (replica, transformation, and site). A path to the workflow
                directory can also be provided:
            </para>

            <programlisting>instance = Instance(dax, replica_catalog=rc, transformation_catalog=tc, sites_catalog=sc, workflow_dir=workflow_dir)</programlisting>

            <para>
                An instance object represents a workflow run, from where
                the workflow execution can be launched, monitored, and
                managed. The <emphasis>run</emphasis> method starts the
                workflow execution.
            </para>

            <programlisting>instance.run(site='condorpool')</programlisting>

            <para>
                After the workflow has been submitted you can monitor it using
                the <emphasis>status()</emphasis> method. This method takes two
                arguments:
            </para>

            <orderedlist>
                <listitem><para><emphasis>loop</emphasis>: whether the status
                    command should be invoked once or continuously until the
                    workflow is completed or a failure is detected.</para></listitem>
                <listitem><para><emphasis>delay</emphasis>: The delay (in seconds)
                    the status will be refreshed. Default value is 10s.</para></listitem>
            </orderedlist>

            <programlisting>instance.status(loop=True, delay=5)</programlisting>
        </section>

    </section>

    <section id="jupyterhub">
        <title>JupyterHub</title>

        <para>
            The Pegasus Jupyter API can also be used with
            <ulink url="https://jupyterhub.readthedocs.io">JupyterHub</ulink> portals.
            Due to the strict requirement of Python 3 for running the multi-user
            hub, our API requires the Python <ulink url="https://pypi.python.org/pypi/future">
            future</ulink> package in order to be compatible with Python 3.
        </para>
    </section>
</chapter>
