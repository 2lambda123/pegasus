<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="notifications">
  <title>Notifications</title>

  <para>The Pegasus Workflow Mapper now supports job and workflow level
  notifications. You can specify in the DAX with the job or the
  workflow</para>

  <itemizedlist>
    <listitem>
      <para>the event when the notification needs to be sent</para>
    </listitem>

    <listitem>
      <para>the executable that needs to be invoked.</para>
    </listitem>
  </itemizedlist>

  <para>The notifications are issued from the submit host by the
  pegasus-monitord daemon that monitors the Condor logs for the workflow. When
  a notification is issued, pegasus-monitord while invoking the notifying
  executable sets certain environment variables that contain information about
  the job and workflow state.</para>

  <para>The Pegasus release comes with default notification clients that send
  notifications via email or jabber.</para>

  <section>
    <title>Specifying Notifications in the DAX</title>

    <para>Currently, you can specify notifications for the jobs and the
    workflow by the use of invoke elements.</para>

    <para>Invoke elements can be sub elements for the following elements in
    the DAX schema.<itemizedlist>
        <listitem>
          <para>job - to associate notifications with a compute job in the
          DAX.</para>
        </listitem>

        <listitem>
          <para>dax - to associate notifications with a dax job in the
          DAX.</para>
        </listitem>

        <listitem>
          <para>dag - to associate notifications with a dag job in the
          DAX.</para>
        </listitem>

        <listitem>
          <para>executable - to associate notifications with a job that uses a
          particular notification</para>
        </listitem>
      </itemizedlist></para>

    <para>The invoke element can be specified at the root element level of the
    DAX to indicate workflow level notifications.</para>

    <para>The invoke element may be specified multiple times, as needed. It
    has a mandatory <emphasis role="bold">when</emphasis> attribute with the
    following value set</para>

    <table id="notification_conditions_table">
      <title>Table 1. Invoke Element attributes and meaning.</title>

      <tgroup cols="2">
        <thead>
          <row>
            <entry align="center">Enumeration of Values for when
            attribute</entry>

            <entry align="center">Meaning</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry>never</entry>

            <entry>(default). Never notify of anything. This is useful to
            temporarily disable an existing notifications.</entry>
          </row>

          <row>
            <entry>start</entry>

            <entry>create a notification when the job is submitted.</entry>
          </row>

          <row>
            <entry>on_error</entry>

            <entry>after a job finishes with failure (exitcode != 0).</entry>
          </row>

          <row>
            <entry>on_success</entry>

            <entry>after a job finishes with success (exitcode == 0).</entry>
          </row>

          <row>
            <entry>at_end</entry>

            <entry>after a job finishes, regardless of exitcode.</entry>
          </row>

          <row>
            <entry>all</entry>

            <entry>like start and at_end combined.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>You can specify multiple invoke elements corresponding to same when
    attribute value in the DAX. This will allow you to have multiple
    notifications for the same event.</para>

    <para>Here is an example that illustrates that.</para>

    <programlisting>&lt;job id="ID000001" namespace="example" name="mDiffFit" version="1.0" 
       node-label="preprocess" &gt;
    &lt;argument&gt;-a top -T 6  -i &lt;file name="f.a"/&gt;  -o &lt;file name="f.b1"/&gt;&lt;/argument&gt;

    &lt;!-- profiles are optional --&gt;
    &lt;profile namespace="execution" key="site"&gt;isi_viz&lt;/profile&gt;
    &lt;profile namespace="condor" key="getenv"&gt;true&lt;/profile&gt;

    &lt;uses name="f.a" link="input"  register="false" transfer="true" type="data" /&gt;
    &lt;uses name="f.b" link="output" register="false" transfer="true" type="data" /&gt;
    
    &lt;!-- 'WHEN' enumeration: never, start, on_error, on_success, on_end, all --&gt;
    <emphasis role="bold">&lt;invoke when="start"&gt;/path/to/notify1 arg1 arg2&lt;/invoke&gt;
    &lt;invoke when="start"&gt;/path/to/notify1 arg3 arg4&lt;/invoke&gt;
    &lt;invoke when="on_success"&gt;/path/to/notify2 arg3 arg4&lt;/invoke&gt;</emphasis>
  &lt;/job&gt;</programlisting>

    <para>In the above example the executable notify1 will be invoked twice
    when a job is submitted ( when="start" ), once with arguments arg1 and
    arg2 and second time with arguments arg3 and arg4.</para>

    <para>The DAX Generator API <link
    linkend="dax_generator_api">chapter</link> has information about how to
    add notifications to the DAX using the DAX api's.</para>
  </section>

  <section id="pegasus_notify_file">
    <title>Notify File created by Pegasus in the submit directory</title>

    <para>Pegasus while planning a workflow writes out a notify file in the
    submit directory that contains all the notifications that need to be sent
    for the workflow. pegasus-monitord picks up this notifications file to
    determine what notifications need to be sent and when.</para>

    <orderedlist>
      <listitem>
        <para>ENTITY_TYPE ID NOTIFICATION_CONDITION ACTION</para>

        <itemizedlist>
          <listitem>
            <para>ENTITY_TYPE can be either of the following keywords</para>

            <itemizedlist>
              <listitem>
                <para>WORKFLOW - indicates workflow level notification</para>
              </listitem>

              <listitem>
                <para>JOB - indicates notifications for a job in the
                executable workflow</para>
              </listitem>

              <listitem>
                <para>DAXJOB - indicates notifications for a DAX Job in the
                executable workflow</para>
              </listitem>

              <listitem>
                <para>DAGJOB - indicates notifications for a DAG Job in the
                executable workflow</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>ID indicates the identifier for the entity. It has different
            meaning depending on the entity type - -</para>

            <itemizedlist>
              <listitem>
                <para>workflow - ID is wf_uuid</para>
              </listitem>

              <listitem>
                <para>JOB|DAXJOB|DAGJOB - ID is the job identifier in the
                executable workflow ( DAG ).</para>
              </listitem>
            </itemizedlist>
          </listitem>

          <listitem>
            <para>NOTIFICATION_CONDITION is the condition when the
            notification needs to be sent. The notification conditions are
            enumerated in <link linkend="notification_conditions_table">Table
            1</link></para>
          </listitem>

          <listitem>
            <para>ACTION is what needs to happen when condition is satisfied.
            It is executable + arguments</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>INVOCATION JOB_IDENTIFIER INV.ID NOTIFICATION_CONDITION
        ACTION</para>

        <para>The INVOCATION lines are only generated for clustered jobs, to
        specifiy the finer grained notifications for each constitutent
        job/invocation .</para>

        <itemizedlist>
          <listitem>
            <para>JOB IDENTIFIER is the job identifier in the executable
            workflow ( DAG ).</para>
          </listitem>

          <listitem>
            <para>INV.ID indicates the index of the task in the clustered job
            for which the notification needs to be sent.</para>
          </listitem>

          <listitem>
            <para>NOTIFICATION_CONDITION is the condition when the
            notification needs to be sent. The notification conditions are
            enumerated in <link linkend="notification_conditions_table">Table
            1</link></para>
          </listitem>

          <listitem>
            <para>ACTION is what needs to happen when condition is satisfied.
            It is executable + arguments</para>
          </listitem>
        </itemizedlist>
      </listitem>
    </orderedlist>

    <para>A sample notifications file generated is listed below.</para>

    <programlisting>WORKFLOW d2c4f79c-8d5b-4577-8c46-5031f4d704e8 on_error /bin/date1

INVOCATION merge_vahi-preprocess-1.0_PID1_ID1 1 on_success /bin/date_executable
INVOCATION merge_vahi-preprocess-1.0_PID1_ID1 1 on_success /bin/date_executable
INVOCATION merge_vahi-preprocess-1.0_PID1_ID1 1 on_error /bin/date_executable

INVOCATION merge_vahi-preprocess-1.0_PID1_ID1 2 on_success /bin/date_executable
INVOCATION merge_vahi-preprocess-1.0_PID1_ID1 2 on_error /bin/date_executable

DAXJOB subdax_black_ID000003 on_error /bin/date13
JOB    analyze_ID00004    on_success /bin/date
</programlisting>
  </section>

  <section>
    <title>Configuring pegasus-monitord for notifications</title>

    <para>Whenever pegasus-monitord enters a workflow (or sub-workflow)
    directory, it will read the notifications file generated by Pegasus.
    Pegasus-monitord will match events in the running workflow against the
    notifications specified in the notifications file and will initiate the
    script specified in a notification when that notification matches an event
    in the workflow. It is important to note that there will be a delay
    between a certain event happening in the workflow, and pegasus-monitord
    processing the log file and executing the corresponding notification
    script.</para>

    <para>The following command line options (and properties) can change how
    pegasus-monitord handles notifications:</para>

    <itemizedlist>
      <listitem>
        <para>--no-notifications (pegasus.monitord.notifications=False): Will
        disable notifications completely.</para>
      </listitem>

      <listitem>
        <para>--notifications-max=nn (pegasus.monitord.notifications.max=nn):
        Will limit the number of concurrent notification scripts to nn. Once
        pegasus-monitord reaches this number, it will wait until one
        notification script finishes before starting a new one. Notifications
        happening during this time will be queued by the system. The default
        number of concurrent notification scripts for pegasus-monitord is
        10.</para>
      </listitem>

      <listitem>
        <para>--notifications-timeout=nn
        (pegasus.monitord.notifications.timeout=nn): This setting is used to
        change how long will pegasus-monitord wait for a notification script
        to finish. By default pegasus-monitord will wait for as long as it
        takes (possibly indefinitely) until a notification script ends. With
        this option, pegasus-monitord will wait for at most nn seconds before
        killing the notification script.</para>
      </listitem>
    </itemizedlist>

    <para>It is also important to understand that pegasus-monitord will not
    issue any notifications when it is executed in replay mode.</para>

    <section>
      <title>Environment set for the notification scripts</title>

      <para>Whenever a notification in the notifications file matches an event
      in the running workflow, pegasus-monitord will run the corresponding
      script specified in the ACTION field of the notifications file.
      Pegasus-monitord will set the following environment variables for each
      notification script is starts:</para>

      <itemizedlist>
        <listitem>
          <para>PEGASUS_EVENT: The NOTIFICATION_CONDITION that caused the
          notification. In the case of the "all" condition, pegasus-monitord
          will substitute it for the actual event that caused the match (e.g.
          "start" or "at_end").</para>
        </listitem>

        <listitem>
          <para>PEGASUS_EVENT_TIMESTAMP: Timestamp in EPOCH format for the
          event (better for automated processing).</para>
        </listitem>

        <listitem>
          <para>PEGASUS_EVENT_TIMESTAMP_ISO: Same as above, but in ISO format
          (better for human readability).</para>
        </listitem>

        <listitem>
          <para>PEGASUS_SUBMIT_DIR: The submit directory for the workflow
          (usually the value from "submit_dir" in the braindump.txt
          file)</para>
        </listitem>

        <listitem>
          <para>PEGASUS_STDOUT: For workflow notifications, this will
          correspond to the dagman.out file for that workflow. For job and
          invocation notifications, this field will contain the output file
          (stdout) for that particular job instance.</para>
        </listitem>

        <listitem>
          <para>PEGASUS_STDERR: For job and invocation notifications, this
          field will contain the error file (stderr) for the particular
          executable job instance. This field does not exist in case of
          workflow notifications.</para>
        </listitem>

        <listitem>
          <para>PEGASUS_WFID: Contains the workflow id for this notification
          in the form of DAX_LABEL + DAX_INDEX (from the braindump.txt
          file).</para>
        </listitem>

        <listitem>
          <para>PEGASUS_JOBID: For workflow notifications, this contains the
          worfkflow wf_uuid (from the braindump.txt file). For job and
          invocation notifications, this field contains the job identifier in
          the executable workflow ( DAG ) for the particular
          notification.</para>
        </listitem>

        <listitem>
          <para>PEGASUS_INVID: Contains the index of the task in the clustered
          job for the notification.</para>
        </listitem>

        <listitem>
          <para>PEGASUS_STATUS: For workflow notifications, this contains
          DAGMan's exit code. For job and invocation notifications, this field
          contains the exit code for the particular job/task. Please note that
          this field is not present for 'start' notification events.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section>
    <title>Default Notification Scripts</title>

    <para>Pegasus ships with two reference notification scripts. These can be
    used as starting point when creating your own notification scripts, or if
    the default one is all you need, you can use them directly in your
    workflows. The scripts are:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">libexec/notification/email</emphasis> -
        sends email, including the output from
        <command>pegasus-status</command> (default) or
        <command>pegasus-analyzer</command>.</para>

        <screen><emphasis role="bold">$ ./libexec/notification/email --help</emphasis>
Usage: email [options]

Options:
  -h, --help            show this help message and exit
  -t TO_ADDRESS, --to=TO_ADDRESS
                        The To: email address. Defines the recipient for the
                        notification.
  -f FROM_ADDRESS, --from=FROM_ADDRESS
                        The From: email address. Defaults to the required To:
                        address.
  -r REPORT, --report=REPORT
                        Include workflow report. Valid values are: none
                        pegasus-analyzer pegasus-status (default)
</screen>
      </listitem>

      <listitem>
        <para><emphasis role="bold">libexec/notification/jabber </emphasis>-
        sends simple notifications to Jabber/GTalk. This can be useful for job
        failures.</para>

        <screen><emphasis role="bold">$ ./libexec/notification/jabber --help</emphasis>
Usage: jabber [options]

Options:
  -h, --help            show this help message and exit
  -i JABBER_ID, --jabberid=JABBER_ID
                        Your jabber id. Example: user@jabberhost.com
  -p PASSWORD, --password=PASSWORD
                        Your jabber password
  -s HOST, --host=HOST  Jabber host, if different from the host in your jabber
                        id. For Google talk, set this to talk.google.com
  -r RECIPIENT, --recipient=RECIPIENT
                        Jabber id of the recipient. Not necessary if you want
                        to send to your own jabber id
</screen>
      </listitem>
    </itemizedlist>

    <para>For example, if the DAX generator is written in Python and you want
    notifications on 'at_end' events (successful or failed):</para>

    <programlisting># job level notifications - in this case for at_end events
job.invoke('at_end', pegasus_home + "/libexec/notifications/email --to me@somewhere.edu")</programlisting>

    <para>Please see the <link linkend="notifications_example">notifications
    example</link> to see a full workflow using notifications.</para>
  </section>
</section>
