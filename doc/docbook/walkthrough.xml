<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="walkthrough">
  <title>New User Walkthrough</title>

  <section id="walkthrough_objectives">
    <title>Walkthrough Objectives</title>

    <para>This walkthrough is intended for new users who want so get a quick
    overview of the Pegasus concepts and system. A preconfigured virtual
    machine is provided so that no software installation (except Virtal Box)
    is required. The walkthrough covers creating a workflow, submitting,
    monitoring, debugging, and generating run statistics. As concepts and
    tools are introduced, links to the main Pegasus documentation are
    provided.</para>
  </section>

  <section id="walkthrough_vm">
    <title>Virtual Box Pegasus VM</title>

    <note>
       Virtual Box is required to run the virtual machine on your computer. If you do not already have it installed, download the binary version desired and install it from the 

      <ulink url="http://www.virtualbox.org/wiki/Downloads">Virtual Box
      Website</ulink>

       
    </note>

    <para>Download the corresponding disk image.</para>

    <para><ulink
    url="http://download.pegasus.isi.edu/wms/download/4.0/Pegasus-4.0.1-Debian-6-x86.vbox.zip"
    xml:base="">Virtual Box Pegasus Image</ulink></para>

    <para>It is around <emphasis role="bold">600 MB</emphasis> in size. The
    Image is in zip format. You will need to unzip it.</para>

    <para>After untarring a folder named<emphasis role="bold">
    Pegasus-3.1-Debian-6-x86.vbox</emphasis> will be created that has the vmdk
    files for the VM. Load this VM using Virtual Box. Once you see the simple
    Linux desktop, move on to the next step.</para>

    <section>
      <title>Running the VM with Virtual Box</title>

      <para>Launch Virtual Box on your machine. Follow the steps to add the
      vmdk file to Virtual Box and create a virtual machine inside the Virtual
      Box</para>

      <orderedlist>
        <listitem>
          <para>In the Menu, click File and select Virtual Media Manager (
          File &gt; Virtual Media Manager )</para>
        </listitem>

        <listitem>
          <para>The Virtual Media Manager Windows opens up.</para>
        </listitem>

        <listitem>
          <para>Click on "Add" button to add the<emphasis
          role="bold">Pegasus-3.1.0-Debian-6-x86.vbox/Debian-6-x86.vmdk</emphasis>
          file that you just downloaded and unzipped.</para>
        </listitem>

        <listitem>
          <para>You will now see the Debian-6-x86.vmdk in the list of hard
          disks with Actual size listed as around 3.0 GB</para>
        </listitem>

        <listitem>
          <para>Close the Window for the Virtual Media Manager</para>
        </listitem>
      </orderedlist>

      <section>
        <para>We will now create a Virtual Machine in the Virtual Box.</para>

        <orderedlist>
          <listitem>
            <para>In the Menu, click Machine and select New ( Machine &gt; New
            )</para>
          </listitem>

          <listitem>
            <para>It will open the New Virtual Machine Wizard. Click
            Continue</para>
          </listitem>

          <listitem>
            <para>In the VM Name and OS Type Window specify the name
            as<emphasis role="bold"> PegasusVM-3.1.0</emphasis>.</para>
          </listitem>

          <listitem>
            <para>Select the <emphasis role="bold">Operating System as
            Linux</emphasis>and <emphasis role="bold">Version as
            Debian</emphasis>. Click Continue.</para>
          </listitem>

          <listitem>
            <para>Set the base memory to <emphasis role="bold">384
            MB</emphasis> . It defaults to 512 MB. Click Continue</para>
          </listitem>

          <listitem>
            <para>We now select the Virtual Hard Disk to use with the machine.
            Select the option box for Use Existing Hard Disk. Select <emphasis
            role="bold">Debian-6-x86.vmdk</emphasis> from the list . Click
            Continue</para>
          </listitem>

          <listitem>
            <para>Click Done.</para>
          </listitem>

          <listitem>
            <para>Now in the Virtual Box , start the PegasusVM-3.1.0
            machine.</para>
          </listitem>
        </orderedlist>
      </section>
    </section>
  </section>

  <section id="walkthrough_creating_dax">
    <title>Creating the Workflow (DAX)</title>

    <para>Pegasus takes in an abstract workflow (DAX) and generates an
    executable workflow (DAG) that is run in an environment. For the purposes
    of this walkthrough, we will demonstrate the characteristics and structure
    of workflows by generating a workflow with a bit of Python code that uses
    the DAX API to generate a DAX. For a detailed description of workflows,
    how to create them, and how they are used in Pegasus see <link
    linkend="creating_workflows">Creating Workflows</link></para>

    <para>The workflow we will be creating is called Black Diamond because its
    shape. It is a made up workflow which has 4 jobs, files (f.*) passed
    between the jobs, and it is an interesting example as it shows data and
    job dependencies. The workflow looks like:</para>

    <figure>
      <title>Figure: Black Diamond DAX</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/examples-diamond.jpg" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To create the DAX, open a new terminal:</para>

    <para><figure id="gridcreds">
        <title>Terminal Window</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" fileref="images/tutorialterminal.png"
                       valign="middle" />
          </imageobject>
        </mediaobject>
      </figure></para>

    <para>All the exercises in this Chapter will be run from the <emphasis
    role="bold">$HOME/walkthrough/</emphasis> directory . All the files that
    are required reside in this directory.</para>

    <para>Change the directory to <emphasis
    role="bold">$HOME/walkthrough:</emphasis></para>

    <programlisting><command>$ cd $HOME/walkthrough</command></programlisting>

    <para>The piece of code which generates the DAX is called a DAX generator,
    and in this case the code is written in Python. APIs are also available
    for Java and Perl, and if that does not fit in your tool chain, you can
    also write the DAX XML directly.</para>

    <para>Open the file <emphasis
    role="bold">create_diamond_dax.py</emphasis></para>

    <programlisting><command>$ nano create_diamond_dax.py</command></programlisting>

    <para>The code has 6 logical sections:</para>

    <para><orderedlist>
        <listitem>
          <para><emphasis role="bold">Imports and Pegasus location
          setup.</emphasis> We need to know the location of Pegasus because we
          need to import the DAX3 Pegasus Python module, and we need to know
          where on the file system the <emphasis role="bold">keg</emphasis>
          executable is.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">A new abstract dag (DAX) is
          created.</emphasis> This is the main DAX object that we will add
          data, jobs and flow information to.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">A replica catalog is set up.</emphasis>
          Replica catalogs tell Pegasus where to find data. In this example
          workflow, we only have one input, f.a, and thus the replica catalog
          only has one entry. For larger workflows, it is not uncommon to have
          thousands of entries in the replica catalog, and sometimes mulitple
          physical locations for the same logical filename so that Pegasus can
          pick which replica to use. Replica catalogs can either be included
          in the DAX (like in this example) or be standalone files or
          services. For more information about replica catalogs, see the <link
          linkend="replica">Data Discovery chapter</link>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Executables are added.</emphasis> Just
          like we the replica catalog informs Pegasus on where to find data,
          the transformation catalog tells Pegasus where to find the
          executables for the workflow. The transformation catalog can exist
          inside the DAX (as in this example) or in a standalone file. You can
          list the same logical exectuable existing on multiple resources, and
          Pegasus will pick the appropiate one when the workflow is planned.
          More information can be found in the <link
          linkend="transformation">Executable Discovery chapter</link>.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Jobs are added.</emphasis> The 4 jobs in
          the Black Diamond in the picture above are added. Arguments are
          defined, and <emphasis role="bold">uses</emphasis> clauses are added
          to list input and output files. This is an imporant step, as it
          allows Pegasus to track the files, and stage the data if
          necessary.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Control flows are set up.</emphasis>
          This is the edges in the picture, and defines parent/child
          relationships between the jobs. When the workflow is executing, this
          is the order the jobs will run in.</para>
        </listitem>
      </orderedlist>Close the file and execute it giving the location of the
    Pegasus install as argument:</para>

    <screen>$ <emphasis role="bold">./create_diamond_dax.py /opt/pegasus/default</emphasis></screen>

    <para>The output is the DAX XML:</para>

    <screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- generated: 2011-07-19 12:59:14.617059 --&gt;
&lt;!-- generated by: tutorial --&gt;
&lt;!-- generator: python --&gt;
&lt;adag xmlns="http://pegasus.isi.edu/schema/DAX"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://pegasus.isi.edu/schema/DAX
                          http://pegasus.isi.edu/schema/dax-3.3.xsd"
      version="3.3" name="diamond"&gt;
        &lt;file name="f.a"&gt;
                &lt;pfn url="file:///home/tutorial/walkthrough/f.a" site="PegasusVM"/&gt;
        &lt;/file&gt;
        &lt;executable name="preprocess" namespace="diamond" version="4.0"
                    arch="x86_64" os="linux" installed="true"&gt;
                &lt;pfn url="file:///opt/pegasus/default/bin/keg" site="PegasusVM"/&gt;
        &lt;/executable&gt;
        &lt;executable name="analyze" namespace="diamond" version="4.0"
                    arch="x86_64" os="linux" installed="true"&gt;
                &lt;pfn url="file:///opt/pegasus/default/bin/keg" site="PegasusVM"/&gt;
        &lt;/executable&gt;
        &lt;executable name="findrange" namespace="diamond" version="4.0"
                    arch="x86_64" os="linux" installed="true"&gt;
                &lt;pfn url="file:///opt/pegasus/default/bin/keg" site="PegasusVM"/&gt;
        &lt;/executable&gt;
        &lt;job id="ID0000001" namespace="diamond" name="preprocess" version="4.0"&gt;
                &lt;argument&gt;-a preprocess -T60 -i &lt;file name="f.a"/&gt; 
                          -o &lt;file name="f.b1"/&gt; &lt;file name="f.b2"/&gt;&lt;/argument&gt;
                &lt;uses name="f.b1" link="output" executable="false"/&gt;
                &lt;uses name="f.a" link="input" executable="false"/&gt;
                &lt;uses name="f.b2" link="output" executable="false"/&gt;
        &lt;/job&gt;
        &lt;job id="ID0000002" namespace="diamond" name="findrange" version="4.0"&gt;
                &lt;argument&gt;-a findrange -T60 -i &lt;file name="f.b1"/&gt;
                          -o &lt;file name="f.c1"/&gt;&lt;/argument&gt;
                &lt;uses name="f.c1" link="output" executable="false"/&gt;
                &lt;uses name="f.b1" link="input" executable="false"/&gt;
        &lt;/job&gt;
        &lt;job id="ID0000003" namespace="diamond" name="findrange" version="4.0"&gt;
                &lt;argument&gt;-a findrange -T60 -i &lt;file name="f.b2"/&gt;
                          -o &lt;file name="f.c2"/&gt;&lt;/argument&gt;
                &lt;uses name="f.c2" link="output" executable="false"/&gt;
                &lt;uses name="f.b2" link="input" executable="false"/&gt;
        &lt;/job&gt;
        &lt;job id="ID0000004" namespace="diamond" name="analyze" version="4.0"&gt;
                &lt;argument&gt;-a analyze -T60 -i &lt;file name="f.c1"/&gt; 
                          &lt;file name="f.c2"/&gt; -o &lt;file name="f.d"/&gt;&lt;/argument&gt;
                &lt;uses name="f.c2" link="input" executable="false"/&gt;
                &lt;uses name="f.d" link="output" register="true" executable="false"/&gt;
                &lt;uses name="f.c1" link="input" executable="false"/&gt;
        &lt;/job&gt;
        &lt;child ref="ID0000002"&gt;
                &lt;parent ref="ID0000001"/&gt;
        &lt;/child&gt;
        &lt;child ref="ID0000003"&gt;
                &lt;parent ref="ID0000001"/&gt;
        &lt;/child&gt;
        &lt;child ref="ID0000004"&gt;
                &lt;parent ref="ID0000002"/&gt;
                &lt;parent ref="ID0000003"/&gt;
        &lt;/child&gt;
&lt;/adag&gt;</screen>

    <para>We need the DAX in a file to give to Pegasus, so run the same
    command again, but redirect it to file:</para>

    <screen>$ <emphasis role="bold">./create_diamond_dax.py /opt/pegasus/default &gt; diamond.xml </emphasis></screen>

    <para>More information about creating workflows can be found in the <link
    linkend="creating_workflows">Creating Workflows chapter</link>.</para>
  </section>

  <section id="walkthrough_submitting">
    <title>Submitting the Workflow</title>

    <para>Submitting a Pegasus workflow consists of two steps, planning and
    submitting, but are often made by one single command for convenience.
    However, the planning stage is where Pegasus is doing powerful
    transformations to your workflow, so it is important to at least have an
    idea on what is happening under the covers. Planning includes, but is not
    limited to:</para>

    <para><orderedlist>
        <listitem>
          <para>Adding remote create dir jobs</para>
        </listitem>

        <listitem>
          <para>Adding stage in jobs to transfer data into the remote work
          directory</para>
        </listitem>

        <listitem>
          <para>Adding cleanup jobs to clean up the work directory as the
          workflow progresses</para>
        </listitem>

        <listitem>
          <para>Adding stage out jobs to transfer data to the final output
          location</para>
        </listitem>

        <listitem>
          <para>Adding registration jobs to register the data in a replica
          catalog</para>
        </listitem>

        <listitem>
          <para>Clusters job together - useful if you have many short
          tasks</para>
        </listitem>

        <listitem>
          <para>Adds wrappers to the jobs to collect provenance information -
          this is so statistics and plots can be created after a run</para>
        </listitem>
      </orderedlist>In the case of our black diamond workflow, here is what it
    looks like after the Pegasus planner has processed the DAX:</para>

    <figure>
      <title>Figure: Black Diamond DAG Image</title>

      <mediaobject>
        <imageobject>
          <imagedata align="center" fileref="images/concepts-diamond-dag.png" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To plan and submit the workflow, run:</para>

    <screen>$ <emphasis role="bold">pegasus-plan --conf pegasusrc --sites PegasusVM --dir runs --output local --dax diamond.xml --submit</emphasis></screen>

    <para>The output will look something like:</para>

    <screen>Submitting job(s). 
1 job(s) submitted to cluster 18. 

----------------------------------------------------------------------- 
File for submitting this DAG to Condor           : diamond-0.dag.condor.sub 
Log of DAGMan debugging messages                 : diamond-0.dag.dagman.out 
Log of Condor library output                     : diamond-0.dag.lib.out 
Log of Condor library error messages             : diamond-0.dag.lib.err 
Log of the life of condor_dagman itself          : diamond-0.dag.dagman.log 
----------------------------------------------------------------------- 

Your Workflow has been started and runs in base directory given below 

cd /home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001 

*** To monitor the workflow you can run *** 

pegasus-status -l /home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001 

*** To remove your workflow run *** 
pegasus-remove /home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001</screen>

    <tip>
      <para>The work directory created by Pegasus is where the concrete
      workflow exists, and the directory is also the handle for Pegasus
      commands acting on that instance. Using this handle will be covered in
      the next section.</para>
    </tip>

    <para>Further information about planning and submitting workflows can be
    found in the <link linkend="running_workflows">Running Workflows
    chapter</link>. Information about the files in the work directory can be
    found in the <link linkend="submit_directory">Submit Directory Details
    chapter</link>.</para>
  </section>

  <section id="walkthrough_monitoring">
    <title>Monitoring, Debugging and Statistics</title>

    <para>Once the workflow has been submitted, you can check status of it
    with the pegasus-status tool. Use the directory handle (which is different
    for every workflow you submit) from the previous step and run it with the
    -l flag:</para>

    <screen>$ <emphasis role="bold">pegasus-status -l /home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001</emphasis>
STAT  IN_STATE  JOB                                               
Run      02:59  diamond-0                                         
Run      00:34   |-findrange_ID0000002                            
Run      00:32   |-findrange_ID0000003                            
Idle     00:19   \_clean_up_preprocess_ID0000001                  
Summary: 4 Condor jobs total (I:1 R:3)

UNRDY READY   PRE  IN_Q  POST  DONE  FAIL %DONE STATE   DAGNAME                                 
    8     0     0     4     0     4     0  25.0 Running *diamond-0.dag                          
Summary: 1 DAG total (Running:1)</screen>

    <para>The first section shows jobs released to be handled by Condor. The
    second section shows a summary of the state of the workflow. Keep on
    checking the workflow with pegasus-status until it is 100% done.</para>

    <para>Once the workflow has finished, you may use the pegasus-analyzer to
    debug the workflow. This is obviously most useful when workflows have
    failed for some reason. pegasus-analyzer will show you which jobs failed
    and the output of those jobs. Our simple black diamond should finish
    successfully, and pegasus-analyzer output should look like:</para>

    <screen>$ <emphasis role="bold">pegasus-analyzer --dir=/home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001</emphasis>
pegasus-analyzer: initializing...

************************************Summary*************************************

 Total jobs         :     15 (100.00%)
 # jobs succeeded   :     15 (100.00%)
 # jobs failed      :      0 (0.00%)
 # jobs unsubmitted :      0 (0.00%)

**************************************Done**************************************

pegasus-analyzer: end of status report
</screen>

    <para>To get detailed run statistics, use the pegasus-statistics
    tool:</para>

    <screen>$ <emphasis role="bold">pegasus-statistics /home/tutorial/walkthrough/runs/tutorial/pegasus/diamond/run0001</emphasis>

Workflow summary - Summary of the workflow execution. It shows total
                tasks/jobs/sub workflows run, how many succeeded/failed etc.
                In case of hierarchical workflow the calculation shows the 
                statistics across all the sub workflow.

Workflow wall time - The walltime from the start of the workflow execution
                to the end as reported by the DAGMAN.In case of rescue dag the value
                is the cumulative of all retries.

Workflow cumulative job wall time - The sum of the walltime of all jobs as
                reported by kickstart. In case of job retries the value is the
                cumulative of all retries. For workflows having sub workflow jobs
                (i.e SUBDAG and SUBDAX jobs), the walltime value includes jobs from
                the sub workflows as well.

Cumulative job walltime as seen from submit side - The sum of the walltime of
                all jobs as reported by DAGMan. This is similar to the regular
                cumulative job walltime, but includes job management overhead and
                delays. In case of job retries the value is the cumulative of all
                retries. For workflows having sub workflow jobs (i.e SUBDAG and
                SUBDAX jobs), the walltime value includes jobs from the sub workflows
                as well.

-------------------------------------------------------------------------------------
Type                Succeeded           Failed              Unsubmitted         Total
Tasks               4                   0                   0                   4
Jobs                15                  0                   0                   15 
Sub Workflows       0                   0                   0                   0
--------------------------------------------------------------------------------------
Workflow wall time                               : 5 mins, 35 secs, (total 335 seconds)

Workflow cumulative job wall time                : 4 mins, 1 sec,   (total 241 seconds)

Cumulative job walltime as seen from submit side : 4 mins, 2 secs,  (total 242 seconds)</screen>

    <para>More information about monitoring, debugging and statistics can be
    found in the <link linkend="monitoring_debugging_stats">Monitoring,
    Debugging and Statistics chapter</link>.</para>
  </section>
</chapter>
