<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="api">
  <title>API Reference</title>

  <section>
    <title>DAX XML Schema</title>

    <para>The DAX format is described by the XML schema instance document
    <ulink
    url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.6/dax-3.6.xsd">dax-3.6.xsd</ulink>.
    A local copy of the schema definition is provided in the
    <quote>etc</quote> directory. The documentation of the XML schema and its
    elements can be found in <ulink
    url="http://pegasus.isi.edu/wms/docs/schemas/dax-3.6/dax-3.6.html">dax-3.6.html</ulink>
    as well as locally in
    <filename>doc/schemas/dax-3.6/dax-3.6.html</filename> in your Pegasus
    distribution.</para>

    <section>
      <title>DAX XML Schema In Detail</title>

      <para>The DAX file format has four major sections, with the second
      section divided into more sub-sections. The DAX format works on the
      abstract or logical level, letting you focus on the shape of the
      workflows, what to do and what to work upon.</para>

      <orderedlist>
        <listitem>
          <para>Workflow level Metadata</para>

          <para>Metadata that is associated with the whole workflow. These are
          defined in the Metadata section.</para>
        </listitem>

        <listitem>
          <para>Workflow-level Notifications</para>

          <para>Very simple workflow-level notifications. These are defined in
          the <link linkend="notifications">Notification</link>
          section.</para>
        </listitem>

        <listitem>
          <para>Catalogs</para>

          <para>The first section deals with included catalogs. While we do
          recommend to use external replica- and transformation catalogs, it
          is possible to include some replicas and transformations into the
          DAX file itself. Any DAX-included entry takes precedence over
          regular replica catalog (RC) and transformation catalog (TC)
          entries.</para>

          <para>The first section (and any of its sub-sections) is completely
          optional.</para>

          <orderedlist>
            <listitem>
              <para>The first sub-section deals with included replica
              descriptions.</para>
            </listitem>

            <listitem>
              <para>The second sub-section deals with included transformation
              descriptions.</para>
            </listitem>

            <listitem>
              <para>The third sub-section declares multi-item
              executables.</para>
            </listitem>
          </orderedlist>
        </listitem>

        <listitem>
          <para>Job List</para>

          <para>The jobs section defines the job- or task descriptions. For
          each task to conduct, a three-part logical name declares the task
          and aides identifying it in the transformation catalog or one of the
          <emphasis>executable</emphasis> section above. During planning, the
          logical name is translated into the physical executable location on
          the chosen target site. By declaring jobs abstractly, physical
          layout consideration of the target sites do not matter. The job's
          <emphasis>id</emphasis> uniquley identifies the job within this
          workflow.</para>

          <para>The arguments declare what command-line arguments to pass to
          the job. If you are passing filenames, you should refer to the
          logical filename using the <emphasis>file</emphasis> element in the
          argument list.</para>

          <para>Important for properly planning the task is the list of files
          consumed by the task, its input files, and the files produced by the
          task, its output files. Each file is described with a
          <emphasis>uses</emphasis> element inside the task.</para>

          <para>Elements exist to link a logical file to any of the stdio file
          descriptors. The <emphasis>profile</emphasis> element is Pegasus's
          way to abstract site-specific data.</para>

          <para>Jobs are nodes in the workflow graph. Other nodes include
          unplanned workflows (DAX), which are planned and then run when the
          node runs, and planned workflows (DAG), which are simply
          executed.</para>
        </listitem>

        <listitem>
          <para>Control-flow Dependencies</para>

          <para>The third section lists the dependencies between the tasks.
          The relationships are defined as child parent relationships, and
          thus impacts the order in which tasks are run. No cyclic
          dependencies are permitted.</para>

          <para>Dependencies are directed edges in the workflow graph.</para>
        </listitem>
      </orderedlist>

      <section>
        <title>XML Intro</title>

        <para>If you have seen the DAX schema before, not a lot of new items
        in the root element. <emphasis>However</emphasis>, we did retire the
        (old) attributes ending in <emphasis>Count</emphasis>.</para>

        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- generated: 2011-07-28T18:29:57Z --&gt;
&lt;adag xmlns="http://pegasus.isi.edu/schema/DAX"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://pegasus.isi.edu/schema/DAX http://pegasus.isi.edu/schema/dax-3.6.xsd"
      version="3.6"
      name="diamond"
      index="0"
      count="1"&gt;</programlisting>

        <para>The following attributes are supported for the root element
        <emphasis>adag</emphasis>.</para>

        <table>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>attribute</entry>

                <entry>optional?</entry>

                <entry>type</entry>

                <entry>meaning</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>version</entry>

                <entry>required</entry>

                <entry>
                  <emphasis>VersionPattern</emphasis>
                </entry>

                <entry>Version number of DAX instance document. Must be
                3.6.</entry>
              </row>

              <row>
                <entry>name</entry>

                <entry>required</entry>

                <entry>string</entry>

                <entry>name of this DAX (or set of DAXes).</entry>
              </row>

              <row>
                <entry>count</entry>

                <entry>optional</entry>

                <entry>positiveInteger</entry>

                <entry>size of list of DAXes with this
                <emphasis>name</emphasis>. Defaults to 1.</entry>
              </row>

              <row>
                <entry>index</entry>

                <entry>optional</entry>

                <entry>nonNegativeInteger</entry>

                <entry>current index of DAX with same
                <emphasis>name</emphasis>. Defaults to 0.</entry>
              </row>

              <row>
                <entry>fileCount</entry>

                <entry>removed</entry>

                <entry>nonNegativeInteger</entry>

                <entry>Old 2.1 attribute, removed, do not use.</entry>
              </row>

              <row>
                <entry>jobCount</entry>

                <entry>removed</entry>

                <entry>positiveInteger</entry>

                <entry>Old 2.1 attribute, removed, do not use.</entry>
              </row>

              <row>
                <entry>childCount</entry>

                <entry>removed</entry>

                <entry>nonNegativeInteger</entry>

                <entry>Old 2.1 attribute, removed, do not use.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>The <emphasis>version</emphasis> attribute is restricted to the
        regular expression <code>\d+(\.\d+(\.\d+)?)?</code>.This expression
        represents the <emphasis>VersionPattern</emphasis> type that is used
        in other places, too. It is a more restrictive expression than before,
        but allows us to compute comparable version number using the following
        formula:</para>

        <informaltable border="1">
          <tr>
            <td>version1: a.b.c</td>

            <td>version2: d.e.f</td>
          </tr>

          <tr>
            <td>n = a * 1,000,000 + b * 1,000 + c</td>

            <td>m = d * 1,000,000 + e * 1,000 + f</td>
          </tr>

          <tr>
            <td align="center" colspan="2">version1 &gt; version2 if n &gt;
            m</td>
          </tr>
        </informaltable>
      </section>

      <section>
        <title>Workflow-level Metadata</title>

        <para>Metadata associated with the whole workflow.</para>

        <programlisting>   &lt;metadata key="name"&gt;diamond&lt;/metadata&gt;
   &lt;metadata key="createdBy"&gt;Karan Vahi&lt;/metadata&gt;</programlisting>

        <para>The workflow level metadata maybe used to control the Pegasus
        Mapper behaviour at planning time or maybe propogated to external
        services while querying for job characteristics.</para>
      </section>

      <section>
        <title>Workflow-level Notifications</title>

        <para>Notifications that are generated when workflow level events
        happened.</para>

        <programlisting>  &lt;!-- part 1.1: invocations --&gt;
  &lt;invoke when="at_end"&gt;/bin/date -Ins &amp;gt;&amp;gt; my.log&lt;/invoke&gt;</programlisting>

        <para>The above snippet will append the current time to a log file in
        the current directory. This is with regards to the pegasus-monitord
        instance acting on the <link
        linkend="notifications">notification</link>.</para>
      </section>

      <section>
        <title>The Catalogs Section</title>

        <para>The initial section features three sub-sections:</para>

        <orderedlist>
          <listitem>
            <para>a catalog of files used,</para>
          </listitem>

          <listitem>
            <para>a catalog of transformations used, and</para>
          </listitem>

          <listitem>
            <para>compound transformation declarations.</para>
          </listitem>
        </orderedlist>

        <section id="dax_replica_catalog">
          <title>The Replica Catalog Section</title>

          <para>The file section acts as in in-file replica catalog (RC). Any
          files declared in this section take precedence over files in
          external replica catalogs during planning.</para>

          <programlisting>  &lt;!-- part 1.2: included replica catalog --&gt;
  &lt;file name="example.a" &gt;
    &lt;!-- profiles are optional --&gt;
    &lt;!-- The "stat" namespace is ONLY AN EXAMPLE --&gt;
    &lt;profile namespace="stat" key="size"&gt;/* integer to be defined */&lt;/profile&gt;
    &lt;profile namespace="stat" key="md5sum"&gt;/* 32 char hex string */&lt;/profile&gt;
    &lt;profile namespace="stat" key="mtime"&gt;/* ISO-8601 timestamp */&lt;/profile&gt;

    &lt;!-- Metadata will be supported 4.6 onwards--&gt;
    &lt;metadata key="timestamp" &gt;/* ISO-8601 *or* 20100417134523:int */&lt;/metadata&gt;
    &lt;metadata key="origin" &gt;ocean&lt;/metadata&gt;

    &lt;!-- PFN to by-pass replica catalog --&gt;
    &lt;!-- The "site attribute is optional --&gt;
    &lt;pfn url="file:///tmp/example.a" site="local"&gt;
      &lt;profile namespace="stat" key="owner"&gt;voeckler&lt;/profile&gt;
    &lt;/pfn&gt;
    &lt;pfn url="file:///storage/funky.a" site="local"/&gt;
  &lt;/file&gt;

  &lt;!-- a more typical example from the black diamond --&gt;
  &lt;file name="f.a"&gt;
    &lt;pfn url="file:///Users/voeckler/f.a" site="local"/&gt;
  &lt;/file&gt;</programlisting>

          <para>The first <emphasis>file</emphasis> entry above is an example
          of a data file with two replicas. The <emphasis>file</emphasis>
          element requires a logical file <emphasis>name</emphasis>. Each
          logical filename may have additional information associated with it,
          enumerated by <emphasis>profile</emphasis> elements. Each file entry
          may have 0 or more <emphasis>metadata</emphasis> associated with it.
          Each piece of metadata has a <emphasis>key</emphasis> string and
          <emphasis>type</emphasis> attribute describing the element's
          value.</para>

          <warning>
            <para>The <emphasis>metadata</emphasis> element is not support as
            of this writing! Details may change in the future.</para>
          </warning>

          <para>The <emphasis>file</emphasis> element can provide 0 or more
          <emphasis>pfn</emphasis> locations, taking precedence over the
          replica catalog. A <emphasis>file</emphasis> element that does not
          name any <emphasis>pfn</emphasis> children-elements will still
          require look-ups in external replica catalogs. Each
          <emphasis>pfn</emphasis> element names a concrete location of a
          file. Multiple locations constitute replicas of the same file, and
          are assumed to be usable interchangably. The
          <emphasis>url</emphasis> attribute is mandatory, and typically would
          use a file schema URL. The <emphasis>site</emphasis> attribute is
          optional, and defaults to value <emphasis>local</emphasis> if
          missing. A <emphasis>pfn</emphasis> element may have
          <emphasis>profile</emphasis> children-elements, which refer to
          attributes of the physical file. The file-level profiles refer to
          attributes of the logical file.</para>

          <note>
            <para>The <literal>stat</literal> profile namespace is ony an
            example, and details about stat are not yet implemented. The
            proper namespaces <literal>pegasus</literal>,
            <literal>condor</literal>, <literal>dagman</literal>,
            <literal>env</literal>, <literal>hints</literal>,
            <literal>globus</literal> and <literal>selector</literal> enjoy
            full support.</para>
          </note>

          <para>The second <emphasis>file</emphasis> entry above shows a usage
          example from the black-diamond example workflow that you are more
          likely to encouter or write.</para>

          <para>The presence of an in-file replica catalog lets you declare a
          couple of interesting advanced features. The DAG and DAX file
          declarations are just files for all practical purposes. For deferred
          planning, the location of the site catalog (SC) can be captured in a
          file, too, that is passed to the job dealing with the deferred
          planning as logical filename.</para>

          <programlisting>  &lt;file name="black.dax" &gt;
    &lt;!-- specify the location of the DAX file --&gt;
    &lt;pfn url="file:///Users/vahi/Pegasus/work/dax-3.0/blackdiamond_dax.xml" site="local"/&gt;
  &lt;/file&gt;

  &lt;file name="black.dag" &gt;
    &lt;!-- specify the location of the DAG file --&gt;
    &lt;pfn url="file:///Users/vahi/Pegasus/work/dax-3.0/blackdiamond.dag" site="local"/&gt;
  &lt;/file&gt;

  &lt;file name="sites.xml" &gt;
    &lt;!-- specify the location of a site catalog to use for deferred planning --&gt;
    &lt;pfn url="file:///Users/vahi/Pegasus/work/dax-3.0/conf/sites.xml" site="local"/&gt;
  &lt;/file&gt;</programlisting>
        </section>

        <section id="dax_transformation_catalog" label="">
          <title>The Transformation Catalog Section</title>

          <para>The executable section acts as an in-file transformation
          catalog (TC). Any transformations declared in this section take
          precedence over the external transformation catalog during
          planning.</para>

          <programlisting>  &lt;!-- part 1.3: included transformation catalog --&gt;
  &lt;executable namespace="example" name="mDiffFit" version="1.0"
              arch="x86_64" os="linux" installed="true" &gt;
    &lt;!-- profiles are optional --&gt;
    &lt;!-- The "stat" namespace is ONLY AN EXAMPLE! --&gt;
    &lt;profile namespace="stat" key="size"&gt;5000&lt;/profile&gt;
    &lt;profile namespace="stat" key="md5sum"&gt;AB454DSSDA4646DS&lt;/profile&gt;
    &lt;profile namespace="stat" key="mtime"&gt;2010-11-22T10:05:55.470606000-0800&lt;/profile&gt;

    &lt;!-- metadata will be supported in 4.6 --&gt;
    &lt;metadata key="timestamp" &gt;/* see above */&lt;/metadata&gt;
    &lt;metadata key="origin"&gt;ocean&lt;/metadata&gt;

    &lt;!-- PFN to by-pass transformation catalog --&gt;
    &lt;!-- The "site" attribute is optional --&gt;
    &lt;pfn url="file:///tmp/mDiffFit"          site="local"/&gt;
    &lt;pfn url="file:///tmp/storage/mDiffFit"  site="local"/&gt;
  &lt;/executable&gt;

  &lt;!-- to be used in compound transformation later --&gt;
  &lt;executable namespace="example" name="mDiff" version="1.0"
              arch="x86_64" os="linux" installed="true" &gt;
    &lt;pfn url="file:///tmp/mDiff" site="local"/&gt;
  &lt;/executable&gt;

  &lt;!-- to be used in compound transformation later --&gt;
  &lt;executable namespace="example" name="mFitplane" version="1.0"
              arch="x86_64" os="linux" installed="true" &gt;
    &lt;pfn url="file:///tmp/mDiffFitplane"  site="local"&gt;
      &lt;profile namespace="stat" key="md5sum"&gt;0a9c38b919c7809cb645fc09011588a6&lt;/profile&gt;
    &lt;/pfn&gt;
    &lt;invoke when="at_end"&gt;/path/to/my_send_email some args&lt;/invoke&gt;
  &lt;/executable&gt;

  &lt;!-- a more likely example from the black diamond --&gt;
  &lt;executable namespace="diamond" name="preprocess" version="2.0"
              arch="x86_64"
              os="linux"
              osversion="2.6.18"&gt;
    &lt;pfn url="file:///opt/pegasus/default/bin/keg" site="local" /&gt;
  &lt;/executable&gt;</programlisting>

          <para>Logical filenames pertaining to a single executables in the
          transformation catalog use the <emphasis>executable</emphasis>
          element. Any <emphasis>executable</emphasis> element features the
          optional <emphasis>namespace</emphasis> attribute, a mandatory
          <emphasis>name</emphasis> attribute, and an optional
          <emphasis>version</emphasis> attribute. The
          <emphasis>version</emphasis> attribute defaults to "1.0" when
          absent. An executable typically needs additional attributes to
          describe it properly, like the architecture, OS release and other
          flags typically seen with transformations, or found in the
          transformation catalog.</para>

          <table>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>attribute</entry>

                  <entry>optional?</entry>

                  <entry>type</entry>

                  <entry>meaning</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>name</entry>

                  <entry>required</entry>

                  <entry>string</entry>

                  <entry>logical transformation name</entry>
                </row>

                <row>
                  <entry>namespace</entry>

                  <entry>optional</entry>

                  <entry>string</entry>

                  <entry>namespace of logical transformation, default to
                  <emphasis>null</emphasis> value.</entry>
                </row>

                <row>
                  <entry>version</entry>

                  <entry>optional</entry>

                  <entry>VersionPattern</entry>

                  <entry>version of logical transformation, defaults to
                  "1.0".</entry>
                </row>

                <row>
                  <entry>installed</entry>

                  <entry>optional</entry>

                  <entry>boolean</entry>

                  <entry>whether to stage the file (false), or not (true,
                  default).</entry>
                </row>

                <row>
                  <entry>arch</entry>

                  <entry>optional</entry>

                  <entry>Architecture</entry>

                  <entry>restricted set of tokens, see schema definition
                  file.</entry>
                </row>

                <row>
                  <entry>os</entry>

                  <entry>optional</entry>

                  <entry>OSType</entry>

                  <entry>restricted set of tokens, see schema definition
                  file.</entry>
                </row>

                <row>
                  <entry>osversion</entry>

                  <entry>optional</entry>

                  <entry>VersionPattern</entry>

                  <entry>kernel version as beginning of `uname -r`.</entry>
                </row>

                <row>
                  <entry>glibc</entry>

                  <entry>optional</entry>

                  <entry>VersionPattern</entry>

                  <entry>version of libc.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>The rationale for giving these flags in the
          <emphasis>executable</emphasis> element header is that PFNs are just
          identical replicas or instances of a given LFN. If you need a
          different 32/64 bit-ed-ness or OS release, the underlying PFN would
          be different, and thus the LFN for it should be different,
          too.</para>

          <note>
            <para>We are still discussing some details and implications of
            this decision.</para>
          </note>

          <para>The initial examples come with the same caveats as for the
          included replica catalog.</para>

          <warning>
            <para>The <emphasis>metadata</emphasis> element is not support as
            of this writing! Details may change in the future.</para>
          </warning>

          <para>Similar to the replica catalog, each
          <emphasis>executable</emphasis> element may have 0 or more
          <emphasis>profile</emphasis> elements abstracting away site-specific
          details, zero or more <emphasis>metadata</emphasis> elements, and
          zero or more <emphasis>pfn</emphasis> elements. If there are no
          <emphasis>pfn</emphasis> elements, the transformation must still be
          searched for in the external transformation catalog. As before, the
          <emphasis>pfn</emphasis> element may have
          <emphasis>profile</emphasis> children-elements, referring to
          attributes of the physical filename itself.</para>

          <para>Each <emphasis>executable</emphasis> element may also feature
          <emphasis>invoke</emphasis> elements. These enable notifications at
          the appropriate point when every job that uses this executable
          reaches the point of notification. Please refer to the <link
          linkend="notifications">notification section</link> for details and
          caveats.</para>

          <para>The last example above comes from the black diamond example
          workflow, and presents the kind and extend of attributes you are
          most likely to see and use in your own workflows.</para>
        </section>

        <section>
          <title>The Compound Transformation Section</title>

          <para>The compound transformation section declares a transformation
          that comprises multiple plain transformation. You can think of a
          compound transformation like a script interpreter and the script
          itself. In order to properly run the application, you must start
          both, the script interpreter and the script passed to it. The
          compound transformation helps Pegasus to properly deal with this
          case, especially when it needs to stage executables.</para>

          <programlisting>  &lt;transformation namespace="example" version="1.0" name="mDiffFit" &gt;
    &lt;uses name="mDiffFit" /&gt;
    &lt;uses name="mDiff" namespace="example" version="2.0" /&gt;
    &lt;uses name="mFitPlane" /&gt;
    &lt;uses name="mDiffFit.config" executable="false" /&gt;
  &lt;/transformation&gt;</programlisting>

          <para>A <emphasis>transformation</emphasis> element declares a set
          of purely logical entities, executables and config (data) files,
          that are all required together for the same job. Being purely
          logical entities, the lookup happens only when the transformation
          element is referenced (or instantiated) by a job element later
          on.</para>

          <para>The <emphasis>namespace</emphasis> and
          <emphasis>version</emphasis> attributes of the transformation
          element are optional, and provide the defaults for the inner uses
          elements. They are also essential for matching the transformation
          with a job.</para>

          <para>The <emphasis>transformation</emphasis> is made up of 1 or
          more <emphasis>uses</emphasis> element. Each
          <emphasis>uses</emphasis> has a boolean attribute
          <emphasis>executable</emphasis>, <literal>true</literal> by default,
          or <literal>false</literal> to indicate a data file. The
          <emphasis>name</emphasis> is a mandatory attribute, refering to an
          LFN declared previously in the File Catalog
          (<emphasis>executable</emphasis> is <literal>false</literal>),
          Executable Catalog (<emphasis>executable</emphasis> is
          <literal>true</literal>), or to be looked up as necessary at
          instantiation time. The lookup catalog is determined by the
          <emphasis>executable</emphasis> attribute.</para>

          <para>After <emphasis>uses</emphasis> elements, any number of
          <emphasis>invoke</emphasis> elements may occur to add a <link
          linkend="notifications">notification</link> each whenever this
          transformation is instantiated.</para>

          <para>The <emphasis>namespace</emphasis> and
          <emphasis>version</emphasis> attributes' default values inside
          <emphasis>uses</emphasis> elements are inherited from the
          <emphasis>transformation</emphasis> attributes of the same name.
          There is no such inheritance for <emphasis>uses</emphasis> elements
          with <emphasis>executable</emphasis> attribute of
          <literal>false</literal>.</para>
        </section>
      </section>

      <section id="api-graph-nodes">
        <title>Graph Nodes</title>

        <para>The nodes in the DAX comprise regular job nodes, already
        instantiated sub-workflows as dag nodes, and still to be instantiated
        dax nodes. Each of the graph nodes can has a mandatory
        <emphasis>id</emphasis> attribute. The <emphasis>id</emphasis>
        attribute is currently a restriction of type
        <emphasis>NodeIdentifierPattern</emphasis> type, which is a
        restriction of the <code>xs:NMTOKEN</code> type to letters, digits,
        hyphen and underscore.</para>

        <para>The <emphasis>level</emphasis> attribute is deprecated, as the
        planner will trust its own re-computation more than user input. Please
        do not use nor produce any <emphasis>level</emphasis>
        attribute.</para>

        <para>The <emphasis>node-label</emphasis> attribute is optional. It
        applies to the use-case when every transformation has the same name,
        but its arguments determine what it really does. In the presence of a
        <emphasis>node-label</emphasis> value, a workflow grapher could use
        the label value to show graph nodes to the user. It may also come in
        handy while debugging.</para>

        <para>Any job-like graph node has the following set of children
        elements, as defined in the <emphasis>AbstractJobType</emphasis>
        declaration in the schema definition:</para>

        <itemizedlist>
          <listitem>
            <para>0 or 1 <emphasis>argument</emphasis> element to declare the
            command-line of the job's invocation.</para>
          </listitem>

          <listitem>
            <para>0 or more <emphasis>profile</emphasis> elements to abstract
            away site-specific or job-specific details.</para>
          </listitem>

          <listitem>
            <para>0 or 1 <emphasis>stdin</emphasis> element to link a logical
            file the the job's standard input.</para>
          </listitem>

          <listitem>
            <para>0 or 1 <emphasis>stdout</emphasis> element to link a logical
            file to the job's standard output.</para>
          </listitem>

          <listitem>
            <para>0 or 1 <emphasis>stderr</emphasis> element to link a logical
            file to the job's standard error.</para>
          </listitem>

          <listitem>
            <para>0 or more <emphasis>uses</emphasis> elements to declare
            consumed data files and produced data files.</para>
          </listitem>

          <listitem>
            <para>0 or more <emphasis>invoke</emphasis> elements to solicit
            <link linkend="notifications">notifications</link> whence a job
            reaches a certain state in its life-cycle.</para>
          </listitem>
        </itemizedlist>

        <section id="api-job-nodes">
          <title>Job Nodes</title>

          <para>A job element has a number of attributes. In addition to the
          <emphasis>id</emphasis> and <emphasis>node-label</emphasis>
          described in (Graph Nodes)above, the optional
          <emphasis>namespace</emphasis>, mandatory <emphasis>name</emphasis>
          and optional <emphasis>version</emphasis> identify the
          transformation, and provide the look-up handle: first in the DAX's
          <emphasis>transformation</emphasis> elements, then in the
          <emphasis>executable</emphasis> elements, and finally in an external
          transformation catalog.</para>

          <programlisting>  &lt;!-- part 2: definition of all jobs (at least one) --&gt;
  &lt;job id="ID000001" namespace="example" name="mDiffFit" version="1.0"
       node-label="preprocess" &gt;
    &lt;argument&gt;-a top -T 6  -i &lt;file name="f.a"/&gt;  -o &lt;file name="f.b1"/&gt;&lt;/argument&gt;

    &lt;!-- profiles are optional --&gt;
    &lt;profile namespace="execution" key="site"&gt;isi_viz&lt;/profile&gt;
    &lt;profile namespace="condor" key="getenv"&gt;true&lt;/profile&gt;

     &lt;uses name="f.a" link="input" transfer="true" register="true"&gt;
         &lt;metadata key="size"&gt;1024&lt;/metadata&gt;
      &lt;/uses&gt;
    &lt;uses name="f.b" link="output" register="false" transfer="true" type="data" /&gt;

    &lt;!-- 'WHEN' enumeration: never, start, on_error, on_success, at_end, all --&gt;
    &lt;!-- PEGASUS_* env-vars: event, status, submit dir, wf/job id, stdout, stderr --&gt;
    &lt;invoke when="start"&gt;/path/to arg arg&lt;/invoke&gt;
    &lt;invoke when="on_success"&gt;&lt;![CDATA[/path/to arg arg]]&gt;&lt;/invoke&gt;
    &lt;invoke when="at_end"&gt;&lt;![CDATA[/path/to arg arg]]&gt;&lt;/invoke&gt;
  &lt;/job&gt;</programlisting>

          <para>The <emphasis>argument</emphasis> element contains the
          complete command-line that is needed to invoke the executable. The
          only variable components are logical filenames, as included
          <emphasis>file</emphasis> elements.</para>

          <para>The <emphasis>profile</emphasis> argument lets you encapsulate
          site-specific knowledge .</para>

          <para>The <emphasis>stdin</emphasis>, <emphasis>stdout</emphasis>
          and <emphasis>stderr</emphasis> element permits you to connect a
          stdio file descriptor to a logical filename. Note that you will
          still have to declare these files in the <emphasis>uses</emphasis>
          section below.</para>

          <para>The <emphasis>uses</emphasis> element enumerates all the files
          that the task consumes or produces. While it is not necessary nor
          required to have all files appear on the command-line, it is
          imperative that you declare even hidden files that your task
          requires in this section, so that the proper ancilliary staging- and
          clean-up tasks can be generated during planning.</para>

          <para>The <emphasis>invoke</emphasis> element may be specified
          multiple times, as needed. It has a mandatory when attribute with
          the following value set:</para>

          <table>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry align="center">keyword</entry>

                  <entry align="center">job life-cycle state</entry>

                  <entry align="center">meaning</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>never</entry>

                  <entry>never</entry>

                  <entry>(default). Never notify of anything. This is useful
                  to temporarily disable an existing notifications.</entry>
                </row>

                <row>
                  <entry>start</entry>

                  <entry>submit</entry>

                  <entry>create a notification when the job is
                  submitted.</entry>
                </row>

                <row>
                  <entry>on_error</entry>

                  <entry>end</entry>

                  <entry>after a job finishes with failure (exitcode !=
                  0).</entry>
                </row>

                <row>
                  <entry>on_success</entry>

                  <entry>end</entry>

                  <entry>after a job finishes with success (exitcode ==
                  0).</entry>
                </row>

                <row>
                  <entry>at_end</entry>

                  <entry>end</entry>

                  <entry>after a job finishes, regardless of exitcode.</entry>
                </row>

                <row>
                  <entry>all</entry>

                  <entry>always</entry>

                  <entry>like start and at_end combined.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <warning>
            <para>In clustered jobs, a notification can only be sent at the
            start or end of the clustered job, not for each member.</para>
          </warning>

          <para>Each <emphasis>invoke</emphasis> is a simple local invocation
          of an executable or script with the specified arguments. The
          executable inside the invoke body will see the following environment
          variables:</para>

          <table>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry align="center">variable</entry>

                  <entry align="center">job life-cycle state</entry>

                  <entry align="center">meaning</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry>PEGASUS_EVENT</entry>

                  <entry>always</entry>

                  <entry>The value of the <code>when</code> attribute</entry>
                </row>

                <row>
                  <entry>PEGASUS_STATUS</entry>

                  <entry>end</entry>

                  <entry>The exit status of the graph node. Only available for
                  end notifications.</entry>
                </row>

                <row>
                  <entry>PEGASUS_SUBMIT_DIR</entry>

                  <entry>always</entry>

                  <entry>In which directory to find the job (or
                  workflow).</entry>
                </row>

                <row>
                  <entry>PEGASUS_JOBID</entry>

                  <entry>always</entry>

                  <entry>The job (or workflow) identifier. This is potentially
                  more than merely the value of the <emphasis>id</emphasis>
                  attribute.</entry>
                </row>

                <row>
                  <entry>PEGASUS_STDOUT</entry>

                  <entry>always</entry>

                  <entry>The filename where <emphasis>stdout</emphasis> goes.
                  Empty and possibly non-existent at submit time (though we
                  still have the filename). The kickstart record for job
                  nodes.</entry>
                </row>

                <row>
                  <entry>PEGASUS_STDERR</entry>

                  <entry>always</entry>

                  <entry>The filename where <emphasis>stderr</emphasis> goes.
                  Empty and possibly non-existent at submit time (though we
                  still have the filename).</entry>
                </row>
              </tbody>
            </tgroup>
          </table>

          <para>Generators should use CDATA encapsulated values to the invoke
          element to minimize interference. Unfortunately, CDATA cannot be
          nested, so if the user invocation contains a CDATA section, we
          suggest that they use careful XML-entity escaped strings. The <link
          linkend="notifications">notifications section</link> describes these
          in further detail.</para>
        </section>

        <section>
          <title>DAG Nodes</title>

          <para>A workflow that has already been concretized, either by an
          earlier run of Pegasus, or otherwise constructed for DAGMan
          execution, can be included into the current workflow using the
          <emphasis>dag</emphasis> element.</para>

          <programlisting>  &lt;dag id="ID000003" name="black.dag" node-label="foo" &gt;
    &lt;profile namespace="dagman" key="DIR"&gt;/dag-dir/test&lt;/profile&gt;
    &lt;invoke&gt; &lt;!-- optional, should be possible --&gt; &lt;/invoke&gt;
    &lt;uses file="sites.xml" link="input" register="false" transfer="true" type="data"/&gt;
  &lt;/dag&gt;</programlisting>

          <para>The <emphasis>id</emphasis> and
          <emphasis>node-label</emphasis> attributes were described <link
          linkend="api-graph-nodes">previously</link>. The
          <emphasis>name</emphasis> attribute refers to a file from the File
          Catalog that provides the actual DAGMan DAG as data content. The
          <emphasis>dag</emphasis> element features optional
          <emphasis>profile</emphasis> elements. These would most likely
          pertain to the <literal>dagman</literal> and <literal>env</literal>
          profile namespaces. It should be possible to have the optional
          <emphasis>notify</emphasis> element in the same manner as for
          jobs.</para>

          <para>A graph node that is a dag instead of a job would just use a
          different submit file generator to create a DAGMan invocation. There
          can be an <emphasis>argument</emphasis> element to modify the
          command-line passed to DAGMan.</para>
        </section>

        <section>
          <title>DAX Nodes</title>

          <para>A still to be planned workflow incurs an invocation of the
          Pegasus planner as part of the workflow. This still abstract
          sub-workflow uses the <emphasis>dax</emphasis> element.</para>

          <programlisting>  &lt;dax id="ID000002" name="black.dax" node-label="bar" &gt;
    &lt;profile namespace="env" key="foo"&gt;bar&lt;/profile&gt;
    &lt;argument&gt;-Xmx1024 -Xms512 -Dpegasus.dir.storage=storagedir  -Dpegasus.dir.exec=execdir -o local --dir ./datafind -vvvvv --force -s dax_site &lt;/argument&gt;
    &lt;invoke&gt; &lt;!-- optional, may not be possible here --&gt; &lt;/invoke&gt;
    &lt;uses file="sites.xml" link="input" register="false" transfer="true" type="data" /&gt;
  &lt;/dax&gt;</programlisting>

          <para>In addition to the <emphasis>id</emphasis> and
          <emphasis>node-label</emphasis> attributes, See <link
          linkend="api-graph-nodes">Graph Nodes</link>. The
          <emphasis>name</emphasis> attribute refers to a file from the File
          Catalog that provides the to be planned DAX as external file data
          content. The <emphasis>dax</emphasis> element features optional
          <emphasis>profile</emphasis> elements. These would most likely
          pertain to the <literal>pegasus</literal>, <literal>dagman</literal>
          and <literal>env</literal> profile namespaces. It may be possible to
          have the optional <emphasis>notify</emphasis> element in the same
          manner as for jobs.</para>

          <para>A graph node that is a <emphasis>dax</emphasis> instead of a
          job would just use yet another submit file and pre-script generator
          to create a DAGMan invocation. The <emphasis>argument</emphasis>
          string pertains to the command line of the to-be-generated DAGMan
          invocation.</para>
        </section>

        <section>
          <title>Inner ADAG Nodes</title>

          <para>While completeness would argue to have a recursive nesting of
          <emphasis>adag</emphasis> elements, such recursive nestings are
          currently not supported, not even in the schema. If you need to nest
          workflows, please use the <emphasis>dax</emphasis> or
          <emphasis>dag</emphasis> element to achieve the same goal.</para>
        </section>
      </section>

      <section>
        <title>The Dependency Section</title>

        <para>This section describes the dependencies between the jobs.</para>

        <programlisting>  &lt;!-- part 3: list of control-flow dependencies --&gt;
  &lt;child ref="ID000002"&gt;
    &lt;parent ref="ID000001" edge-label="edge1" /&gt;
  &lt;/child&gt;
  &lt;child ref="ID000003"&gt;
    &lt;parent ref="ID000001" edge-label="edge2" /&gt;
  &lt;/child&gt;
  &lt;child ref="ID000004"&gt;
    &lt;parent ref="ID000002" edge-label="edge3" /&gt;
    &lt;parent ref="ID000003" edge-label="edge4" /&gt;
  &lt;/child&gt;</programlisting>

        <para>Each <emphasis>child</emphasis> element contains one or more
        <emphasis>parent</emphasis> element. Either element refers to a
        <emphasis>job</emphasis>, <emphasis>dag</emphasis> or
        <emphasis>dax</emphasis> element id attribute using the
        <emphasis>ref</emphasis> attribute. In this version, we relaxed the
        <code>xs:IDREF</code> constraint in favor of a restriction on the
        <code>xs:NMTOKEN</code> type to permit a larger set of
        identifiers.</para>

        <para>The <emphasis>parent</emphasis> element has an optional
        <emphasis>edge-label</emphasis> attribute.</para>

        <warning>
          <para>The <emphasis>edge-label</emphasis> attribute is currently
          unused.</para>
        </warning>

        <para>Its goal is to annotate edges when drawing workflow
        graphs.</para>
      </section>

      <section>
        <title>Closing</title>

        <para>As any XML element, the root element needs to be closed.</para>

        <programlisting>&lt;/adag&gt;</programlisting>
      </section>
    </section>

    <section>
      <title>DAX XML Schema Example</title>

      <para>The following code example shows the XML instance document
      representing the diamond workflow.</para>

      <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;adag xmlns="http://pegasus.isi.edu/schema/DAX"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://pegasus.isi.edu/schema/DAX http://pegasus.isi.edu/schema/dax-3.6.xsd"
 version="3.6" name="diamond" index="0" count="1"&gt;
  &lt;!-- part 1.1: invocations --&gt;
  &lt;invoke when="on_error"&gt;/bin/mailx -s &amp;apos;diamond failed&amp;apos; use@some.domain&lt;/invoke&gt;

  &lt;!-- part 1.2: included replica catalog --&gt;
  &lt;file name="f.a"&gt;
    &lt;pfn url="file:///lfs/voeckler/src/svn/pegasus/trunk/examples/grid-blackdiamond-perl/f.a" site="local" /&gt;
  &lt;/file&gt;

  &lt;!-- part 1.3: included transformation catalog --&gt;
  &lt;executable namespace="diamond" name="preprocess" version="2.0" arch="x86_64" os="linux" installed="false"&gt;
    &lt;profile namespace="globus" key="maxtime"&gt;2&lt;/profile&gt;
    &lt;profile namespace="dagman" key="RETRY"&gt;3&lt;/profile&gt;
    &lt;pfn url="file:///opt/pegasus/latest/bin/keg" site="local" /&gt;
  &lt;/executable&gt;
  &lt;executable namespace="diamond" name="analyze" version="2.0" arch="x86_64" os="linux" installed="false"&gt;
    &lt;profile namespace="globus" key="maxtime"&gt;2&lt;/profile&gt;
    &lt;profile namespace="dagman" key="RETRY"&gt;3&lt;/profile&gt;
    &lt;pfn url="file:///opt/pegasus/latest/bin/keg" site="local" /&gt;
  &lt;/executable&gt;
  &lt;executable namespace="diamond" name="findrange" version="2.0" arch="x86_64" os="linux" installed="false"&gt;
    &lt;profile namespace="globus" key="maxtime"&gt;2&lt;/profile&gt;
    &lt;profile namespace="dagman" key="RETRY"&gt;3&lt;/profile&gt;
    &lt;pfn url="file:///opt/pegasus/latest/bin/keg" site="local" /&gt;
  &lt;/executable&gt;

  &lt;!-- part 2: definition of all jobs (at least one) --&gt;
  &lt;job namespace="diamond" name="preprocess" version="2.0" id="ID000001"&gt;
    &lt;argument&gt;-a preprocess -T60 -i &lt;file name="f.a" /&gt; -o &lt;file name="f.b1" /&gt; &lt;file name="f.b2" /&gt;&lt;/argument&gt;
    &lt;uses name="f.b2" link="output" register="false" transfer="true" /&gt;
    &lt;uses name="f.b1" link="output" register="false" transfer="true" /&gt;
    &lt;uses name="f.a" link="input" /&gt;
  &lt;/job&gt;
  &lt;job namespace="diamond" name="findrange" version="2.0" id="ID000002"&gt;
    &lt;argument&gt;-a findrange -T60 -i &lt;file name="f.b1" /&gt; -o &lt;file name="f.c1" /&gt;&lt;/argument&gt;
    &lt;uses name="f.b1" link="input" register="false" transfer="true" /&gt;
    &lt;uses name="f.c1" link="output" register="false" transfer="true" /&gt;
  &lt;/job&gt;
  &lt;job namespace="diamond" name="findrange" version="2.0" id="ID000003"&gt;
    &lt;argument&gt;-a findrange -T60 -i &lt;file name="f.b2" /&gt; -o &lt;file name="f.c2" /&gt;&lt;/argument&gt;
    &lt;uses name="f.b2" link="input" register="false" transfer="true" /&gt;
    &lt;uses name="f.c2" link="output" register="false" transfer="true" /&gt;
  &lt;/job&gt;
  &lt;job namespace="diamond" name="analyze" version="2.0" id="ID000004"&gt;
    &lt;argument&gt;-a analyze -T60 -i &lt;file name="f.c1" /&gt; &lt;file name="f.c2" /&gt; -o &lt;file name="f.d" /&gt;&lt;/argument&gt;
    &lt;uses name="f.c2" link="input" register="false" transfer="true" /&gt;
    &lt;uses name="f.d" link="output" register="false" transfer="true" /&gt;
    &lt;uses name="f.c1" link="input" register="false" transfer="true" /&gt;
  &lt;/job&gt;

  &lt;!-- part 3: list of control-flow dependencies --&gt;
  &lt;child ref="ID000002"&gt;
    &lt;parent ref="ID000001" /&gt;
  &lt;/child&gt;
  &lt;child ref="ID000003"&gt;
    &lt;parent ref="ID000001" /&gt;
  &lt;/child&gt;
  &lt;child ref="ID000004"&gt;
    &lt;parent ref="ID000002" /&gt;
    &lt;parent ref="ID000003" /&gt;
  &lt;/child&gt;
&lt;/adag&gt;
</programlisting>

      <para>The above workflow defines the black diamond from the abstract
      workflow section of the <link linkend="about">Introduction</link>
      chapter. It will require minimal configuration, because the catalog
      sections include all necessary declarations.</para>

      <para>The file element defines the location of the required input file
      in terms of the local machine. Please note that</para>

      <itemizedlist>
        <listitem>
          <para>The <emphasis role="bold">file</emphasis> element declares the
          required input file "f.a" in terms of the local machine. Please note
          that if you plan the workflow for a remote site, the has to be some
          way for the file to be staged from the local site to the remote
          site. While Pegasus will augment the workflow with such ancillary
          jobs, the site catalog as well as local and remote site have to be
          set up properlyl. For a locally run workflow you don't need to do
          anything.</para>
        </listitem>

        <listitem>
          <para>The <emphasis role="bold">executable</emphasis> elements
          declare the same executable keg that is to be run for each the
          logical transformation in terms of the remote site
          <emphasis>futuregrid</emphasis>. To declare it for a local site, you
          would have to adjust the <emphasis>site</emphasis> attribute's value
          to <literal>local</literal>. This section also shows that the same
          executable may come in different guises as transformation.</para>
        </listitem>

        <listitem>
          <para>The <emphasis role="bold">job</emphasis> elements define the
          workflow's logical constituents, the way to invoke the
          <literal>keg</literal> command, where to put filenames on the
          commandline, and what files are consumed or produced. In addition to
          the direction of files, further attributes determine whether to
          register the file with a replica catalog and whether to transfer it
          to the output site in case of a product. We are only interested in
          the final data product "f.d" in this workflow, and not any
          intermediary files. Typically, you would also want to register the
          data products in the replica catalog, especially in larger
          scenarios.</para>
        </listitem>

        <listitem>
          <para>The <emphasis role="bold">child</emphasis> elements define the
          control flow between the jobs.</para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section id="dax_generator_api">
    <title>DAX Generator API</title>

    <para>The DAX generating APIs support Java, Perl and Python. This section
    will show in each language the necessary code, using Pegasus-provided
    libraries, to generate the diamond DAX example above. There may be minor
    differences in details, e.g. to show-case certain features, but
    effectively all generate the same basic diamond.</para>

    <section id="api-java">
      <title>The Java DAX Generator API</title>

      <para>The Java DAX API provided with the Pegasus distribution allows
      easy creation of complex and huge workflows. This API is used by several
      applications to generate their abstract DAX. SCEC, which is Southern
      California Earthquake Center, uses this API in their CyberShake workflow
      generator to generate huge DAX containing 10&amp;rsquor;s of thousands
      of tasks with 100&amp;rsquor;s of thousands of input and output files.
      The <ulink url="javadoc/index.html">Java API</ulink> is well documented
      using <ulink url="javadoc/edu/isi/pegasus/planner/dax/ADAG.html">Javadoc
      for ADAGs</ulink> .</para>

      <para>The steps involved in creating a DAX using the API are</para>

      <orderedlist>
        <listitem>
          <para>Create a new <emphasis>ADAG</emphasis> object</para>
        </listitem>

        <listitem>
          <para>Add any metadata attributes associated with the whole
          workflow.</para>
        </listitem>

        <listitem>
          <para>Add any Workflow notification elements</para>
        </listitem>

        <listitem>
          <para>Create <emphasis>File</emphasis> objects as necessary. You can
          augment the files with physical information, if you want to include
          them into your DAX. Otherwise, the physical information is
          determined from the replica catalog.</para>
        </listitem>

        <listitem>
          <para>(Optional) Create <emphasis>Executable</emphasis> objects, if
          you want to include your transformation catalog into your DAX.
          Otherwise, the translation of a job/task into executable location
          happens with the transformation catalog.</para>
        </listitem>

        <listitem>
          <para>Create a new <emphasis>Job</emphasis> object.</para>
        </listitem>

        <listitem>
          <para>Add arguments, files, profiles, notifications and other
          information to the <emphasis>Job</emphasis> object</para>
        </listitem>

        <listitem>
          <para>Add the job object to the <emphasis>ADAG</emphasis>
          object</para>
        </listitem>

        <listitem>
          <para>Repeat step 4-6 as necessary.</para>
        </listitem>

        <listitem>
          <para>Add all dependencies to the <emphasis>ADAG</emphasis>
          object.</para>
        </listitem>

        <listitem>
          <para>Call the <emphasis>writeToFile()</emphasis> method on the
          <emphasis>ADAG</emphasis> object to render the XML DAX file.</para>
        </listitem>
      </orderedlist>

      <para>An example Java code that generates the diamond dax show above is
      listed below. This same code can be found in the Pegasus distribution in
      the <filename
      class="directory">examples/grid-blackdiamond-java</filename> directory
      as <filename>BlackDiamonDAX.java</filename>:</para>

      <programlisting id="api-java-example">/**
 *  Copyright 2007-2008 University Of Southern California
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

import edu.isi.pegasus.planner.dax.*;


/**
 * An example class to highlight how to use the JAVA DAX API to generate a diamond
 * DAX.
 *
 */
public class Diamond {



    public class Diamond {



    public ADAG generate(String site_handle, String pegasus_location) throws Exception {

        java.io.File cwdFile = new java.io.File (".");
        String cwd = cwdFile.getCanonicalPath();

        ADAG dax = new ADAG("diamond");
        dax.addNotification(Invoke.WHEN.start,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addNotification(Invoke.WHEN.at_end,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addMetadata( "name", "diamond");
        dax.addMetadata( "createdBy", "Karan Vahi");

        File fa = new File("f.a");
        fa.addPhysicalFile("file://" + cwd + "/f.a", "local");
        fa.addMetaData( "size", "1024" );
        dax.addFile(fa);

        File fb1 = new File("f.b1");
        File fb2 = new File("f.b2");
        File fc1 = new File("f.c1");
        File fc2 = new File("f.c2");
        File fd = new File("f.d");
        fd.setRegister(true);

        Executable preprocess = new Executable("pegasus", "preprocess", "4.0");
        preprocess.setArchitecture(Executable.ARCH.X86).setOS(Executable.OS.LINUX);
        preprocess.setInstalled(true);
        preprocess.addPhysicalFile("file://" + pegasus_location + "/bin/keg", site_handle);
        preprocess.addMetaData( "size", "2048" );

        Executable findrange = new Executable("pegasus", "findrange", "4.0");
        findrange.setArchitecture(Executable.ARCH.X86).setOS(Executable.OS.LINUX);
        findrange.setInstalled(true);
        findrange.addPhysicalFile("file://" + pegasus_location + "/bin/keg", site_handle);

        Executable analyze = new Executable("pegasus", "analyze", "4.0");
        analyze.setArchitecture(Executable.ARCH.X86).setOS(Executable.OS.LINUX);
        analyze.setInstalled(true);
        analyze.addPhysicalFile("file://" + pegasus_location + "/bin/keg", site_handle);

        dax.addExecutable(preprocess).addExecutable(findrange).addExecutable(analyze);

        // Add a preprocess job
        Job j1 = new Job("j1", "pegasus", "preprocess", "4.0");
        j1.addArgument("-a preprocess -T 60 -i ").addArgument(fa);
        j1.addArgument("-o ").addArgument(fb1);
        j1.addArgument(" ").addArgument(fb2);
        j1.addMetadata( "time", "60" );
        j1.uses(fa, File.LINK.INPUT);
        j1.uses(fb1, File.LINK.OUTPUT);
        j1.uses(fb2, File.LINK.OUTPUT);
        j1.addNotification(Invoke.WHEN.start,"/pegasus/libexec/notification/email -t notify@example.com");
        j1.addNotification(Invoke.WHEN.at_end,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addJob(j1);

        // Add left Findrange job
        Job j2 = new Job("j2", "pegasus", "findrange", "4.0");
        j2.addArgument("-a findrange -T 60 -i ").addArgument(fb1);
        j2.addArgument("-o ").addArgument(fc1);
        j2.addMetadata( "time", "60" );
        j2.uses(fb1, File.LINK.INPUT);
        j2.uses(fc1, File.LINK.OUTPUT);
        j2.addNotification(Invoke.WHEN.start,"/pegasus/libexec/notification/email -t notify@example.com");
        j2.addNotification(Invoke.WHEN.at_end,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addJob(j2);

        // Add right Findrange job
        Job j3 = new Job("j3", "pegasus", "findrange", "4.0");
        j3.addArgument("-a findrange -T 60 -i ").addArgument(fb2);
        j3.addArgument("-o ").addArgument(fc2);
        j3.addMetadata( "time", "60" );
        j3.uses(fb2, File.LINK.INPUT);
        j3.uses(fc2, File.LINK.OUTPUT);
        j3.addNotification(Invoke.WHEN.start,"/pegasus/libexec/notification/email -t notify@example.com");
        j3.addNotification(Invoke.WHEN.at_end,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addJob(j3);

        // Add analyze job
        Job j4 = new Job("j4", "pegasus", "analyze", "4.0");
        j4.addArgument("-a analyze -T 60 -i ").addArgument(fc1);
        j4.addArgument(" ").addArgument(fc2);
        j4.addArgument("-o ").addArgument(fd);
        j4.addMetadata( "time", "60" );
        j4.uses(fc1, File.LINK.INPUT);
        j4.uses(fc2, File.LINK.INPUT);
        j4.uses(fd, File.LINK.OUTPUT);
        j4.addNotification(Invoke.WHEN.start,"/pegasus/libexec/notification/email -t notify@example.com");
        j4.addNotification(Invoke.WHEN.at_end,"/pegasus/libexec/notification/email -t notify@example.com");
        dax.addJob(j4);

        dax.addDependency("j1", "j2");
        dax.addDependency("j1", "j3");
        dax.addDependency("j2", "j4");
        dax.addDependency("j3", "j4");
        return dax;
    }

    /**
     * Create an example DIAMOND DAX
     * @param args
     */
    public static void main(String[] args) {
        if (args.length != 1) {
            System.out.println("Usage: java GenerateDiamondDAX  &lt;pegasus_location&gt; ");
            System.exit(1);
        }

        try {
            Diamond diamond = new Diamond();
            String pegasusHome = args[0];
            String site = "TestCluster";
            ADAG dag = diamond.generate( site, pegasusHome );
            dag.writeToSTDOUT();
            //generate(args[0], args[1]).writeToFile(args[2]);
        }
        catch (Exception e) {
            e.printStackTrace();
        }

    }
}

</programlisting>

      <para>Of course, you will have to set up some catalogs and properties to
      run this example. The details are catpured in the examples directory
      <filename
      class="directory">examples/grid-blackdiamond-java</filename>.</para>
    </section>

    <section id="api-python">
      <title>The Python DAX Generator API</title>

      <para>Refer to the <ulink url="python/">auto-generated python
      documentation</ulink> explaining this API.</para>

      <programlisting id="api-python-example">#!/usr/bin/env python

from Pegasus.DAX3 import *

# Create a DAX
diamond = ADAG("diamond")

# Add some metadata
diamond.metadata("name", "diamond")
diamond.metadata("createdby", "Gideon Juve")

# Add input file to the DAX-level replica catalog
a = File("f.a")
a.addPFN(PFN("gsiftp://site.com/inputs/f.a","site"))
a.metadata("size", "1024")
diamond.addFile(a)

# Add executables to the DAX-level replica catalog
e_preprocess = Executable(namespace="diamond", name="preprocess", version="4.0", os="linux", arch="x86_64")
e_preprocess.metadata("size", "2048")
e_preprocess.addPFN(PFN("gsiftp://site.com/bin/preprocess","site"))
diamond.addExecutable(e_preprocess)

e_findrange = Executable(namespace="diamond", name="findrange", version="4.0", os="linux", arch="x86_64")
e_findrange.addPFN(PFN("gsiftp://site.com/bin/findrange","site"))
diamond.addExecutable(e_findrange)

e_analyze = Executable(namespace="diamond", name="analyze", version="4.0", os="linux", arch="x86_64")
e_analyze.addPFN(PFN("gsiftp://site.com/bin/analyze","site"))
diamond.addExecutable(e_analyze)

# Add a preprocess job
preprocess = Job(e_preprocess)
preprocess.metadata("time", "60")
b1 = File("f.b1")
b2 = File("f.b2")
preprocess.addArguments("-a preprocess","-T60","-i",a,"-o",b1,b2)
preprocess.uses(a, link=Link.INPUT)
preprocess.uses(b1, link=Link.OUTPUT, transfer=True)
preprocess.uses(b2, link=Link.OUTPUT, transfer=True)
diamond.addJob(preprocess)

# Add left Findrange job
frl = Job(e_findrange)
frl.metadata("time", "60")
c1 = File("f.c1")
frl.addArguments("-a findrange","-T60","-i",b1,"-o",c1)
frl.uses(b1, link=Link.INPUT)
frl.uses(c1, link=Link.OUTPUT, transfer=True)
diamond.addJob(frl)

# Add right Findrange job
frr = Job(e_findrange)
frr.metadata("time", "60")
c2 = File("f.c2")
frr.addArguments("-a findrange","-T60","-i",b2,"-o",c2)
frr.uses(b2, link=Link.INPUT)
frr.uses(c2, link=Link.OUTPUT, transfer=True)
diamond.addJob(frr)

# Add Analyze job
analyze = Job(e_analyze)
analyze.metadata("time", "60")
d = File("f.d")
analyze.addArguments("-a analyze","-T60","-i",c1,c2,"-o",d)
analyze.uses(c1, link=Link.INPUT)
analyze.uses(c2, link=Link.INPUT)
analyze.uses(d, link=Link.OUTPUT, transfer=True, register=True)
diamond.addJob(analyze)

# Add dependencies
diamond.depends(parent=preprocess, child=frl)
diamond.depends(parent=preprocess, child=frr)
diamond.depends(parent=frl, child=analyze)
diamond.depends(parent=frr, child=analyze)

# Write the DAX to stdout
import sys
diamond.writeXML(sys.stdout)

# Write the DAX to a file
f = open("diamond.dax","w")
diamond.writeXML(f)
f.close()</programlisting>
    </section>

    <section id="api-perl">
      <title>The Perl DAX Generator</title>

      <para>The Perl API example below can be found in file
      <filename>blackdiamond.pl</filename> in directory <filename
      class="directory">examples/grid-blackdiamond-perl</filename>. It
      requires that you set the environment variable
      <envar>PEGASUS_HOME</envar> to the installation directory of Pegasus,
      and include into <envar>PERL5LIB</envar> the path to the directory
      <filename class="directory">lib/perl</filename> of the Pegasus
      installation. The actual code is longer, and will not require these
      settings, only the example below does. The Perl API is documented using
      <ulink url="http://pegasus.isi.edu/wms/docs/3.0/perl/">perldoc</ulink>.
      For each of the modules you can invoke
      <application>perldoc</application>, if your <envar>PERL5LIB</envar>
      variable is set.</para>

      <para>The steps to generate a DAX from Perl are similar to the Java
      steps. However, since most methods to the classes are deeply within the
      Perl class modules, the convenience module
      <code>Perl::DAX::Factory</code> makes most constructors accessible
      without you needing to type your fingers raw:</para>

      <orderedlist>
        <listitem>
          <para>Create a new <emphasis>ADAG</emphasis> object.</para>
        </listitem>

        <listitem>
          <para>Create <emphasis>Job</emphasis> objects as necessary.</para>
        </listitem>

        <listitem>
          <para>As example, the required input file "f.a" is declared as
          <emphasis>File</emphasis> object and linked to the
          <emphasis>ADAG</emphasis> object.</para>
        </listitem>

        <listitem>
          <para>The first job arguments and files are filled into the job, and
          the job is added to the <emphasis>ADAG</emphasis> object.</para>
        </listitem>

        <listitem>
          <para>Repeat step 4 for the remaining jobs.</para>
        </listitem>

        <listitem>
          <para>Add dependencies for all jobs. You have the option of
          assigning label text to edges, though these are not used
          (yet).</para>
        </listitem>

        <listitem>
          <para>To generate the DAX file, invoke the
          <emphasis>toXML()</emphasis> method on the <emphasis>ADAG</emphasis>
          object. The first argument is an opened file handle or
          <code>IO::Handle</code> descriptor scalar to write to, the second
          the default indentation for the root element, and the third the XML
          namespace to use for elements and attributes. The latter is
          typically unused unless you want to include your output into another
          XML document.</para>
        </listitem>
      </orderedlist>

      <programlisting>#!/usr/bin/env perl
#
use 5.006;
use strict;
use IO::Handle;
use Cwd;
use File::Spec;
use File::Basename;
use Sys::Hostname;
use POSIX ();

BEGIN { $ENV{'PEGASUS_HOME'} ||= `pegasus-config --nocrlf --home` }
use lib File::Spec-&gt;catdir( $ENV{'PEGASUS_HOME'}, 'lib', 'perl' );

use Pegasus::DAX::Factory qw(:all);
use constant NS =&gt; 'diamond';

my $adag = newADAG( name =&gt; NS );

# Workflow MetaData
my $meta = newMetaData('name', 'diamond');
$adag-&gt;addMetaData( $meta );
$adag-&gt;metaData( 'createdBy', 'Rajiv Mayani' );

my $job1 = newJob( namespace =&gt; NS, name =&gt; 'preprocess', version =&gt; '2.0' );
my $job2 = newJob( namespace =&gt; NS, name =&gt; 'findrange', version =&gt; '2.0' );
my $job3 = newJob( namespace =&gt; NS, name =&gt; 'findrange', version =&gt; '2.0' );
my $job4 = newJob( namespace =&gt; NS, name =&gt; 'analyze', version =&gt; '2.0' );

# create "f.a" locally
my $fn = "f.a";
open( F, "&gt;$fn" ) || die "FATAL: Unable to open $fn: $!\n";
my @now = gmtime();
printf F "%04u-%02u-%02u %02u:%02u:%02uZ\n",
        $now[5]+1900, $now[4]+1, @now[3,2,1,0];
close F;

my $file = newFile( name =&gt; 'f.a' );
$file-&gt;addPFN( newPFN( url =&gt; 'file://' . Cwd::abs_path($fn),
                       site =&gt; 'local' ) );
$file-&gt;metaData( 'size', '1024' );
$adag-&gt;addFile($file);

# follow this path, if the PEGASUS_HOME was determined
if ( exists $ENV{'PEGASUS_HOME'} ) {
    my $keg = File::Spec-&gt;catfile( $ENV{'PEGASUS_HOME'}, 'bin', 'keg' );
    my @os = POSIX::uname();
    # $os[2] =~ s/^(\d+(\.\d+(\.\d+)?)?).*/$1/;  ## create a proper osversion
    $os[4] =~ s/i.86/x86/;

    # add Executable instances to DAX-included TC. This will only work,
    # if we know how to access the keg executable. HOWEVER, for a grid
    # workflow, these entries are not used, and you need to
    # [1] install the work tools remotely
    # [2] create a TC with the proper entries
    if ( -x $keg ) {
        for my $j ( $job1, $job2, $job4 ) {
            my $app = newExecutable( namespace =&gt; $j-&gt;namespace,
                                     name =&gt; $j-&gt;name,
                                     version =&gt; $j-&gt;version,
                                     installed =&gt; 'false',
                                     arch =&gt; $os[4],
                                     os =&gt; lc($^O) );
            $app-&gt;addProfile( 'globus', 'maxtime', '2' );
            $app-&gt;addProfile( 'dagman', 'RETRY', '3' );
            $app-&gt;addPFN( newPFN( url =&gt; "file://$keg", site =&gt; 'local' ) );
            $app1-&gt;metaData( 'size', '2048' );
            $adag-&gt;addExecutable($app);
        }
    }
}

my %hash = ( link =&gt; LINK_OUT, register =&gt; 'false', transfer =&gt; 'true' );
my $fna = newFilename( name =&gt; $file-&gt;name, link =&gt; LINK_IN );
my $fnb1 = newFilename( name =&gt; 'f.b1', %hash );
my $fnb2 = newFilename( name =&gt; 'f.b2', %hash );
$job1-&gt;addArgument( '-a', $job1-&gt;name, '-T60', '-i', $fna,
                    '-o', $fnb1, $fnb2 );
$job1-&gt;metaData( 'time', '60' );
$adag-&gt;addJob($job1);

my $fnc1 = newFilename( name =&gt; 'f.c1', %hash );
$fnb1-&gt;link( LINK_IN );
$job2-&gt;addArgument( '-a', $job2-&gt;name, '-T60', '-i', $fnb1,
                    '-o', $fnc1 );
$job2-&gt;metaData( 'time', '60' );
$adag-&gt;addJob($job2);

my $fnc2 = newFilename( name =&gt; 'f.c2', %hash );
$fnb2-&gt;link( LINK_IN );
$job3-&gt;addArgument( '-a', $job3-&gt;name, '-T60', '-i', $fnb2,
                    '-o', $fnc2 );
$job3-&gt;metaData( 'time', '60' );
$adag-&gt;addJob($job3);
# a convenience function -- you can specify multiple dependents
$adag-&gt;addDependency( $job1, $job2, $job3 );

my $fnd = newFilename( name =&gt; 'f.d', %hash );
$fnc1-&gt;link( LINK_IN );
$fnc2-&gt;link( LINK_IN );
$job4-&gt;separator('');                # just to show the difference wrt default
$job4-&gt;addArgument( '-a ', $job4-&gt;name, ' -T60 -i ', $fnc1, ' ', $fnc2,
                    ' -o ', $fnd );
$job4-&gt;metaData( 'time', '60' );
$adag-&gt;addJob($job4);
# this is a convenience function adding parents to a child.
# it is clearer than overloading addDependency
$adag-&gt;addInverse( $job4, $job2, $job3 );

# workflow level notification in case of failure
# refer to Pegasus::DAX::Invoke for details
my $user = $ENV{USER} || $ENV{LOGNAME} || scalar getpwuid($&gt;);
$adag-&gt;invoke( INVOKE_ON_ERROR,
               "/bin/mailx -s 'blackdiamond failed' $user" );

my $xmlns = shift;
$adag-&gt;toXML( \*STDOUT, '', $xmlns );</programlisting>
    </section>
  </section>

  <section>
    <title>DAX Generator without a Pegasus DAX API</title>

    <para>If you are using some other scripting or programming environment,
    you can directly write out the DAX format using the provided schema using
    any language. For instance, LIGO, the Laser Interferometer Gravitational
    Wave Observatory, generate their DAX files as XML using their own Python
    code, not using our provided API.</para>

    <para>If you write your own XML, you <emphasis>must</emphasis> ensure that
    the generated XML is well formed and valid with respect to the DAX schema.
    You can use the <command>pegasus-dax-validator</command> to verify the
    validity of your generated file. Typically, you generate a smallish test
    file to, validate that your generator creates valid XML using the
    validator, and then ramp it up to produce the full workflow(s) you want to
    run. At this point the <command>pegasus-dax-validator</command> is a very
    simple program that will only take exactly one argument, the name of the
    file to check.The following snippet checks a black-diamond file that uses
    an improper <emphasis>osversion</emphasis> attribute in its
    <emphasis>executable</emphasis> element:</para>

    <screen><prompt>$</prompt> <command>pegasus-dax-validator <replaceable>blackdiamond.dax</replaceable></command>
ERROR: cvc-pattern-valid: Value '2.6.18-194.26.1.el5' is not facet-valid
 with respect to pattern '[0-9]+(\.[0-9]+(\.[0-9]+)?)?' for type 'VersionPattern'.
ERROR: cvc-attribute.3: The value '2.6.18-194.26.1.el5' of attribute 'osversion'
 on element 'executable' is not valid with respect to its type, 'VersionPattern'.

0 warnings, 2 errors, and 0 fatal errors detected.</screen>

    <para>We are working on improving this program, e.g. provide output with
    regards to the line number where the issue occurred. However, it will
    return with a non-zero exit code whenever errors were detected.</para>
  </section>

  <section id="rest-api-monitoring">
    <title>Monitoring</title>

    <para>Monitoring REST API allows developers to query a Pegasus workflow's
    STAMPEDE database.</para>

    <section>
      <title>Resource Definition</title>

      <section>
        <title id="resource-root-workflow">Root Workflow</title>

        <programlisting>{
    "wf_id"             : &lt;int:wf_id&gt;,
    "wf_uuid"           : &lt;string:wf_uuid&gt;,
    "submit_hostname"   : &lt;string:submit_hostname&gt;,
    "submit_dir"        : &lt;string:submit_dir&gt;,
    "planner_arguments" : &lt;string:planner_arguments&gt;,
    "planner_version"   : &lt;string:planner_version&gt;,
    "user"              : &lt;string:user&gt;,
    "grid_dn"           : &lt;string:grid_dn&gt;,
    "dax_label"         : &lt;string:dax_label&gt;,
    "dax_version"       : &lt;string:dax_version&gt;,
    "dax_file"          : &lt;string:dax_file&gt;,
    "dag_file_name"     : &lt;string:dag_file_name&gt;,
    "timestamp"         : &lt;int:timestamp&gt;,
    "workflow_state"    : &lt;object:workflow_state&gt;
}</programlisting>
      </section>

      <section>
        <title id="resource-workflow">Workflow</title>

        <programlisting>{
    "wf_id"             : &lt;int:wf_id&gt;,
    "root_wf_id"        : &lt;int:root_wf_id&gt;,
    "parent_wf_id"      : &lt;int:parent_wf_id&gt;,
    "wf_uuid"           : &lt;string:wf_uuid&gt;,
    "submit_hostname"   : &lt;string:submit_hostname&gt;,
    "submit_dir"        : &lt;string:submit_dir&gt;,
    "planner_arguments" : &lt;string:planner_arguments&gt;,
    "planner_version"   : &lt;string:planner_version&gt;,
    "user"              : &lt;string:user&gt;,
    "grid_dn"           : &lt;string:grid_dn&gt;,
    "dax_label"         : &lt;string:dax_label&gt;,
    "dax_version"       : &lt;string:dax_version&gt;,
    "dax_file"          : &lt;string:dax_file&gt;,
    "dag_file_name"     : &lt;string:dag_file_name&gt;,
    "timestamp"         : &lt;int:timestamp&gt;,
    "_links"            : {
        "workflow_state" : &lt;href:workflow_state&gt;,
        "job"            : &lt;href:job&gt;,
        "task"           : &lt;href:task&gt;,
        "host"           : &lt;href:host&gt;,
        "invocation"     : &lt;href:invocation&gt;
    }
}</programlisting>
      </section>

      <section>
        <title id="resource-workflow-state">Workflow State</title>

        <programlisting>{
    "state"         : &lt;string:state&gt;,
    "status"        : &lt;int:status&gt;,
    "restart_count" : &lt;int:restart_count&gt;,
    "timestamp"     : &lt;datetime:timestamp&gt;
}</programlisting>
      </section>

      <section>
        <title id="resource-job">Job</title>

        <programlisting>{
    "job_id"      : &lt;int: job_id&gt;,
    "exec_job_id" : &lt;string: exec_job_id&gt;,
    "submit_file" : &lt;string: submit_file&gt;,
    "type_desc"   : &lt;string: type_desc&gt;,
    "max_retries" : &lt;int: max_retries&gt;,
    "clustered"   : &lt;bool: clustered&gt;,
    "task_count"  : &lt;int: task_count&gt;,
    "executable"  : &lt;string: executable&gt;,
    "argv"        : &lt;string: argv&gt;,
    "_links"      : {
        "workflow"     : &lt;href:workflow&gt;,
        "task"         : &lt;href:task&gt;,
        "job_instance" : &lt;href:job_instance&gt;
    }
}</programlisting>
      </section>

      <section>
        <title id="resource-host">Host</title>

        <programlisting>{
    "host_id"      : &lt;int:host_id&gt;,
    "site_name"    : &lt;string:site_name&gt;,
    "hostname"     : &lt;string:hostname&gt;,
    "ip"           : &lt;string:ip&gt;,
    "uname"        : &lt;string:uname&gt;,
    "total_memory" : &lt;string:total_memory&gt;,
    "_links"       : {
        "workflow"     : &lt;href:workflow&gt;,
        "job_instance" : &lt;href:job_instance&gt;
    }
}</programlisting>
      </section>

      <section>
        <title id="resource-job-state">Job State</title>

        <programlisting>{
    "job_instance_id"     : &lt;int:job_instance_id&gt;,
    "state"               : &lt;string:state&gt;,
    "jobstate_submit_seq" : &lt;int:jobstate_submit_seq&gt;,
    "timestamp"           : &lt;int:timestamp&gt;
}</programlisting>
      </section>

      <section>
        <title id="resource-task">Task</title>

        <programlisting>{
    "task_id"        : &lt;int:task_id&gt;,
    "abs_task_id"    : &lt;string:abs_task_id&gt;,
    "type_desc"      : &lt;string: type_desc&gt;,
    "transformation" : &lt;string:transformation&gt;,
    "argv"           : &lt;string:argv&gt;,
    "_links"         : {
        "workflow" : &lt;href:workflow&gt;,
        "job"      : &lt;href:job&gt;
    }
}</programlisting>
      </section>

      <section>
        <title id="resource-job-instance">Job Instance</title>

        <programlisting>{
    "job_instance_id"   : &lt;int:job_instance_id&gt;,
    "host_id"           : &lt;int:host_id&gt;,
    "job_submit_seq"    : &lt;int:job_submit_seq&gt;,
    "sched_id"          : &lt;string:sched_id&gt;,
    "site_name"         : &lt;string:site_name&gt;,
    "user"              : &lt;string:user&gt;,
    "work_dir"          : &lt;string:work_dir&gt;,
    "cluster_start"     : &lt;int:cluster_start&gt;,
    "cluster_duration"  : &lt;int:cluster_duration&gt;,
    "local_duration"    : &lt;int:local_duration&gt;,
    "subwf_id"          : &lt;int:subwf_id&gt;,
    "stdout_text"       : &lt;string:stdout_text&gt;,
    "stderr_text"       : &lt;string:stderr_text&gt;,
    "stdin_file"        : &lt;string:stdin_file&gt;,
    "stdout_file"       : &lt;string:stdout_file&gt;,
    "stderr_file"       : &lt;string:stderr_file&gt;,
    "multiplier_factor" : &lt;int:multiplier_factor&gt;,
    "_links"            : {
        "job_state"  : &lt;href:job_state&gt;,
        "host"       : &lt;href:host&gt;,
        "invocation" : &lt;href:invocation&gt;,
        "job"        : &lt;href:job&gt;
    }
}</programlisting>
      </section>

      <section>
        <title id="resource-invocation">Invocation</title>

        <programlisting>{
    "invocation_id"   : &lt;int:invocation_id&gt;,
    "job_instance_id" : &lt;int:job_instance_id&gt;,
    "abs_task_id"     : &lt;string:abs_task_id&gt;,
    "task_submit_seq" : &lt;int:task_submit_seq&gt;,
    "start_time"      : &lt;int:start_time&gt;,
    "remote_duration" : &lt;int:remote_duration&gt;,
    "remote_cpu_time" : &lt;int:remote_cpu_time&gt;,
    "exitcode"        : &lt;int:exitcode&gt;,
    "transformation"  : &lt;string:transformation&gt;,
    "executable"      : &lt;string:executable&gt;,
    "argv"            : &lt;string:argv&gt;,
    "_links"          : {
        "workflow"     : &lt;href:workflow&gt;,
        "job_instance" : &lt;href:job_instance&gt;
    }
}</programlisting>
      </section>
    </section>

    <section>
      <title id="section-endpoints">Endpoints</title>

      <para>All URIs are prefixed by<emphasis
      role="bold">/api/v1/user/&lt;string:user&gt;</emphasis>.</para>

      <para>All endpoints return response with content-type as
      application/json.</para>

      <para>All endpoints support <emphasis role="bold">`pretty-print`
      </emphasis> query argument, to return a formatted JSON response.</para>

      <para>All endpoints return status code <emphasis role="bold">401
      </emphasis> for<emphasis role="bold">Authentication
      failure</emphasis>.</para>

      <para>All endpoints return status code <emphasis role="bold">403
      </emphasis> for<emphasis role="bold">Authorization
      failure</emphasis>.</para>

      <section>
        <title>GET /root OR POST /root/query</title>

        <para>Returns a collection of the <link
        linkend="resource-root-workflow">Root Workflow</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-root-workflow">Root Workflow</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no workflows found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;</title>

        <para>Returns a <link linkend="resource-root-workflow">Root
        Workflow</link> resource identified by m_wf_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow OR POST
        /root/&lt;m_wf_id&gt;/workflow/query</title>

        <para>Returns a collection of the <link
        linkend="resource-workflow">Workflow</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no workflows found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;</title>

        <para>Returns a <link linkend="resource-workflow">Workflow</link>
        resource identified by m_wf_id, wf_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/state OR
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/state/query</title>

        <para>Returns a collection of the <link
        linkend="resource-workflow-state">Workflow State</link>
        resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-workflow-state">Workflow State</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no workflow-state found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/host OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/host/query</title>

        <para>Returns a collection of the <link
        linkend="resource-host">Host</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-host">Host</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no hosts found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/host/&lt;host_id&gt;</title>

        <para>Returns a <link linkend="resource-host">Host</link> resource
        identified by m_wf_id, wf_id, host_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/task OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/task/query</title>

        <para>Returns a collection of the <link
        linkend="resource-task">Task</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-task">Task</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no tasks found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/task/&lt;task_id&gt;</title>

        <para>Returns a <link linkend="resource-task">Task</link> resource
        identified by m_wf_id, wf_id, task_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/invocation OR
        POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/invocation/query</title>

        <para>Returns a collection of the <link
        linkend="resource-invocation">Invocation</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-invocation">Invocation</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no invocations found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/invocation/&lt;invocation_id&gt;</title>

        <para>Returns a <link linkend="resource-invocation">Invocation</link>
        resource identified by m_wf_id, wf_id, invocation_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/query</title>

        <para>Returns a collection of the <link
        linkend="resource-job">Job</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-job">Job</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no jobs found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;</title>

        <para>Returns a <link linkend="resource-job">Job</link> resource
        identified by m_wf_id, wf_id, job_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance
        OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/query</title>

        <para>Returns a collection of the <link
        linkend="resource-job-instance">Job Instance</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-job">Job</link>, <link
        linkend="resource-job-instance">Job Instance</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no job-instances found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;</title>

        <para>Returns a <link linkend="resource-job-instance">Job
        Instance</link> resource identified by m_wf_id, wf_id, job_id,
        job_instance_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/state
        OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/state/query</title>

        <para>Returns a collection of the <link
        linkend="resource-job-state">Job State</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-job">Job</link>, <link
        linkend="resource-job-instance">Job Instance</link>, <link
        linkend="resource-job-state">Job State</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no job-state found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/host</title>

        <para>Returns a <link linkend="resource-host">Host</link> resource
        identified by m_wf_id, wf_id, job_id, job_instance_id, host_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/invocation
        OR POST
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/invocation/query</title>

        <para>Returns a collection of the <link
        linkend="resource-invocation">Invocation</link> resource.</para>

        <para><emphasis role="bold">Context</emphasis>: <link
        linkend="resource-workflow">Workflow</link>, <link
        linkend="resource-job">Job</link>, <link
        linkend="resource-job-instance">Job Instance</link>, <link
        linkend="resource-invocation">Invocation</link></para>

        <para><table frame="box" rules="all">
            <caption>Options</caption>

            <thead>
              <tr align="center">
                <th>Argument</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>start-index</td>

                <td>Return results starting from record &lt;start-index&gt; (0
                indexed)</td>
              </tr>

              <tr>
                <td>max-results</td>

                <td>Return a maximum of &lt;max-results&gt; records</td>
              </tr>

              <tr>
                <td>query</td>

                <td>Search criteria. See <link
                linkend="querying">Querying</link>.</td>
              </tr>

              <tr>
                <td>order</td>

                <td>Order criteria. See <link
                linkend="ordering">Ordering</link>.</td>
              </tr>

              <tr>
                <td>recent</td>

                <td>Get most recent results. See <link
                linkend="recent">Recent</link>.</td>
              </tr>
            </tbody>
          </table></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>204</td>

                <td>No content; when no invocations found.</td>
              </tr>

              <tr>
                <td>400</td>

                <td>Bad request</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>GET
        /root/&lt;m_wf_id&gt;/workflow/&lt;wf_id&gt;/job/&lt;job_id&gt;/job-instance/&lt;job_instance_id&gt;/invocation/&lt;invocation_id&gt;</title>

        <para>Returns a <link linkend="resource-invocation">Invocation</link>
        resource identified by m_wf_id, wf_id, job_id, job_instance_id,
        invocation_id.</para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>200</td>

                <td>OK</td>
              </tr>

              <tr>
                <td>404</td>

                <td>Not found</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title>POST /batch</title>

        <para>Returns a an array of responses; one for each request.</para>

        <para><emphasis role="bold">Batch Request</emphasis></para>

        <programlisting>[
    {
        "method" : &lt;string:method&gt;,
        "path"   : &lt;string:path&gt;,
        "body"   : &lt;string:body&gt;
    },
    {
        "method" : &lt;string:method&gt;,
        "path"   : &lt;string:path&gt;,
        "body"   : &lt;string:body&gt;
    }
]</programlisting>

        <para><emphasis role="bold">Batch Response</emphasis><programlisting>[
    {
        "status"   : &lt;int:status_code&gt;,
        "response" : &lt;string:response&gt;
    },
    {
        "status"   : &lt;int:status_code&gt;,
        "response" : &lt;string:response&gt;
    }
]</programlisting></para>

        <para><emphasis role="bold">Example</emphasis><programlisting><emphasis
              role="bold">Request</emphasis>

[
    {
        "method" : "GET",
        "path"   : "/api/v1/user/user-a/root/query?query=wf_id=1&amp;pretty-print=True"
    },
    {
        "method" : "POST",
        "path"   : "/api/v1/user/user-a/root?query=wf_id=2"
    }
]<emphasis role="bold">

Response</emphasis>

[
    {
        "status"   : 200,
        "response" : {
            "records" : [
                {
                    "wf_id"             : 1,
                    "wf_uuid"           : "7193de8c-a28d-4eca-b576-1b1c3c4f668b",
                    ..
                    "_links"            : {
                        "workflow" : "/api/v1/user/user-a/root/1/workflow/query"
                    }
                }
            ],
            "_meta"   : {
                "records_total"    : 5,
                "records_filtered" : 1
            }
        }
    },
    {
        "status"   : 200,
        "response" : {
            "records" : [
                {
                    "wf_id"             : 2,
                    "wf_uuid"           : "41920a57-7882-4990-854e-658b7a797745",
                    ..
                    "_links"            : {
                        "workflow" : "/api/v1/user/user-a/root/2/workflow"
                    }
                }
            ],
            "_meta"   : {
                "records_total"    : 5,
                "records_filtered" : 1
            }
        }
    }
]

</programlisting></para>

        <para><table frame="box" rules="all">
            <caption>Returns</caption>

            <thead>
              <tr align="center">
                <th>Status Code</th>

                <th>Description</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td>207</td>

                <td>Multi status</td>
              </tr>
            </tbody>
          </table></para>
      </section>
    </section>

    <section>
      <title id="querying">Querying</title>

      <para>Querying is supported through query string argument <emphasis
      role="bold">`query`</emphasis>.</para>

      <para>Querying is supported only on endpoints returning
      collections.</para>

      <section>
        <title>Syntax</title>

        <para>Query clauses are rudimentary and must follow some rules.</para>

        <itemizedlist>
          <listitem>
            <para>Supported comparators are =, !=, &lt;, &lt;=, &gt;, &gt;=,
            LIKE, IN.</para>
          </listitem>

          <listitem>
            <para>Supported operators are AND, OR.</para>
          </listitem>

          <listitem>
            <para>Comparision clauses must have the form &lt;FIELDNAME&gt;
            &lt;COMPARATOR&gt; &lt;STRING LITERAL OR INTEGER LITERAL OR FLOAT
            LITERAL&gt;</para>
          </listitem>

          <listitem>
            <para>&lt;FIELDNAME&gt; can be prefixed with resource query prefix
            Example: <emphasis role="bold"><emphasis
            role="bold">r.</emphasis>wf_id</emphasis> is same as <emphasis
            role="bold">wf_id</emphasis>. However, fieldnames common across
            resources must be prefixed Example: timestamp field is common
            across workflow, and workflow state so it must be prefixed as
            <emphasis role="bold">w.timestamp</emphasis> or <emphasis
            role="bold">ws.timestamp</emphasis> when used in query
            clause.</para>
          </listitem>

          <listitem>
            <para>&lt;FIELDNAMES&gt; which can be used in a query caluse
            depends on the context. Example: For endpoint
            /api/v1/user/user-a/root/1/<emphasis
            role="bold">workflow</emphasis>/1/<emphasis
            role="bold">job</emphasis>/2/<emphasis
            role="bold">state</emphasis> query clause can only contain fields
            of resources <link linkend="resource-workflow">Workflow</link>,
            <link linkend="resource-job">Job</link>, and <link
            linkend="resource-job-state">Job State</link>. In simpler terms
            query's context are the resources as referenced in the endpoint.
            For context of each query refer to Context section included in the
            <link linkend="section-endpoints">Endpoints</link> section.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis role="bold">Example</emphasis></para>

        <para><programlisting><emphasis role="bold"><emphasis role="bold">For Root Workflow https://www.domain.com/api/v1/user/user-a/root?query&lt;QUERY&gt;

Where QUERY can be( r.wf_id &gt;= 5 AND planner_version LIKE '4.5%' ) OR ( r.wf_id IN ( 1, 2 ) )
</emphasis></emphasis></programlisting></para>
      </section>

      <section>
        <title>Resource - Query Prefix</title>

        <para><table frame="box" rules="all">
            <caption/>

            <thead>
              <tr align="center">
                <th>Resource</th>

                <th>Query Prefix</th>

                <th>Example</th>
              </tr>
            </thead>

            <tbody>
              <tr>
                <td><emphasis role="bold">Root Workflow</emphasis></td>

                <td>r</td>

                <td>r.wf_id</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Workflow</emphasis></td>

                <td>w</td>

                <td>w.wf_uuid</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Workflow State</emphasis></td>

                <td>ws</td>

                <td>ws.state</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Job</emphasis></td>

                <td>j</td>

                <td>j.type_desc</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Host</emphasis></td>

                <td>h</td>

                <td>h.site</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Job State</emphasis></td>

                <td>js</td>

                <td>js.state</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Task</emphasis></td>

                <td>t</td>

                <td>t.abs_task_id</td>
              </tr>

              <tr>
                <td><emphasis role="bold">Job Instance</emphasis></td>

                <td>ji</td>

                <td>ji.exitcode</td>
              </tr>

              <tr>
                <td><emphasis role="bold">job</emphasis></td>

                <td>i</td>

                <td>i.argv</td>
              </tr>
            </tbody>
          </table></para>
      </section>

      <section>
        <title id="recent">Recent</title>

        <para>Workflow State, Job State, and Job Instance resources have
        historical records.</para>

        <para>For use cases where developers need to get the most recent
        record, we set query argument <emphasis role="bold">`recent`
        </emphasis> to true. Recent argument is always true when requesting
        for root-workflow's resource.</para>

        <para>For usage see Advanced Queries.</para>
      </section>

      <section>
        <title>Advanced Queries</title>
      </section>
    </section>

    <section>
      <title id="ordering">Ordering</title>

      <para>Ordering is supported through query string argument <emphasis
      role="bold">`order`</emphasis>.</para>

      <para>Ordering is supported only on endpoints returning
      collections.</para>

      <para>Order clause can only contain fields which are part of the
      resource being returned. Fields may or may not be prefixed by the
      Resource Query Prefix</para>

      <para><emphasis role="bold">Example:</emphasis> Order clause for an
      endpoint returning a <link linkend="resource-workflow">Workflow</link>
      resource can only contain fields that are part of the <link
      linkend="resource-workflow">Workflow</link> resource.</para>

      <section>
        <title>Syntax</title>

        <para>Order clause consists of one or more field names optionally
        followed by order direction (ASC or DESC), separated by commas.</para>

        <para><programlisting><emphasis role="bold"><emphasis role="bold">https://www.domain.com/api/v1/user/user-a/root?order=r.submit_hostname ASC, wf_id DESC
</emphasis></emphasis></programlisting></para>
      </section>
    </section>

    <section>
      <title>Examples</title>

      <section>
        <title>Resource - Single</title>

        <programlisting><emphasis role="bold">$ curl --request GET \
       --user user-a:user-a-password \
       https://www.domain.com/api/v1/user/user-a/root/1/workflow/1?pretty-print=true
                    </emphasis>

HTTP/1.1 200 OK

{
    "wf_id"             : 1,
    "root_wf_id"        : 1,
    "parent_wf_id"      : null,
    "wf_uuid"           : "7193de8c-a28d-4eca-b576-1b1c3c4f668b",
    "submit_hostname"   : "isis.isi.edu",
    "submit_dir"        : "/home/tutorial/submit/",
    "planner_arguments" : "--conf pegasusrc --sites condorpool --output-site local --dir dags --dax dax.xml --submit",
    "planner_version"   : "4.5.0cvs",
    "user"              : "user-a",
    "grid_dn"           : null,
    "dax_label"         : "hello_world",
    "dax_version"       : "3.5",
    "dax_file"          : "/home/tutorial/hello-world.xml",
    "dag_file_name"     : "hello_world-0.dag",
    "timestamp"         : 1421432530,
    "_links"            : {
        "workflow_state" : "/user/user-a/root/1/workflow/1/state",
        "job"            : "/user/user-a/root/1/workflow/1/job",
        "task"           : "/user/user-a/root/1/workflow/1/task",
        "host"           : "/user/user-a/root/1/workflow/1/host",
        "invocation"     : "/user/user-a/root/1/workflow/1/job"
    }
}</programlisting>
      </section>

      <section>
        <title>Resource - Collection</title>

        <programlisting><emphasis role="bold">$ curl --request GET \
       --user user-a:user-a-password \
       https://www.domain.com/api/v1/user/user-a/root/1/workflow?pretty-print=true
                    </emphasis>
HTTP/1.1 200 OK

{
    "records" : [
        {
            "wf_id"             : 1,
            "root_wf_id"        : 1,
            "parent_wf_id"      : null,
            "wf_uuid"           : "7193de8c-a28d-4eca-b576-1b1c3c4f668b",
            "submit_hostname"   : "isis.isi.edu",
            "submit_dir"        : "/home/tutorial/dags/20150116T102210-0800",
            "planner_arguments" : "--conf pegasusrc --sites condorpool --output-site local --dir dags  --dax dax.xml --submit",
            "planner_version"   : "4.5.0cvs",
            "user"              : "user-a",
            "grid_dn"           : null,
            "dax_label"         : "hello_world",
            "dax_version"       : "3.5",
            "dax_file"          : "/home/tutorial/hello-world.xml",
            "dag_file_name"     : "hello_world-0.dag",
            "timestamp"         : 1421432530,
            "_links"            : {
                "workflow_state" : "/user/user-a/root/1/workflow/1/state",
                "job"            : "/user/user-a/root/1/workflow/1/job",
                "task"           : "/user/user-a/root/1/workflow/1/task",
                "host"           : "/user/user-a/root/1/workflow/1/host",
                "invocation"     : "/user/user-a/root/1/workflow/1/job"
            }
        },
        {
            "wf_id"             : 2,
            "root_wf_id"        : 2,
            "parent_wf_id"      : null,
            "wf_uuid"           : "41920a57-7882-4990-854e-658b7a797745",
            "submit_hostname"   : "isis.isi.edu",
            "submit_dir"        : "/home/tutorial/dags/20150330T165231-0700",
            "planner_arguments" : "--conf pegasusrc --sites condorpool --output-site local --dir dags --dax dax.xml --submit",
            "planner_version"   : "4.5.0cvs",
            "user"              : "user-a",
            "grid_dn"           : null,
            "dax_label"         : "hello_world",
            "dax_version"       : "3.5",
            "dax_file"          : "/home/tutorial/hello-world.xml",
            "dag_file_name"     : "hello_world-0.dag",
            "timestamp"         : 1427759551,
            "_links"            : {
                "workflow_state" : "/user/user-a/root/2/workflow/1/state",
                "job"            : "/user/user-a/root/2/workflow/1/job",
                "task"           : "/user/user-a/root/2/workflow/1/task",
                "host"           : "/user/user-a/root/2/workflow/1/host",
                "invocation"     : "/user/user-a/root/2/workflow/1/job"
            }
        },
        {
            "wf_id"             : 3,
            "root_wf_id"        : 3,
            "parent_wf_id"      : null,
            "wf_uuid"           : "fce67b41-df67-4b3c-8fa4-d77e6e2b9769",
            "submit_hostname"   : "isis.isi.edu",
            "submit_dir"        : "/home/tutorial/dags/20150330T170228-0700",
            "planner_arguments" : "--conf pegasusrc --sites condorpool --output-site local --dir dags --dax dax.xml --submit",
            "planner_version"   : "4.5.0cvs",
            "user"              : "user-a",
            "grid_dn"           : null,
            "dax_label"         : "hello_world",
            "dax_version"       : "3.5",
            "dax_file"          : "/home/tutorial/hello-world.xml",
            "dag_file_name"     : "hello_world-0.dag",
            "timestamp"         : 1427760148,
            "_links"            : {
                "workflow_state" : "/user/user-a/root/3/workflow/1/state",
                "job"            : "/user/user-a/root/3/workflow/1/job",
                "task"           : "/user/user-a/root/3/workflow/1/task",
                "host"           : "/user/user-a/root/3/workflow/1/host",
                "invocation"     : "/user/user-a/root/3/workflow/1/job"
            }

        }
    ],
    "_meta"   : {
        "records_total"    : 3,
        "records_filtered" : 3
    }
}</programlisting>
      </section>

      <section>
        <title>Querying</title>

        <programlisting><emphasis role="bold">$ curl --request GET \
       --user user-a:user-a-password \
       https://www.domain.com/api/v1/user/user-a/root/1/workflow?pretty-print=true&amp;query=w.wf_uuid='41920a57-7882-4990-854e-658b7a797745'
                    </emphasis>
HTTP/1.1 200 OK

{
    "records" : [
        {
            "wf_id"             : 2,
            "root_wf_id"        : 2,
            "parent_wf_id"      : null,
            "wf_uuid"           : "41920a57-7882-4990-854e-658b7a797745",
            "submit_hostname"   : "isis.isi.edu",
            "submit_dir"        : "/home/tutorial/dags/20150330T165231-0700",
            "planner_arguments" : "--conf pegasusrc --sites condorpool --output-site local --dir dags --dax dax.xml --submit",
            "planner_version"   : "4.5.0cvs",
            "user"              : "user-a",
            "grid_dn"           : null,
            "dax_label"         : "hello_world",
            "dax_version"       : "3.5",
            "dax_file"          : "/home/tutorial/hello-world.xml",
            "dag_file_name"     : "hello_world-0.dag",
            "timestamp"         : 1427759551,
            "_links"            : {
                "workflow_state" : "/user/user-a/root/2/workflow/1/state",
                "job"            : "/user/user-a/root/2/workflow/1/job",
                "task"           : "/user/user-a/root/2/workflow/1/task",
                "host"           : "/user/user-a/root/2/workflow/1/host",
                "invocation"     : "/user/user-a/root/2/workflow/1/job"
            }
        }
    ],
    "_meta"   : {
        "records_total"    : 3,
        "records_filtered" : 1
    }
}</programlisting>
      </section>
    </section>
  </section>
</chapter>
