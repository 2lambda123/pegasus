<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="service">
    <title>Pegasus Service</title>
    <section>
        <title>Service Administration</title>

        <section>
            <title>Service Configuration</title>

            <para>
                The configuration file is $HOME/.pegasus/service.py. Look in
                lib/pegasus/python/pegasus/service/defaults.py for the variable
                names and default values.
            </para>

            <para>
                You can change the host and port of the service by setting the
                SERVER\_HOST and SERVER\_PORT variables.
            </para>

            <para>
                All clients that connect to the web API will require the
                USERNAME and PASSWORD settings in the configuration file.
            </para>
        </section>

        <section>
            <title>Running the Service</title>

            <para>
                Once the service is installed (normally or in development mode)
                and configured you can start the server by running:
            </para>

            <literallayout class="monospaced">$ pegasus-service</literallayout>

            <para>
                By default, the server will start on 
                <ulink url="http://localhost:5000">http://localhost:5000</ulink>.
                You can set the host and port in the configuration file.
            </para>
        </section>
    </section>

    <section>
        <title>Dashboard</title>

        <para>TBD</para>

    </section>

    <section>
        <title>Ensemble Manager</title>

        <para>
            The ensemble manager is a service that manages collections of workflows
            called ensembles. The ensemble manager is useful when you have a set of
            workflows you need to run over a long period of time. It can throttle
            the number of concurrent planning and running workflows, and plan and
            run workflows in priority order. A typical use-case is a user with 100
            workflows to run, who needs no more than one to be planned at a time,
            and needs no more than two to be running concurrently.
        </para>

        <para>
            The ensemble manager also allows workflows to be submitted and monitored
            programmatically through its RESTful interface, which makes it an ideal
            platform for integrating workflows into larger applications such as
            science gateways and portals.
        </para>

        <para>To start the ensemble manager server, run:</para>

        <literallayout class="monospaced">$ pegasus-em server</literallayout>

        <para>Once the ensemble manager is running, you can create an ensemble with:</para>

        <literallayout class="monospaced">$ pegasus-em create myruns</literallayout>

        <para>where "myruns" is the name of the ensemble.</para>

        <para>Then you can submit a workflow to the ensemble by running:</para>

        <literallayout class="monospaced">$ pegasus-em submit myruns.run1 ./plan.sh run1.dax</literallayout>

        <para>
            Where the name of the ensemble is "myruns", the name of the workflow
            is "run1", and "./plan.sh run1.dax" is the command for planning the
            workflow from the current working directory. The planning command
            should either be a direct invocation of pegasus-plan, or a shell
            script that calls pegasus-plan. If a shell script is used, then it
            should not redirect the output of pegasus-plan, because the ensemble
            manager reads the output to determine whether pegasus-plan succeeded
            and what is the submit directory of the workflow.
        </para>

        <para>To check the status of your ensembles run:</para>

        <literallayout class="monospaced">$ pegasus-em ensembles</literallayout>

        <para>To check the status of your workflows run:</para>

        <literallayout class="monospaced">$ pegasus-em workflows myruns</literallayout>

        <para>To check the status of a specific workflow, run:</para>

        <literallayout class="monospaced">$ pegasus-em status myruns.run1</literallayout>

        <para>To help with debugging, the ensemble manager has an analyze
            command that emits diagnostic information about a workflow, including
            the output of pegasus-analyzer, if possible. To analyze a
            workflow, run:</para>

        <literallayout class="monospaced">$ pegasus-em analyze myruns.run1</literallayout>

        <para>
            Ensembles can be paused to prevent workflows from being planned
            and executed. Workflows in a paused ensemble will continue to run,
            but no new workflows will be planned or executed. To pause an
            ensemble, run:
        </para>

        <literallayout class="monospaced">$ pegasus-em pause myruns</literallayout>

        <para>Paused ensembles can be reactivated by running:</para>

        <literallayout class="monospaced">$ pegasus-em activate myruns</literallayout>

        <para>A workflow might fail during planning. In that case, run the
            analyze command to examine the planner output, make the necessary
            corrections to the workflow configuration, and replan the workflow
            by running:</para>

        <literallayout class="monospaced">$ pegasus-em replan myruns.run1</literallayout>

        <para>A workflow might also fail during execution. In that case, run
            the analyze command to identify the issue, correct the problem,
            and rerun the workflow by running:</para>

        <literallayout class="monospaced">$ pegasus-em rerun myruns.run1</literallayout>

        <para>Workflows in an ensemble can have different priorities. These
            priorities are used to determine the order in which workflows in
            the ensemble will be planned and executed. Priorities are specified
            using the '-p' option of the submit command. They can also be
            modified after a workflow has been submitted by running:</para>

        <literallayout class="monospaced">$ pegasus-em priority myruns.run1 -p 10</literallayout>

        <para>where 10 is the desired priority. Higher values have higher
            priority, the default is 0, and negative values are allowed.</para>

        <para>Each ensemble has a pair of throttles that limit the number of
            workflows that are concurrently planning and executing. These
            throttles are called max_planning and max_running. Max planning
            limits the number of workflows in the ensemble that can be planned
            concurrently. Max running limits the number of workflows in the
            ensemble that can be running concurrently. These throttles are
            useful to limit the impact of planning on the memory usage of the
            submit host, and the load on the submit host and remote site caused
            by concurrently running workflows. The throttles can be specified
            with the '-R' and '-P' options of the create command.
            They can also be updated using the config command:</para>

        <literallayout class="monospaced">$ pegasus-em config myruns.run1 -P 1 -R 5</literallayout>

    </section>

</chapter>
