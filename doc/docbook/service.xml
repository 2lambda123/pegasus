<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="service">
  <title>Pegasus Service</title>

  <section>
    <title>Service Administration</title>

    <section>
      <title>Service Configuration</title>

      <para>Create a file called service.py in $HOME/.pegasus/ OR modify the
      lib/pegasus/python/Pegasus/service/defaults.py file. The servuce can be
      configured using the properties described below.</para>

      <para><table>
          <title>Pegasus Service Configuration Options</title>

          <tgroup cols="3">
            <thead>
              <row>
                <entry align="center">Property</entry>

                <entry>Default Value</entry>

                <entry>Description</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>SERVER_HOST</entry>

                <entry>127.0.0.1</entry>

                <entry>SERVER_HOST specifies the hostname/network interface on
                which the service listens for requests.</entry>
              </row>

              <row>
                <entry>SERVER_PORT</entry>

                <entry>5000</entry>

                <entry>SERVER_PORT specifies the port number on which the
                service listens for requests.</entry>
              </row>

              <row>
                <entry>CERTIFICATE</entry>

                <entry>None</entry>

                <entry>SSL certificate file used to encrypt sessions. If no
                certificate, key files are provided the service will generate
                and use self-signed certificates.</entry>
              </row>

              <row>
                <entry>PRIVATE_KEY</entry>

                <entry>None</entry>

                <entry>SSL key file used to encrypt connections. If no
                certificate, key files are provided the service will generate
                and use self-signed certificates. </entry>
              </row>

              <row>
                <entry>AUTHENTICATION</entry>

                <entry>PAMAuthentication</entry>

                <entry>By default the service uses PAM authentication i.e.
                When prompted for a username and password users can use the
                credentials that they use to login to the machine. Users can
                specify NoAuthentication to disable username/password prompt.
                </entry>
              </row>

              <row>
                <entry>ADMIN_USERS</entry>

                <entry>None</entry>

                <entry>ADMIN_USERS can be used to specify which users have the
                ability to access other users workflow info. If ADMIN_USERS is
                None, False, or '' then users can only access their own
                workflow information. If ADMIN_USERS is '*' then all users are
                admin users and can access everyones workflow information. If
                ADMIN_USERS = {'u1', .., 'un'} OR ['u1', .., 'un'] then only
                users u1, .., un can access other users workflow
                information.</entry>
              </row>

              <row>
                <entry>PROCESS_SWITCHING</entry>

                <entry>True</entry>

                <entry>File created by running Pegasus workflows have
                permissions as per user configuration. So one user migt not be
                able to view workflow information of other users. Setting
                PROCESS_SWITCHING to True makes the service change the process
                UID to the UID of the user whose information is being
                requested. pegasus-service must be started as root for
                PROCESS_SWITCHING to work. PROCESS_SWITCHING can be set to
                False. </entry>
              </row>

              <row>
                <entry>USERNAME</entry>

                <entry>''</entry>

                <entry>The username which pegasus-em client uses to connect to
                the pegasus-em server.</entry>
              </row>

              <row>
                <entry>PASSWORD</entry>

                <entry>''</entry>

                <entry>The password which pegasus-em client uses to connect to
                the pegasus-em server.</entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>All clients that connect to the web API will require the USERNAME
      and PASSWORD settings in the configuration file.</para>
    </section>

    <section>
      <title>Running the Service</title>

      <para>Pegasus Service can be started using the pegasus-service command
      as follows</para>

      <programlisting>$ pegasus-service</programlisting>

      <para>By default, the server will start on <ulink
      url="http://localhost:5000">https://localhost:5000</ulink>. You can set
      the host and port in the configuration file OR pass it as a command line
      switch to pegasus-service as follows.</para>

      <programlisting>$ pegasus-service --hostname &lt;SERVER_HOSTNAME&gt; --port &lt;SERVER_PORT&gt;</programlisting>
    </section>
  </section>

  <section id="service_dashboard">
    <title>Dashboard</title>

    <para>The dashboard is automatically started when pegasus-service command
    is executed. </para>
  </section>

  <section id="service_apache">
    <title>Running Pegasus Service under Apache HTTPD</title>

    <para><emphasis role="bold">Prerequisites</emphasis> Apache HTTPD,
    mod_ssl, and mod_wsgi to be installed. </para>

    <para>To run pegasus-service under Apache HTTPD</para>

    <orderedlist>
      <listitem>
        <para>Copy file share/pegasus/service/pegasus-service.wsgi to some
        other directory. We will refer to this directory as
        &lt;WSGI_FILE_DIR&gt;.</para>

        <para>Configure pegasus service by setting the AUTHENTICATION,
        PROCESS_SWITCHING, and/or ADMIN_USERS properties in the
        &lt;WSGI_FILE_DIR&gt;/pegasus-service.wsgi file as desired.</para>
      </listitem>

      <listitem>
        <para>Copy file share/pegasus/service/pegasus-service-httpd.conf to
        your Apache conf directory.</para>

        <orderedlist>
          <listitem>
            <para>Replace PEGASUS_PYTHON_EXTERNALS with absolute path to
            pegasus python externals directory. Execute pegasus-config
            --python-externals to get this path</para>
          </listitem>

          <listitem>
            <para>Replace HOSTNAME with the hostname on which the server
            should listen for requests.</para>
          </listitem>

          <listitem>
            <para>Replace DOCUMENT_ROOT with &lt;WSGI_FILE_DIR&gt;</para>
          </listitem>

          <listitem>
            <para>Replace USER_NAME with the username as which the
            WSGIDaemonProcess should start</para>
          </listitem>

          <listitem>
            <para>Replace GROUP_NAME with the groupname as which the
            WSGIDaemonProcess should start</para>
          </listitem>

          <listitem>
            <para>Replace PATH_TO_PEGASUS_SERVICE_WSGI_FILE with
            &lt;WSGI_FILE_DIR&gt;/pegasus-service.wsgi</para>
          </listitem>

          <listitem>
            <para>Replace PATH_TO_SSL_CERT with absolute location of your SSL
            certificate file </para>
          </listitem>

          <listitem>
            <para>Replace PATH_TO_SSL_KEY with absolute location of your SSL
            private key file</para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>

    <para>For additional mod_wsgi configuration refer to <ulink
    url="https://code.google.com/p/modwsgi/wiki/ConfigurationDirectives">https://code.google.com/p/modwsgi/wiki/ConfigurationDirectives</ulink></para>
  </section>

  <section id="service_ensemble">
    <title>Ensemble Manager</title>

    <para>The ensemble manager is a service that manages collections of
    workflows called ensembles. The ensemble manager is useful when you have a
    set of workflows you need to run over a long period of time. It can
    throttle the number of concurrent planning and running workflows, and plan
    and run workflows in priority order. A typical use-case is a user with 100
    workflows to run, who needs no more than one to be planned at a time, and
    needs no more than two to be running concurrently.</para>

    <para>The ensemble manager also allows workflows to be submitted and
    monitored programmatically through its RESTful interface, which makes it
    an ideal platform for integrating workflows into larger applications such
    as science gateways and portals.</para>

    <para>To start the ensemble manager server, run:</para>

    <literallayout class="monospaced">$ pegasus-em server</literallayout>

    <para>Once the ensemble manager is running, you can create an ensemble
    with:</para>

    <literallayout class="monospaced">$ pegasus-em create myruns</literallayout>

    <para>where "myruns" is the name of the ensemble.</para>

    <para>Then you can submit a workflow to the ensemble by running:</para>

    <literallayout class="monospaced">$ pegasus-em submit myruns.run1 ./plan.sh run1.dax</literallayout>

    <para>Where the name of the ensemble is "myruns", the name of the workflow
    is "run1", and "./plan.sh run1.dax" is the command for planning the
    workflow from the current working directory. The planning command should
    either be a direct invocation of pegasus-plan, or a shell script that
    calls pegasus-plan. If a shell script is used, then it should not redirect
    the output of pegasus-plan, because the ensemble manager reads the output
    to determine whether pegasus-plan succeeded and what is the submit
    directory of the workflow.</para>

    <para>To check the status of your ensembles run:</para>

    <literallayout class="monospaced">$ pegasus-em ensembles</literallayout>

    <para>To check the status of your workflows run:</para>

    <literallayout class="monospaced">$ pegasus-em workflows myruns</literallayout>

    <para>To check the status of a specific workflow, run:</para>

    <literallayout class="monospaced">$ pegasus-em status myruns.run1</literallayout>

    <para>To help with debugging, the ensemble manager has an analyze command
    that emits diagnostic information about a workflow, including the output
    of pegasus-analyzer, if possible. To analyze a workflow, run:</para>

    <literallayout class="monospaced">$ pegasus-em analyze myruns.run1</literallayout>

    <para>Ensembles can be paused to prevent workflows from being planned and
    executed. Workflows in a paused ensemble will continue to run, but no new
    workflows will be planned or executed. To pause an ensemble, run:</para>

    <literallayout class="monospaced">$ pegasus-em pause myruns</literallayout>

    <para>Paused ensembles can be reactivated by running:</para>

    <literallayout class="monospaced">$ pegasus-em activate myruns</literallayout>

    <para>A workflow might fail during planning. In that case, run the analyze
    command to examine the planner output, make the necessary corrections to
    the workflow configuration, and replan the workflow by running:</para>

    <literallayout class="monospaced">$ pegasus-em replan myruns.run1</literallayout>

    <para>A workflow might also fail during execution. In that case, run the
    analyze command to identify the issue, correct the problem, and rerun the
    workflow by running:</para>

    <literallayout class="monospaced">$ pegasus-em rerun myruns.run1</literallayout>

    <para>Workflows in an ensemble can have different priorities. These
    priorities are used to determine the order in which workflows in the
    ensemble will be planned and executed. Priorities are specified using the
    '-p' option of the submit command. They can also be modified after a
    workflow has been submitted by running:</para>

    <literallayout class="monospaced">$ pegasus-em priority myruns.run1 -p 10</literallayout>

    <para>where 10 is the desired priority. Higher values have higher
    priority, the default is 0, and negative values are allowed.</para>

    <para>Each ensemble has a pair of throttles that limit the number of
    workflows that are concurrently planning and executing. These throttles
    are called max_planning and max_running. Max planning limits the number of
    workflows in the ensemble that can be planned concurrently. Max running
    limits the number of workflows in the ensemble that can be running
    concurrently. These throttles are useful to limit the impact of planning
    on the memory usage of the submit host, and the load on the submit host
    and remote site caused by concurrently running workflows. The throttles
    can be specified with the '-R' and '-P' options of the create command.
    They can also be updated using the config command:</para>

    <literallayout class="monospaced">$ pegasus-em config myruns.run1 -P 1 -R 5</literallayout>
  </section>
</chapter>
