<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="cli">
  <title>Command Line Tools</title>

  <para>This chapter contains reference material for all the command-line
  tools distributed with Pegasus.</para>

  <xi:include href="manpage.pegasus-analyzer.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-cleanup.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-config.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-create-dir.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-dax-validator.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-exitcode.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-monitord.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-plan.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-plots.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-rc-client.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-remove.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-run.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-s3.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-sc-client.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-sc-converter.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-statistics.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-status.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-tc-client.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-tc-converter.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-transfer.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <xi:include href="manpage.pegasus-version.xml"
              xmlns:xi="http://www.w3.org/2001/XInclude" />

  <section id="cli-kickstart">
    <title>Kickstart</title>

    <para>Kickstart is a job wrapper that collects data about a job's
    execution environment, performance, and output.</para>

    <section id="kickstart_syntax">
      <title>SYNTAX</title>

      <para><command>kickstart</command> [-n tr] [-N dv] [-H] [-R site] [-W |
      -w dir] [-L lbl -T iso] [-s [l=]p | @fn] [-S [l=]p | @fn] [-i fn]
      [-o fn] [-e fn] [-X] [-l fn sz] (-I fn | app [appflags] )</para>

      <para><command>kickstart</command> -V</para>

      <para>The <command>kickstart</command> executable is a light-weight
      program which connects the <emphasis>stdin</emphasis>,
      <emphasis>stdout</emphasis> and <emphasis>stderr</emphasis> filehandles
      for grid jobs on the remote site.</para>

      <para>Sitting in between the remote scheduler and the executable, it is
      possible for <command>kickstart</command> to gather additional
      information about the executable run-time behavior and resource usage,
      including the exit status of jobs. This information is important for the
      Pegasus invocation tracking as well as to Condor DAGMan's awareness of
      Globus job failures.</para>

      <para><command>Kickstart</command> allows the optional execution of jobs
      before and after the main application job that run in chained execution
      with the main application job. See section <link
      linkend="kickstart_subjobs">SUBJOBS</link> for details about this
      feature.</para>

      <para>All jobs with relative path specifications to the application are
      part of search relative to the current working directory (yes, this is
      unsafe), and by prepending each component from the <envar>PATH</envar>
      environment variable. The first match is used. Jobs that use absolute
      pathnames, starting in a slash, are exempt. Using an absolute path to
      your executable is the safe and recommended option.</para>

      <para><command>Kickstart</command> rewrites the commandline of any job
      (pre, post and main) with variable substitutions from Unix environment
      variables. See section <link
      linkend="kickstart_variable_rewriting">VARIABLE REWRITING</link> below
      for details on this feature.</para>

      <para><command>Kickstart</command> provides a temporary named pipe
      (fifo) for applications that are gridstart aware. Any data an
      application writes to the FIFO will be propagated back to the submit
      host, thus enabling progress meters and other application dependent
      monitoring. See section <link
      linkend="kickstart_feedback_channel">FEEDBACK CHANNEL</link> below for
      details on this feature.</para>
    </section>

    <section id="kickstart_arguments">
      <title>ARGUMENTS</title>

      <variablelist>
        <varlistentry>
          <term>
            <option>-n tr</option>
          </term>

          <listitem>
            <para>In order to associate the minimal performance information of
            the job with the invocation records, the jobs needs to carry which
            <emphasis>transformation</emphasis> was responsible for producing
            it. The format is the notation for fully-qualified definition
            names, like namespace::name:version, with only the name portion
            being mandatory.</para>

            <para>There is no default. If no value is given, "null" will be
            reported.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-N dv</option>
          </term>

          <listitem>
            <para>the job may carry which instantiation of a transformation
            was responsible for producing it. The format is the notation for
            fully-qualified definition names, like namespace::name:version,
            with only the name portion being mandatory.</para>

            <para>There is no default. If no value is given, "null" will be
            reported.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-H</option>
          </term>

          <listitem>
            <para>This option avoids kickstart writing the XML preamble
            (entity), if you need to combine multiple kickstart records into
            one document.</para>

            <para>Additionally, if specified, the environment and the resource
            usage segments will not be written, assuming that a in a
            concatinated record version, the initial run will have captured
            those settings.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-R site</option>
          </term>

          <listitem>
            <para>In order to provide the greater picture, kickstart can
            reflect the site handle (resource identifier) into its
            output.</para>

            <para>There is no default. If no value is given, the attribute
            will not be generated.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-L lbl</option>
          </term>

          <term>
            <option>-T iso</option>
          </term>

          <listitem>
            <para>These optional arguments denote the workflow label (from
            DAX) and the workflow's last modification time (from DAX). The
            label <emphasis>lbl</emphasis> can be any sensible string of up to
            32 characters, but should use C identifier characters. The
            timestamp <emphasis>iso</emphasis> must be an ISO 8601 compliant
            time-stamp.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-S l=p</option>
          </term>

          <listitem>
            <para>If stat information on any file is required
            <emphasis>before</emphasis> any jobs were started, logical to
            physical file mappings to stat can be passed using the
            <option>-S</option> option. The LFN and PFN are concatenated by an
            equals (=) sign. The LFN is optional: If no equals sign is found,
            the argument is taken as sole PFN specification without
            LFN.</para>

            <para>This option may be specified multiple times. To reduce and
            overcome commandline length limits, if the argument is prefixed
            with an at (@) sign, the argument is taken to be a textual file of
            LFN to PFN mappings. The optionality mentioned above applies. Each
            line inside the file argument is the name of a file to stat.
            Comments (#) and empty lines are permitted.</para>

            <para>Each PFN will incur a <markup>statcall</markup> record
            (element) with attribute <emphasis>id</emphasis> set to value
            <emphasis>initial</emphasis>. The optional
            <emphasis>lfn</emphasis> attribute is set to the LFN stat'ed. The
            filename is part of the <markup>statinfo</markup> record
            inside.</para>

            <para>There is no default.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-s fn</option>
          </term>

          <listitem>
            <para>If stat information on any file is required
            <emphasis>after</emphasis> all jobs have finished, logical to
            physical file mappings to stat can be passed using the
            <option>-s</option> option. The LFN and PFN are concatenated by an
            equals (=) sign. The LFN is optional: If no equals sign is found,
            the argument is taken as sole PFN specification without
            LFN.</para>

            <para>This option may be specified multiple times. To reduce and
            overcome commandline length limits, if the argument is prefixed
            with an at (@) sign, the argument is taken to be a textual file of
            LFN to PFN mappings. The optionality mentioned above applies. Each
            line inside the file argument is the name of a file to stat.
            Comments (#) and empty lines are permitted.</para>

            <para>Each PFN will incur a <markup>statcall</markup> record
            (element) with attribute <emphasis>id</emphasis> set to value
            <emphasis>final</emphasis>. The optional <emphasis>lfn</emphasis>
            attribute is set to the LFN stat'ed. The filename is part of the
            <markup>statinfo</markup> record inside.</para>

            <para>There is no default.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-i fn</option>
          </term>

          <listitem>
            <para>This option allows <emphasis>kickstart</emphasis> to
            re-connect the stdin of the application that it starts. Use a
            single hyphen to share <emphasis>stdin</emphasis> with the one
            provided to <command>kickstart</command>.</para>

            <para>The default is to connect <emphasis>stdin</emphasis> to
            <filename>/dev/null</filename>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-o fn</option>
          </term>

          <listitem>
            <para>This option allows <command>kickstart</command> to
            re-connect the <emphasis>stdout</emphasis> of the application that
            it starts. The mode is used whenever an application produces
            meaningful results on its <emphasis>stdout</emphasis> that need to
            be tracked by Pegasus. The real<emphasis>stdout</emphasis> of
            Globus jobs is staged via GASS (GT2) or RFT (GT4), or whichever
            other means your grid middleware uses. The real
            <emphasis>stdout</emphasis> is used to propagate the invocation
            record back to the submit site. Use the single hyphen to share the
            application's <emphasis>stdout</emphasis> with the one that is
            provided to <command>kickstart</command>. In that case, the output
            from <emphasis>kickstart</emphasis> will interleave with
            application output. For this reason, such a mode is not
            recommended.</para>

            <para>In order to provide an uncaptured
            <emphasis>stdout</emphasis> as part of the results, it is the
            default to connect the <emphasis>stdout</emphasis> of the
            application to a temporary file. The content of this temporary
            file will be transferred as payload data in the
            <emphasis>kickstart</emphasis> results. The content size is
            subject to payload limits, see the <option>-B</option> option. If
            the content grows large, only an initial portion will become part
            of the payload. If the temporary file grows too large, it may
            flood the worker node's temporary space. The temporary file will
            be deleted after <command>kickstart</command> finishes.</para>

            <para>If the filename is prefixed with an exclaimation point, the
            file will be opened in append mode instead of overwrite mode. Note
            that you may need to escape the exclaimation point from the
            shell.</para>

            <para>The default is to connect <emphasis>stdout</emphasis> to a
            temporary file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-e fn</option>
          </term>

          <listitem>
            <para>This option allows <command>kickstart</command> to
            re-connect the <emphasis>stderr</emphasis> of the application that
            it starts. This option is used whenever an application produces
            meaningful results on <emphasis>stderr</emphasis> that needs
            tracking by Pegasus. The real <emphasis>stderr</emphasis> of
            Globus jobs is staged via GASS (GT2) or RFT (GT4). It is used to
            propagate abnormal behaviour from both,
            <emphasis>kickstart</emphasis> and the application that it starts,
            though its main use is to propagate application dependent data and
            heartbeats. Use a single hyphen to share
            <emphasis>stderr</emphasis> with the <emphasis>stderr</emphasis>
            that is provided to <command>kickstart</command>. This is the
            backward compatible behavior.</para>

            <para>In order to provide an uncaptured
            <emphasis>stderr</emphasis> as part of the results, by default the
            <emphasis>stderr</emphasis> of the application will be connected
            to a temporary file. Its content is transferred as payload data in
            the <emphasis>kickstart</emphasis> results. If too large, only the
            an initial portion will become part of the payload. If the
            temporary file grows too large, it may flood the worker node's
            temporary space. The temporary file will be deleted after
            <command>kickstart</command> finishes.</para>

            <para>If the filename is prefixed with an exclaimation point, the
            file will be opened in append mode instead of overwrite mode. Note
            that you may need to escape the exclaimation point from the
            shell.</para>

            <para>The default is to connect <emphasis>stderr</emphasis> to a
            temporary file.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-l logfn</option>
          </term>

          <listitem>
            <para>allows to append the performance data to the specified file.
            Thus, multiple XML documents may end up in the same file,
            including their XML preamble. <emphasis>stdout</emphasis> is
            normally used to stream back the results. Usually, this is a
            GASS-staged stream. Use a single hyphen to generate the output on
            the <emphasis>stdout</emphasis> that was provided to
            <command>kickstart</command>, the default behavior.</para>

            <para>Default is to append the invocation record onto the provided
            <emphasis>stdout</emphasis>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-w dir</option>
          </term>

          <listitem>
            <para>permits the explicit setting of a new working directory once
            <command>kickstart</command> is started. This is useful in a
            remote scheduling environment, when the chosen working directory
            is not visible on the job submitting host. If the directory does
            not exist, <command>kickstart</command> will fail. This option is
            mutually exclusive with the <option>-W dir</option> option.</para>

            <para>Default is to use the working directory that the application
            was started in. This is usually set up by a remote scheduling
            environment.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-W dir</option>
          </term>

          <listitem>
            <para>permits the explicit creation and setting of a new working
            directory once <command>kickstart</command> is started. This is
            useful in a remote scheduling environment, when the chosen working
            directory is not visible on the job submitting host. If the
            directory does not exist, <command>kickstart</command> will
            attempt to create it, and then change into it. Both, creation and
            directory change may still fail. This option is mutually exclusive
            with the <option>-w dir</option> option.</para>

            <para>Default is to use the working directory that the application
            was started in. This is usually set up by a remote scheduling
            environment.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-X</option>
          </term>

          <listitem>
            <para>make an application executable, no matter what. It is a
            work-around code for a weakness of
            <command>globus-url-copy</command> which does not copy the
            permissions of the source to the destination. Thus, if an
            executable is staged-in using GridFTP, it will have the wrong
            permissions. Specifying the <option>-X</option> flag will attempt
            to change the mode to include the necessary x (and r) bits to make
            the application executable.</para>

            <para>Default is not to change the mode of the application. Note
            that this feature can be misused by hackers, as it is attempted to
            call <command>chmod</command> on whatever path is
            specified.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-B sz</option>
          </term>

          <listitem>
            <para>varies the size of the debug output data section. If the
            file descriptors <emphasis>stdout</emphasis> and
            <emphasis>stderr</emphasis> remain untracked,
            <command>kickstart</command> tracks that output in temporary
            files. The first few pages from this output is copied into a data
            section in the output. In order to resize the length of the output
            within reasonable boundaries, this option permits a changes. Data
            beyond the size will not be copied, i.e. is truncated.</para>

            <para>Warning: This is <emphasis>not</emphasis> a cheap way to
            obtain the stdio file handle data. Please use tracked files for
            that. Due to output buffer pre-allocation, using arbitrary large
            arguments may result in failures of <command>kickstart</command>
            itself to allocate the necessary memory.</para>

            <para>The default maximum size of the data section is 262144
            byte.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <option>-I fn</option>
          </term>

          <listitem>
            <para>In this mode, the application name and any arguments to the
            application are specified inside of file <filename>fn</filename>.
            The file contains one argument per line. Escapeing from Globus,
            Condor and shell meta characters is not required. This mode
            permits to use the maximum possible commandline length of the
            underlying operationg system, e.g. 128k for Linux. Using the
            <option>-I</option> mode stops any further commandline processing
            of <command>kickstart</command> command lines.</para>

            <para>Default is to use the <emphasis>app flags</emphasis> mode,
            where the application is specified explicitely on the
            command-line.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <emphasis>app</emphasis>
          </term>

          <listitem>
            <para>The path to the application has to be completely specified.
            The application is a mandatory option.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <emphasis>appflags</emphasis>
          </term>

          <listitem>
            <para>Application may or may not have additional flags.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="kickstart_return_value">
      <title>RETURN VALUE</title>

      <para><command>Kickstart</command> will return the return value of the
      main job. In addition, the error code 127 signals that the call to exec
      failed, and 126 that reconnecting the stdio failed. A job failing with
      the same exit codes is indistinguishable from <emphasis>
          <command>kickstart</command>
        </emphasis> failures.</para>
    </section>

    <section id="kickstart_subjobs">
      <title>SUBJOBS</title>

      <para>Subjobs are a new feature and may have a few wrinkles left.</para>

      <para>In order to allow specific setups and assertion checks for compute
      nodes, <command>kickstart</command> allows the optional execution of a
      <emphasis>prejob</emphasis>. This <emphasis>prejob</emphasis> is
      anything that the remote compute node is capable of executing. For
      modern Unix systems, this includes <token>#!</token> scripts interpreter
      invocations, as long as the x bits on the executed file are set. The
      main job is run if and only if the prejob returned regularly with an
      exit code of zero.</para>

      <para>With similar restrictions, the optional execution of a
      <emphasis>postjob</emphasis> is chained to the success of the main job.
      The postjob will be run, if the main job terminated normally with an
      exit code of zero.</para>

      <para>In addition, a user may specify a <emphasis>setup</emphasis> and a
      <emphasis>cleanup</emphasis> job. The <emphasis>setup</emphasis> job
      sets up the remote execution environment. The
      <emphasis>cleanup</emphasis> job may tear down and clean-up after any
      job ran. Failure to run the setup job has no impact on subsequent jobs.
      The cleanup is a job that will even be attempted to run for all failed
      jobs. No job information is passed. If you need to invoke multiple setup
      or clean-up jobs, bundle them into a script, and invoke the clean-up
      script. Failure of the clean-up job is not meant to affect the progress
      of the remote workflow (DAGMan). This may change in the future.</para>

      <para>The setup-, pre-, and post- and cleanup-job run on the same
      compute node as the main job to execute. However, since they run in
      separate processes as children of <emphasis>kickstart</emphasis>, they
      are unable to influence each others nor the main jobs environment
      settings.</para>

      <para>All jobs and their arguments are subject to variable substitutions
      as explained in the next section.</para>

      <para>To specify the prejob, insert the the application invocation and
      any optional commandline argument into the environment variable
      <envar>GRIDSTART_PREJOB</envar>. If you are invoking from a shell, you
      might want to use single quotes to protect against the shell. If you are
      invoking from Globus, you can append the RSL string feature. From
      Condor, you can use Condor's notion of environment settings. From
      Pegasus, use the <emphasis>profile</emphasis> command to set generic
      scripts that will work on multiple sites, or the transformation catalog
      to set environment variables in a pool-specific fashion. Please remember
      that the execution of the main job is chained to the success of the
      prejob.</para>

      <para>To set up the postjob, use the environment variable
      <envar>GRIDSTART_POSTJOB</envar> to point to an application with
      potential arguments to execute. The same restrictions as for the prejob
      apply. Please note that the execution of the post job is chained to the
      main job.</para>

      <para>To provide the independent setup job, use the environment variable
      <envar>GRIDSTART_SETUP</envar>. The exit code of the setup job has no
      influence on the remaining chain of jobs. To provide an independent
      cleanup job, use the environment variable
      <envar>GRIDSTART_CLEANUP</envar> to point to an application with
      possible arguments to execute. The same restrictions as for prejob and
      postjob apply. The cleanup is run regardless of the exit status of any
      other jobs.</para>
    </section>

    <section id="kickstart_variable_rewriting">
      <title>VARIABLE REWRITING</title>

      <para>Variable substitution is a new feature and may have a few wrinkles
      left.</para>

      <para>The variable substitution employs simple rules from the Bourne
      shell syntax. Simple quoting rules for backslashed characters, double
      quotes and single quotes are obeyed. Thus, in order to pass a dollar
      sign to as argument to your job, it must be escaped with a backslash
      from the variable rewriting.</para>

      <para>For pre- and postjobs, double quotes allow the preservation of
      whitespace and the insertion of special characters like \a (alarm), \b
      (backspace), \n (newline), \r (carriage return), \t (horizontal tab),
      and \v (vertical tab). Octal modes are <emphasis>not</emphasis> allowed.
      Variables are still substituted in double quotes. Single quotes inside
      double quotes have no special meaning.</para>

      <para>Inside single quotes, no variables are expanded. The backslash
      only escapes a single quote or backslash.</para>

      <para>Backticks are not supported.</para>

      <para>Variables are only substituted once. You cannot have variables in
      variables. If you need this feature, please request it.</para>

      <para>Outside quotes, arguments from the pre- and postjob are split on
      linear whitespace. The backslash makes the next character
      verbatim.</para>

      <para>Variables that are rewritten must start with a dollar sign either
      outside quotes or inside double quotes. The dollar may be followed by a
      valid identifier. A valid identifier starts with a letter or the
      underscore. A valid identifier may contain further letters, digits or
      underscores. The identifier is case sensitive.</para>

      <para>The alternative use is to enclose the identifier inside curly
      braces. In this case, almost any character is allowed for the
      identifier, including whitespace. This is the <emphasis>only</emphasis>
      curly brace expansion. No other Bourne magic involving curly braces is
      supported.</para>

      <para>One of the advantages of variable substitution is, for example,
      the ability to specify the application as
      <userinput>$HOME/bin/app1</userinput> in the transformation catalog, and
      thus to gridstart. As long as your home directory on any compute node
      has a <filename>bin</filename> directory that contains the application,
      the transformation catalog does not need to care about the true location
      of the application path on each pool. Even better, an administrator may
      decide to move your home directory to a different place. As long as the
      compute node is set up correctly, you don't have to adjust any Pegasus
      data.</para>

      <para>Mind that variable substitution is an expert feature, as some
      degree of tricky quoting is required to protect substitutable variables
      and quotes from Globus, Condor and Pegasus in that order. Note that
      Condor uses the dollar sign for its own variables.</para>

      <para>The variable substitution assumptions for the main job differ
      slightly from the prejob and postjob for technical reasions. The pre-
      and postjob commandlines are passed as one string. However, the main
      jobs commandline is already split into pieces by the time it reaches
      <emphasis>kickstart</emphasis>. Thus, any whitespace on the main job's
      commandline must be preserved, and further argument splitting
      avoided.</para>

      <para>It is highly recommended to experiment on the Unix commandline
      with the <emphasis>echo</emphasis> and <emphasis>env</emphasis>
      applications to obtain a feeling for the different quoting mechanisms
      needed to achieve variable substitution.</para>
    </section>

    <section id="kickstart_feedback_channel">
      <title>FEEDBACK CHANNEL</title>

      <para>A long-running application may consider to stream back heart beats
      and other application-specific monitoring and progress data. For this
      reason, <command>kickstart</command> provides a feedback channel. At
      start-up, a transient named pipe, also known as FIFO, is created. While
      waiting for started jobs to finish, <emphasis>kickstart</emphasis> will
      attempt to read from the FIFO. By default, any information read will be
      encapsulated in XML tags, and written to <emphasis>stderr .</emphasis>
      Please note that in a Pegasus, Globus, Condor-G environment,
      <emphasis>stderr</emphasis> will be GASS streamed or staged to the
      submit host. At the submit host, an application specific monitor may
      unpack the data chunks and could for instance visually display them, or
      aggregate them with other data. Please note that
      <emphasis>kickstart</emphasis> only provides a feedback channel. The
      content and interpretation is up to, and specific for the
      application.</para>

      <para>In order to make an application gridstart aware, it needs to be
      able to write to a FIFO. The filename can be picked up from the
      environment variable <envar>GRIDSTART_CHANNEL</envar> which is provided
      to all jobs. Please note that the application must be prepared to handle
      the PIPE signal when writing to a FIFO, and must be able to cope with
      failing write operations.</para>
    </section>

    <section id="kickstart_example">
      <title>EXAMPLE</title>

      <para>You can run the <command>kickstart</command> executable locallly
      to verify that it is functioning well. In the initial phase, the format
      of the performance data may be slightly adjusted.</para>

      <para>
        <screen>$ <command>env GRIDSTART_PREJOB='/bin/usleep 250000' \\
  GRIDSTART_POSTJOB='/bin/date -u' \\
  kickstart -l xx \\$PEGASUS_HOME/bin/keg -T1 -o-</command>
$ <command>cat xx</command>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
  ...
  &lt;/statcall&gt;
&lt;/invocation&gt;</screen>
      </para>

      <para>Please take note a few things in the above example:</para>

      <para>The output from the postjob is appended to the output of the main
      job on <emphasis>stdout</emphasis>. The output could potentially be
      separated into different data sections through different temporary
      files. If you truly need the separation, request that feature.</para>

      <para>The log file is reported with a size of zero, because the log file
      did indeed barely exist at the time the data structure was (re-)
      initialized. With regular GASS output, it will report the status of the
      socket file descriptor, though.</para>

      <para>The file descriptors reported for the temporary files are from the
      perspective of <command>kickstart</command>. Since the temporary files
      have the <emphasis>close-on-exec</emphasis> flag set,
      <command>kickstart</command>'s filedescriptors are invisible to the job
      processes. Still, the <emphasis>stdio</emphasis> of the job processes
      are connected to the temporary files.</para>

      <para>Even this output already appears large. The output may already be
      too large to guarantee that the append operation on networked pipes
      (GASS, NFS) are atomically written.</para>

      <para>The current format of the performance data is as follows:</para>
    </section>

    <section id="kickstart_output_format">
      <title>OUTPUT FORMAT</title>

      <para>Refer to <emphasis>
          <ulink
          url="http://pegasus.isi.edu/documentation">http://pegasus.isi.edu/documentation</ulink>
        </emphasis> for an up-to-date description of elements and their
      attributes and with for invocation schemas with a higher version
      number.</para>
    </section>

    <section id="kickstart_restrictions">
      <title>RESTRICTIONS</title>

      <para>There is no version for the Condor <emphasis>standard</emphasis>
      universe. It is simply not possible within the constraints of
      Condor.</para>

      <para>Due to its very nature, <command>kickstart</command> will also
      prove difficult to port outside the Unix environment.</para>

      <para>Any of the pre-, main-, cleanup and postjob are unable to
      influence one anothers visible environment.</para>

      <para>Do not use a Pegasus transformation with just the name
      <emphasis>null</emphasis> and no namespace nor version.</para>

      <para>First Condor, and then Unix, place a limit on the length of the
      commandline. The additional space required for the gridstart invocation
      may silently overflow the maximum space, and cause applications to fail.
      If you suspect to work with many arguments, try an argument-file based
      approach.</para>

      <para>A job failing with exit code 126 or 127 is indistinguishable from
      <command>kickstart</command> failing with the same exit codes.
      Sometimes, careful examination of the returned data can help.</para>

      <para>If the logfile is collected into a shared file, due to the size of
      the data, simultaneous appends on a shared filesystem from different
      machines may still mangle data. Currently, file locking is not even
      attempted, although all data is written atomically from the perspective
      of <command>kickstart</command>.</para>

      <para>The upper limit of characters of commandline characters is
      currently not checked by <command>kickstart</command>. Thus, some
      variable substitutions could potentially result in a commandline that is
      larger than permissable.</para>

      <para>If the output or error file is opened in append mode, but the
      application decides to truncate its output file, as in aboves example by
      opening <filename>/dev/fd/1</filename> inside <command>keg</command>,
      the resulting file will still be truncated. This is correct behavior,
      but sometimes not obvious.</para>
    </section>

    <section id="kickstart_files">
      <title>FILES</title>

      <variablelist>
        <varlistentry>
          <term>
            <emphasis>$PEGASUS_HOME/etc/iv-2.1.xsd</emphasis>
          </term>

          <listitem>
            <para>is the suggested location of the latest XML schema
            describing the data on the submit host.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <section id="kickstart_environment_variables">
      <title>ENVIRONMENT VARIABLES</title>

      <variablelist>
        <varlistentry>
          <term>
            <envar>GRIDSTART_TMP</envar>
          </term>

          <listitem>
            <para>is the hightest priority to look for a temporary directory,
            if specified. This rather special variable was introduced to
            overcome some peculiarities with the FNAL cluster.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>TMP</envar>
          </term>

          <listitem>
            <para>is the next hightest priority to look for a temporary
            directory, if specified.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>TEMP</envar>
          </term>

          <listitem>
            <para>is the next priority for an environment variable denoting a
            temporary files directory.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>TMPDIR</envar>
          </term>

          <listitem>
            <para>is next in the checklist. If none of these are found, either
            the <emphasis>stdio</emphasis> definition
            <emphasis>P_tmpdir</emphasis> is taken, or the fixed
            string<filename>/tmp .</filename></para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>GRIDSTART_SETUP</envar>
          </term>

          <listitem>
            <para>contains a string that starts a job to be executed
            unconditionally before any other jobs, see above for a detailled
            description.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>GRIDSTART_PREJOB</envar>
          </term>

          <listitem>
            <para>contains a string that starts a job to be executed before
            the main job, see above for a detailled description.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>GRIDSTART_POSTJOB</envar>
          </term>

          <listitem>
            <para>contains a string that starts a job to be executed
            conditionally after the main job, see above for a detailled
            description.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>GRIDSTART_CLEANUP</envar>
          </term>

          <listitem>
            <para>contains a string that starts a job to be executed
            unconditionally after any of the previous jobs, see above for a
            detailled description.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>
            <envar>GRIDSTART_CHANNEL</envar>
          </term>

          <listitem>
            <para>is the name of a FIFO for an application-specific
            feedback-channel, see above for a detailled description.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
  </section>
</section>
