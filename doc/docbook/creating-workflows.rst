.. _creating-workflows:

==================
Creating Workflows
==================

.. _abstract-workflows:

Abstract Workflows (DAX)
========================

The DAX is a description of an abstract workflow in XML format that is
used as the primary input into Pegasus. The DAX schema is described in
`dax-3.4.xsd <schemas/dax-3.4/dax-3.4.xsd>`__ The documentation of the
schema and its elements can be found in
`dax-3.4.html <schemas/dax-3.4/dax-3.4.html>`__.

A DAX can be created by all users with the DAX generating API in Java,
Perl, or Python format

   **Note**

   We highly recommend using the DAX API. The Perl DAX API is deprecated
   starting 4.9.0 Release and will be removed in the 5.0 Release.

Advanced users who can read XML schema definitions can generate a DAX
directly from a script

The sample workflow below incorporates some of the elementary graph
structures used in all abstract workflows.

-  **fan-out**, **scatter**, and **diverge** all describe the fact that
   multiple siblings are dependent on fewer parents.

   The example shows how the **Job 2 and 3** nodes depend on **Job 1**
   node.

-  **fan-in**, **gather**, **join**, and **converge** describe how
   multiple siblings are merged into fewer dependent child nodes.

   The example shows how the **Job 4** node depends on both **Job 2 and
   Job 3** nodes.

-  **serial execution** implies that nodes are dependent on one another,
   like pearls on a string.

-  **parallel execution** implies that nodes can be executed in parallel

The example diamond workflow consists of four nodes representing jobs,
and are linked by six files.

-  Required input files must be registered with the Replica catalog in
   order for Pegasus to find it and integrate it into the workflow.

-  Leaf files are a product or output of a workflow. Output files can be
   collected at a location.

-  The remaining files all have lines leading to them and originating
   from them. These files are products of some job steps (lines leading
   to them), and consumed by other job steps (lines leading out of
   them). Often, these files represent intermediary results that can be
   cleaned.

There are two main ways of generating DAX's

1. Using a DAX generating API in `Java <#api-java>`__,
   `Perl <#api-perl>`__ or `Python <#api-python>`__.

   **Note:** We recommend this option.

2. Generating XML directly from your script.

   **Note:** This option should only be considered by advanced users who
   can also read XML schema definitions.

One example for a DAX representing the example workflow can look like
the following:

::

   <?xml version="1.0" encoding="UTF-8"?>
   <!-- generated on: 2016-01-21T10:36:39-08:00 -->
   <!-- generated by: vahi [ ?? ] -->
   <adag xmlns="http://pegasus.isi.edu/schema/DAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://pegasus.isi.edu/schema/DAX http://pegasus.isi.edu/schema/dax-3.6.xsd" version="3.6" name="diamond" index="0" count="1">

   <!-- Section 1: Metadata attributes for the workflow (can be empty)  -->

      <metadata key="name">diamond</metadata>
      <metadata key="createdBy">Karan Vahi</metadata>

   <!-- Section 2: Invokes - Adds notifications for a workflow (can be empty) -->

      <invoke when="start">/pegasus/libexec/notification/email -t notify@example.com</invoke>
      <invoke when="at_end">/pegasus/libexec/notification/email -t notify@example.com</invoke>

   <!-- Section 3: Files - Acts as a Replica Catalog (can be empty) -->

      <file name="f.a">
         <metadata key="size">1024</metadata>
         <pfn url="file:///Volumes/Work/lfs1/work/pegasus-features/PM-902/f.a" site="local"/>
      </file>

   <!-- Section 4: Executables - Acts as a Transformaton Catalog (can be empty) -->

      <executable namespace="pegasus" name="preprocess" version="4.0" installed="true" arch="x86" os="linux">
         <metadata key="size">2048</metadata>
         <pfn url="file:///usr/bin/keg" site="TestCluster"/>
      </executable>
      <executable namespace="pegasus" name="findrange" version="4.0" installed="true" arch="x86" os="linux">
         <pfn url="file:///usr/bin/keg" site="TestCluster"/>
      </executable>
      <executable namespace="pegasus" name="analyze" version="4.0" installed="true" arch="x86" os="linux">
         <pfn url="file:///usr/bin/keg" site="TestCluster"/>
      </executable>

   <!-- Section 5: Transformations - Aggregates executables and Files (can be empty) -->


   <!-- Section 6: Job's, DAX's or Dag's - Defines a JOB or DAX or DAG (Atleast 1 required) -->

      <job id="j1" namespace="pegasus" name="preprocess" version="4.0">
         <metadata key="time">60</metadata>
         <argument>-a preprocess -T 60 -i  <file name="f.a"/> -o  <file name="f.b1"/>   <file name="f.b2"/></argument>
         <uses name="f.a" link="input">
            <metadata key="size">1024</metadata>
         </uses>
         <uses name="f.b1" link="output" transfer="true" register="true"/>
         <uses name="f.b2" link="output" transfer="true" register="true"/>
         <invoke when="start">/pegasus/libexec/notification/email -t notify@example.com</invoke>
         <invoke when="at_end">/pegasus/libexec/notification/email -t notify@example.com</invoke>
      </job>
      <job id="j2" namespace="pegasus" name="findrange" version="4.0">
         <metadata key="time">60</metadata>
         <argument>-a findrange -T 60 -i  <file name="f.b1"/> -o  <file name="f.c1"/></argument>
         <uses name="f.b1" link="input"/>
         <uses name="f.c1" link="output" transfer="true" register="true"/>
         <invoke when="start">/pegasus/libexec/notification/email -t notify@example.com</invoke>
         <invoke when="at_end">/pegasus/libexec/notification/email -t notify@example.com</invoke>
      </job>
      <job id="j3" namespace="pegasus" name="findrange" version="4.0">
         <metadata key="time">60</metadata>
         <argument>-a findrange -T 60 -i  <file name="f.b2"/> -o  <file name="f.c2"/></argument>
         <uses name="f.b2" link="input"/>
         <uses name="f.c2" link="output" transfer="true" register="true"/>
         <invoke when="start">/pegasus/libexec/notification/email -t notify@example.com</invoke>
         <invoke when="at_end">/pegasus/libexec/notification/email -t notify@example.com</invoke>
      </job>
      <job id="j4" namespace="pegasus" name="analyze" version="4.0">
         <metadata key="time">60</metadata>
         <argument>-a analyze -T 60 -i  <file name="f.c1"/>   <file name="f.c2"/> -o  <file name="f.d"/></argument>
         <uses name="f.c1" link="input"/>
         <uses name="f.c2" link="input"/>
         <uses name="f.d" link="output" transfer="true" register="true"/>
         <invoke when="start">/pegasus/libexec/notification/email -t notify@example.com</invoke>
         <invoke when="at_end">/pegasus/libexec/notification/email -t notify@example.com</invoke>
      </job>

   <!-- Section 7: Dependencies - Parent Child relationships (can be empty) -->

      <child ref="j2">
         <parent ref="j1"/>
      </child>
      <child ref="j3">
         <parent ref="j1"/>
      </child>
      <child ref="j4">
         <parent ref="j2"/>
         <parent ref="j3"/>
      </child>
   </adag>

The example workflow representation in form of a DAX requires external
catalogs, such as transformation catalog (TC) to resolve the logical job
names (such as diamond::preprocess:2.0), and a replica catalog (RC) to
resolve the input file ``f.a``. The above workflow defines the four jobs
just like the example picture, and the files that flow between the jobs.
The intermediary files are neither registered nor staged out, and can be
considered transient. Only the final result file ``f.d`` is staged out.

.. _replica:

Data Discovery (Replica Catalog)
================================

The Replica Catalog keeps mappings of logical file ids/names (LFN's) to
physical file ids/names (PFN's). A single LFN can map to several PFN's.
A PFN consists of a URL with protocol, host and port information and a
path to a file. Along with the PFN one can also store additional
key/value attributes to be associated with a PFN.

Pegasus supports the following implementations of the Replica Catalog.

1. **File**\ (Default)

2. **Regex**

3. **Directory**

4. **Database via JDBC**

5. **MRC**

.. _rc-FILE:

File
----

In this mode, Pegasus queries a file based replica catalog. The file
format is a simple multicolumn format. It is neither transactionally
safe, nor advised to use for production purposes in any way. Multiple
concurrent instances will conflict with each other. The site attribute
should be specified whenever possible. The attribute key for the site
attribute is **"site".**

::

   LFN PFN
   LFN PFN a=b [..]
   LFN PFN a="b" [..]
   "LFN w/LWS" "PFN w/LWS" [..]


The LFN may or may not be quoted. If it contains linear whitespace,
quotes, backslash or an equal sign, it must be quoted and escaped. The
same conditions apply for the PFN. The attribute key-value pairs are
separated by an equality sign without any whitespaces. The value may be
quoted. The LFN sentiments about quoting apply.

The file mode is the Default mode. In order to use the File mode you
have to set the following properties

1. **pegasus.catalog.replica=File**

2. **pegasus.catalog.replica.file=<path to the replica catalog file>**

.. _rc-regex:

Regex
-----

In this mode, Pegasus queries a file based replica catalog. The file
format is a simple multicolumn format. It is neither transactionally
safe purposes in any way. Multiple concurrent instances will conflict
with each other. The site attribute should be specified whenever
possible. The attribute key for the site attribute is **"site".**

In addition users can specifiy regular expression based LFN's. A regular
expression based entry should be qualified with an attribute named
'regex'. The attribute regex when set to true identifies the catalog
entry as a regular expression based entry. Regular expressions should
follow Java regular expression syntax.

For example, consider a replica catalog as shown below.

Entry 1 refers to an entry which does not use a regular expressions.
This entry would only match a file named 'f.a', and nothing else.

Entry 2 referes to an entry which uses a regular expression. In this
entry f.a referes to files having name as f<any-character>a i.e. faa,
f.a, f0a, etc.

::

   #1
   f.a file:///Volumes/data/input/f.a site="local"
   #2
   f.a file:///Volumes/data/input/f.a site="local" regex="true"

Regular expression based entries also support substitutions. For
example, consider the regular expression based entry shown below.

Entry 3 will match files with name alpha.csv, alpha.txt, alpha.xml. In
addition, values matched in the expression can be used to generate a
PFN.

For the entry below if the file being looked up is alpha.csv, the PFN
for the file would be generated as
file:///Volumes/data/input/csv/alpha.csv. Similary if the file being
lookedup was alpha.csv, the PFN for the file would be generated as
file:///Volumes/data/input/xml/alpha.xml i.e. The section [0], [1] will
be replaced. Section [0] refers to the entire string i.e. alpha.csv.
Section [1] refers to a partial match in the input i.e. csv, or txt, or
xml. Users can utilize as many sections as they wish.

::

   #3
   alpha\.(csv|txt|xml) file:///Volumes/data/input/[1]/[0] site="local" regex="true"

In case of a LFN name matching multiple entries in the file, the
implementation picks up the first matching regex as it appears in the
file. If you want to specify a default location for all LFN's that don't
match any regex expression, you can have this entry as the last entry in
your file.

::

   #4 all unmatched LFN's reside in the same input directory.

   .*     file:///Volumes/data/input/[0] site="local" regex="true"

.. _rc-directory:

Directory
---------

In this mode, Pegasus does a directory listing on an input directory to
create the LFN to PFN mappings. The directory listing is performed
recursively, resulting in deep LFN mappings. For example, if an input
directory $input is specified with the following structure

::

   $input
   $input/f.1
   $input/f.2
   $input/D1
   $input/D1/f.3

Pegasus will create the mappings the following LFN PFN mappings
internally

::

   f.1 file://$input/f.1  site="local"
   f.2 file://$input/f.2  site="local"
   D1/f.3 file://$input/D1/f.3 site="local"

Users can optionally specify additional properties to configure the
behavior of this implementation.

1. **pegasus.catalog.replica.directory** to specify the path to the
   directory where the files exist.

2. **pegasus.catalog.replica.directory.site** to specify a site
   attribute other than local to associate with the mappings.

3. **pegasus.catalog.replica.directory.flat.lfn** to specify whether you
   want deep LFN's to be constructed or not. If not specified, value
   defaults to false i.e. deep lfn's are constructed for the mappings.

4. **pegasus.catalog.replica.directory.url.prefix** to associate a URL
   prefix for the PFN's constructed. If not specified, the URL defaults
   to file://

..

   **Tip**

   pegasus-plan has -**-input-dir** option that can be used to specify
   an input directory on the command line. This allows you to specify a
   separate replica catalog to catalog the locations of output files.

.. _rc-JDBCRC:

JDBCRC
------

In this mode, Pegasus queries a SQL based replica catalog that is
accessed via JDBC. To create the schema for JDBCRC use the
`pegasus-db-admin <#cli-pegasus-db-admin>`__ command line tool.

   **Note**

   A site attribute was added to the SQL schema as a unique key for 4.4.
   To update an existing database schema, use pegasus-db-admin tool.

   .. figure:: images/jdbcrc-schema.png
      :alt: Schema Image of the JDBCRC.
      :width: 4in

      Schema Image of the JDBCRC.

To use JDBCRC, the user additionally needs to set the following
properties

1. **pegasus.catalog.replica JDBCRC**

2. **pegasus.catalog.replica.db.driver mysql \| postgres \|sqlite**

3. **pegasus.catalog.replica.db.url=<jdbc url to the database> e.g
   jdbc:mysql://database-host.isi.edu/database-name \|
   jdbc:sqlite:/shared/jdbcrc.db**

4. **pegasus.catalog.replica.db.user=<database user>**

5. **pegasus.catalog.replica.db.password=<database password>**

Users can use the command line client *pegasus-rc-client* to interface
to query, insert and remove entries from the JDBCRC backend. Starting
4.5 release, there is also support for sqlite databases. Specify the
jdbc url to refer to a sqlite database.

.. _rc-MRC:

MRC
---

In this mode, Pegasus queries multiple replica catalogs to discover the
file locations on the grid.

To use it set

1. **pegasus.catalog.replica=MRC**

Each associated replica catalog can be configured via properties as
follows.

The user associates a variable name referred to as [value] for each of
the catalogs, where [value] is any legal identifier (concretely
[A-Za-z][_A-Za-z0-9]*) For each associated replica catalogs the user
specifies the following properties

-  **pegasus.catalog.replica.mrc.[value]**- specifies the type of
   replica catalog.

-  **pegasus.catalog.replica.mrc.[value].key**- specifies a property
   name key for a particular catalog

For example, to query a File catalog and JDBCRC at the same time specify
the following:

-  **pegasus.catalog.replica=MRC**

-  **pegasus.catalog.replica.mrc.jdbcrc=JDBCRC**

-  **pegasus.catalog.replica.mrc.jdbcrc.url=<jdbc url >**

-  **pegasus.catalog.replica.mrc.file1=File**

-  **pegasus.catalog.replica.mrc.file1.url=<path to file based replica
   catalog>**

In the above example,\ **jdbcrc** and **file1** are any valid identifier
names and **url** is the property key that needed to be specified.

Another example is to use MRC with multiple input directories. Sample
properties for that configuration are listed below

-  **pegasus.catalog.replica=MRC**

-  **pegasus.catalog.replica.mrc.directory1=Directory**

-  **pegasus.catalog.replica.mrc.directory1.directory=/path/to/dir1**

-  **pegasus.catalog.replica.mrc.directory1.directory.site=obelix**

-  **pegasus.catalog.replica.mrc.directory2=Directory**

-  **pegasus.catalog.replica.mrc.directory2.directory=/path/to/dir2**

-  **pegasus.catalog.replica.mrc.directory2.directory.site=corbusier**

.. _pegasus-rc-client:

Replica Catalog Client pegasus-rc-client
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The client used to interact with the Replica Catalogs is
pegasus-rc-client. The implementation that the client talks to is
configured using Pegasus properties.

Lets assume we create a file f.a in your home directory as shown below.

::

   $ date > $HOME/f.a

We now need to register this file in the **File** replica catalog
located in **$HOME/rc** using the pegasus-rc-client. Replace the
**gsiftp://url** with the appropriate parameters for your grid site.

::

   $ pegasus-rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc insert \
    f.a gsiftp://somehost:port/path/to/file/f.a site=local

You may first want to verify that the file registeration is in the
replica catalog. Since we are using a File catalog we can look at the
file **$HOME/rc** to view entries.

::

   $ cat $HOME/rc

   # file-based replica catalog: 2010-11-10T17:52:53.405-07:00
   f.a gsiftp://somehost:port/path/to/file/f.a site=local

The above line shows that entry for file **f.a** was made correctly.

You can also use the **pegasus-rc-client** to look for entries.

::

   $ pegasus-rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc lookup LFN f.a

   f.a gsiftp://somehost:port/path/to/file/f.a site=local

.. _site:

Resource Discovery (Site Catalog)
=================================

The Site Catalog describes the compute resources (which are often
clusters) that we intend to run the workflow upon. A site is a
homogeneous part of a cluster that has at least a single GRAM gatekeeper
with a **jobmanager-fork** and\ *jobmanager-<scheduler>* interface and
at least one **gridftp** server along with a shared file system. The
GRAM gatekeeper can be either WS GRAM or Pre-WS GRAM. A site can also be
a condor pool or glidein pool with a shared file system.

The Site Catalog can be described as an XML . Pegasus currently supports
two schemas for the Site Catalog:

1. **XML4**\ (Default) Corresponds to the schema described
   `here <schemas/sc-4.0/sc-4.0.html>`__.

2. **XML3**\ (Deprecated) Corresponds to the schema described
   `here <schemas/sc-3.0/sc-3.0.html>`__

.. _sc-XML4:

XML4
----

This is the default format for Pegasus 4.2. This format allows defining
filesystem of shared as well as local type on the head node of the
remote cluster as well as on the backend nodes

.. figure:: images/sc-4.0_p2.png
   :alt: Schema Image of the Site Catalog XML4

   Schema Image of the Site Catalog XML4

Below is an example of the XML4 site catalog

::

   <?xml version="1.0" encoding="UTF-8"?>
   <sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog http://pegasus.isi.edu/schema/sc-4.0.xsd"
                version="4.0">

       <site  handle="local" arch="x86_64" os="LINUX">
           <directory type="shared-scratch" path="/tmp/workflows/scratch">
               <file-server operation="all" url="file:///tmp/workflows/scratch"/>
           </directory>
           <directory type="local-storage" path="/tmp/workflows/outputs">
               <file-server operation="all" url="file:///tmp/workflows/outputs"/>
           </directory>
       </site>

       <site  handle="condor_pool" arch="x86_64" os="LINUX">
           <grid type="gt5" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="auxillary"/>
           <grid type="gt5" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="compute"/>
           <directory type="shared-scratch" path="/lustre">
               <file-server operation="all" url="gsiftp://smarty.isi.edu/lustre"/>
           </directory>
           <replica-catalog type="LRC" url="rlsn://smarty.isi.edu"/>
       </site>

       <site  handle="staging_site" arch="x86_64" os="LINUX">
           <directory type="shared-scratch" path="/data">
               <file-server operation="put" url="scp://obelix.isi.edu/data"/>
               <file-server operation="get" url="http://obelix.isi.edu/data"/>
           </directory>
       </site>

   </sitecatalog>


Described below are some of the entries in the site catalog.

1. **site** - A site identifier.

2. **Directory** - Info about filesystems Pegasus can use for storing
   temporary and long-term files. There are several configurations:

   -  **shared-scratch** - This describes the scratch file systems.
      Pegasus will use this to store intermediate data between jobs and
      other temporary files.

   -  **local-storage** - This describes the storage file systems (long
      term). This is the directory Pegasus will stage output files to.

   -  **local-scratch** - This describes the scratch file systems
      available locally on a compute node. This parameter is not
      commonly used and can be left unset in most cases.

   For each of the directories, you can specify access methods. Allowed
   methods are **put**, **get**, and **all** which means both put and
   get. For each mehod, specify a URL including the protocol. For
   example, if you want share data via http using the /var/www/staging
   directory, you can use scp://hostname/var/www for the put element and
   http://hostname/staging for the get element.

3. **arch,os,osrelease,osversion, glibc** - The
   arch/os/osrelease/osversion/glibc of the site. OSRELEASE, OSVERSION
   and GLIBC are optional

   ARCH can have one of the following values X86, X86_64, SPARCV7,
   SPARCV9, AIX, PPC.

   OS can have one of the following values LINUX,SUNOS,MACOSX. The
   default value for sysinfo if none specified is X86::LINUX

4. **replica-catalog** - URL for a local replica catalog (LRC) to
   register your files in. Only used for RLS implementation of the RC.
   This is optional and support for RLS has been dropped in Pegasus
   4.5.0 release.

5. **Profiles** - One or many profiles can be attached to a site.

   One example is the environments to be set on a remote site.

To use this site catalog the follow properties need to be set:

1. **pegasus.catalog.site.file=<path to the site catalog file>**

.. _sc-XML3:

XML3
----

   **Warning**

   This format is now deprecated in favor of the XML4 format. If you are
   still using the File format you should convert it to XML4 format
   using the client pegasus-sc-converter

This is the default format for Pegasus 3.0. This format allows defining
filesystem of shared as well as local type on the head node of the
remote cluster as well as on the backend nodes

.. figure:: images/sc-3.0_p2.png
   :alt: Schema Image of the Site Catalog XML 3

   Schema Image of the Site Catalog XML 3

Below is an example of the XML3 site catalog

::

   <sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog
   http://pegasus.isi.edu/schema/sc-3.0.xsd" version="3.0">
     <site  handle="isi" arch="x86" os="LINUX" osrelease="" osversion="" glibc="">
         <grid  type="gt2" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="auxillary"/>
         <grid  type="gt2" contact="smarty.isi.edu/jobmanager-pbs" scheduler="PBS" jobtype="compute"/>
             <head-fs>
                  <scratch>
                     <shared>
                        <file-server protocol="gsiftp" url="gsiftp://skynet-data.isi.edu"
                                     mount-point="/nfs/scratch01" />
                        <internal-mount-point mount-point="/nfs/scratch01"/>
                     </shared>
                  </scratch>
                  <storage>
                     <shared>
                        <file-server protocol="gsiftp" url="gsiftp://skynet-data.isi.edu"
                                     mount-point="/exports/storage01"/>
                        <internal-mount-point mount-point="/exports/storage01"/>
                     </shared>
                  </storage>
             </head-fs>
         <replica-catalog  type="LRC" url="rlsn://smarty.isi.edu"/>
         <profile namespace="env" key="PEGASUS_HOME" >/nfs/vdt/pegasus</profile>
         <profile namespace="env" key="GLOBUS_LOCATION" >/vdt/globus</profile>
     </site>
   </sitecatalog>

Described below are some of the entries in the site catalog.

1. **site** - A site identifier.

2. **replica-catalog** - URL for a local replica catalog (LRC) to
   register your files in. Only used for RLS implementation of the RC.
   This is optional and support for RLS has been dropped in Pegasus
   4.5.0.

3. **File Systems** - Info about filesystems mounted on the remote
   clusters head node or worker nodes. It has several configurations

   -  **head-fs/scratch** - This describe the scratch file systems
      (temporary for execution) available on the head node

   -  **head-fs/storage** - This describes the storage file systems
      (long term) available on the head node

   -  **worker-fs/scratch** - This describe the scratch file systems
      (temporary for execution) available on the worker node

   -  **worker-fs/storage** - This describes the storage file systems
      (long term) available on the worker node

   Each scratch and storage entry can contain two sub entries,

   -  SHARED for shared file systems like NFS, LUSTRE etc.

   -  LOCAL for local file systems (local to the node/machine)

   Each of the filesystems are defined by used a file-server element.
   Protocol defines the protocol uses to access the files, URL defines
   the url prefix to obtain the files from and mount-point is the mount
   point exposed by the file server.

   Along with this an internal-mount-point needs to defined to access
   the files directly from the machine without any file servers.

4. **arch,os,osrelease,osversion, glibc** - The
   arch/os/osrelease/osversion/glibc of the site. OSRELEASE, OSVERSION
   and GLIBC are optional

   ARCH can have one of the following values X86, X86_64, SPARCV7,
   SPARCV9, AIX, PPC.

   OS can have one of the following values LINUX,SUNOS,MACOSX. The
   default value for sysinfo if none specified is X86::LINUX

5. **Profiles** - One or many profiles can be attached to a pool.

   One example is the environments to be set on a remote pool.

To use this site catalog the follow properties need to be set:

1. **pegasus.catalog.site.file=<path to the site catalog file>**

Site Catalog Converter pegasus-sc-converter
-------------------------------------------

Pegasus 4.2 by default now parses Site Catalog format conforming to the
SC schema 4.0 (XML4) available `here <schemas/sc-4.0/sc-4.0.xsd>`__ and
is explained in detail in the Catalog Properties section of `Running
Workflows <#running_workflows>`__.

Pegasus 4.2 comes with a pegasus-sc-converter that will convert users
old site catalog (XML3) to the XML4 format. Sample usage is given below.

::

   $ pegasus-sc-converter -i sample.sites.xml -I XML3 -o sample.sites.xml4 -O XML4

   2010.11.22 12:55:14.169 PST:   Written out the converted file to sample.sites.xml4

To use the converted site catalog, in the properties do the following:

1. unset pegasus.catalog.site or set pegasus.catalog.site to XML

2. point pegasus.catalog.site.file to the converted site catalog

.. _transformation:

Executable Discovery (Transformation Catalog)
=============================================

The Transformation Catalog maps logical transformations to physical
executables on the system. It also provides additional information about
the transformation as to what system they are compiled for, what
profiles or environment variables need to be set when the transformation
is invoked etc.

Pegasus currently supports a Text formatted Transformation Catalog

1. **Text:**\ A multi line text based Transformation Catalog (DEFAULT)

In this guide we will look at the format of the Multiline Text based TC.

.. _tc-Text:

MultiLine Text based TC (Text)
------------------------------

The multile line text based TC is the new default TC in Pegasus. This
format allows you to define the transformations

The file is read and cached in memory. Any modifications, as adding or
deleting, causes an update of the memory and hence to the file
underneath. All queries are done against the memory representation. The
file sample.tc.text in the etc directory contains an example

::

   tr example::keg:1.0 {

   #specify profiles that apply for all the sites for the transformation
   #in each site entry the profile can be overriden

     profile env "APP_HOME" "/tmp/myscratch"
     profile env "JAVA_HOME" "/opt/java/1.6"

     site isi {
       profile env "HELLo" "WORLD"
       profile condor "FOO" "bar"
       profile env "JAVA_HOME" "/bin/java.1.6"
       pfn "/path/to/keg"
       arch "x86"
       os "linux"
       osrelease "fc"
       osversion "4"
       type "INSTALLED"
     }

     site wind {
       profile env "CPATH" "/usr/cpath"
       profile condor "universe" "condor"
       pfn "file:///path/to/keg"
       arch "x86"
       os "linux"
       osrelease "fc"
       osversion "4"
       type "STAGEABLE"
     }
   }

The entries in this catalog have the following meaning

1. **tr** tr - A transformation identifier. (Normally a
   Namespace::Name:Version.. The Namespace and Version are optional.)

2. **pfn** - URL or file path for the location of the executable. The
   pfn is a file path if the transformation is of type INSTALLED and
   generally a url (file:/// or http:// or gridftp://) if of type
   STAGEABLE

3. **site** - The site identifier for the site where the transformation
   is available

4. **type** - The type of transformation. Whether it is installed
   ("INSTALLED") on the remote site or is availabe to stage
   ("STAGEABLE").

5. **arch, os, osrelease, osversion** - The arch/os/osrelease/osversion
   of the transformation. osrelease and osversion are optional.

   ARCH can have one of the following values x86, x86_64, sparcv7,
   sparcv9, ppc, aix. The default value for arch is x86

   OS can have one of the following values linux,sunos,macosx. The
   default value for OS if none specified is linux

6. **Profiles** - One or many profiles can be attached to a
   transformation for all sites or to a transformation on a particular
   site.

To use this format of the Transformation Catalog you need to set the
following properties

1. **pegasus.catalog.transformation=Text**

2. **pegasus.catalog.transformation.file=<path to the transformation
   catalog file>**

.. _tc-container:

Containerized Applications in the Transformation Catalog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Users can specify what container they want to use for running their
application in the Transformation Catalog using the multi line text
based format described in this section. Users can specify an optional
attribute named container that refers to the container to be used for
the application.

::

   tr example::keg:1.0 {

     #specify profiles that apply for all the sites for the transformation
     #in each site entry the profile can be overriden

     profile env "APP_HOME" "/tmp/myscratch"
     profile env "JAVA_HOME" "/opt/java/1.6"

     site isi {
       # environment to be set when the job is run in the container
       # overrides env profiles specified in the container
       profile env "HELLo" "WORLD"
       profile env "JAVA_HOME" "/bin/java.1.6"

       profile condor "FOO" "bar"

       pfn "/path/to/keg
       arch "x86"
       os "linux"
       osrelease "fc"
       osversion "4"

       # INSTALLED means pfn refers to path in the container.
       # STAGEABLE means the executable can be staged into the container
       type "INSTALLED"

       #optional attribute to specify the container to use
       container "centos-pegasus"
     }
   }

   cont centos-pegasus{
        # can be either docker or singularity or shifter
        type "docker"

        # URL to image in a docker|singularity hub|shitfer repo url OR
        # URL to an existing docker image exported as a tar file or singularity image
        image "docker:///rynge/montage:latest"

        # optional site attribute to tell pegasus which site tar file
        # exists. useful for handling file URL's correctly
        image_site "optional site"

        # mount information to mount host directories into container
        # format src-dir:dest-dir[:options]
        mount "/Volumes/Work/lfs1:/shared-data/:ro"

        # environment to be set when the job is run in the container
        # only env profiles are supported
        profile env "JAVA_HOME" "/opt/java/1.6"
   }

The container itself is defined using the cont entry. Multiple
transformations can refer to the same container.

1. **cont** cont - A container identifier.

2. **image** - URL to image in a docker|singularity hub\| singularity
   library \| shifter repo URL or URL to an existing docker image
   exported as a tar file or singularity image. An example docker hub
   URL is docker:///rynge/montage:latest. An example Singularity hub URL
   is shub://singularity-hub.org/pegasus-isi/fedora-montage. Singularity
   library URLs are prefixed with "library" rather than "shub". Shifter
   images can only be referred to by shifter URL scheme that indicates
   that the image is available in the local shifter repository on the
   compute site. For example shifter:///papajim/namd_image:latest .

3. **image_site** - The site identifier for the site where the container
   is available

4. mount - mount information to mount host directories into container of
   format src-dir:dest-dir[:options] . Consult Docker and Singularity
   documentation for options supported for -v and -B options
   respectively.

5. **Profiles** - One or many profiles can be attached to a
   transformation for all sites or to a transformation on a particular
   site. For containers, only env profiles are supported.

..

   **Note**

   Containerized Applications can only be specified in the
   transformation catalog, not via the DAX API.

.. _pegasus-tc-client:

TC Client pegasus-tc-client
---------------------------

We need to map our declared transformations (preprocess, findrange, and
analyze) from the example DAX above to a simple "mock application" name
"keg" ("canonical example for the grid") which reads input files
designated by arguments, writes them back onto output files, and
produces on STDOUT a summary of where and when it was run. Keg ships
with Pegasus in the bin directory. Run keg on the command line to see
how it works.

::

   $ keg -o /dev/fd/1

   Timestamp Today: 20040624T054607-05:00 (1088073967.418;0.022)
   Applicationname: keg @ 10.10.0.11 (VPN)
   Current Workdir: /home/unique-name
   Systemenvironm.: i686-Linux 2.4.18-3
   Processor Info.: 1 x Pentium III (Coppermine) @ 797.425
   Output Filename: /dev/fd/1

Now we need to map all 3 transformations onto the "keg" executable. We
place these mappings in our File transformation catalog for site clus1.

   **Note**

   In earlier version of Pegasus users had to define entries for Pegasus
   executables such as transfer, replica client, dirmanager, etc on each
   site as well as site "local". This is no longer required. Pegasus
   versions 2.0 and later automatically pick up the paths for these
   binaries from the environment profile PEGASUS_HOME set in the site
   catalog for each site.

   A single entry needs to be on one line. The above example is just
   formatted for convenience.

Alternatively you can also use the pegasus-tc-client to add entries to
any implementation of the transformation catalog. The following example
shows the addiition the last entry in the File based transformation
catalog.

::

   $ pegasus-tc-client -Dpegasus.catalog.transformation=Text \
   -Dpegasus.catalog.transformation.file=$HOME/tc -a -r clus1 -l black::analyze:1.0 \
   -p gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg  -t STAGEABLE -s INTEL32::LINUX \
   -e ENV::KEY3="VALUE3"

   2007.07.11 16:12:03.712 PDT: [INFO] Added tc entry sucessfully

To verify if the entry was correctly added to the transformation catalog
you can use the pegasus-tc-client to query.

::

   $ pegasus-tc-client -Dpegasus.catalog.transformation=File \
   -Dpegasus.catalog.transformation.file=$HOME/tc -q -P -l black::analyze:1.0

   #RESID     LTX          PFN                  TYPE              SYSINFO

   clus1    black::analyze:1.0    gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg
                   STAGEABLE    INTEL32::LINUX

..

   **Note**

   pegasus-tc-client is no longer actively developed and is deprecated.

TC Converter Client pegasus-tc-converter
----------------------------------------

Pegasus 3.0 by default now parses a file based multi line textual format
of a Transformation Catalog. The new Text format is explained in detail
in the chapter on Catalogs.

Pegasus 3.0 comes with a pegasus-tc-converter that will convert users
old transformation catalog ( File ) to the Text format. Sample usage is
given below.

::

   $ pegasus-tc-converter -i sample.tc.data -I File -o sample.tc.text -O Text

   2010.11.22 12:53:16.661 PST:   Successfully converted Transformation Catalog from File to Text
   2010.11.22 12:53:16.666 PST:   The output transfomation catalog is in file  sample.tc.text

To use the converted transformation catalog, in the properties do the
following:

1. unset pegasus.catalog.transformation or set
   pegasus.catalog.transformation to Text

2. point pegasus.catalog.transformation.file to the converted
   transformation catalog

.. _variable-expansion:

Variable Expansion
==================

Pegasus Planner supports notion of variable expansions in the DAX and
the catalog files along the same lines as bash variable expansion works.
This is often useful, when you want paths in your catalogs or profile
values in the DAX to be picked up from the environment. An error is
thrown if a variable cannot be expanded.

To specify a variable that needs to be expanded, the syntax is
${VARIABLE_NAME} , similar to BASH variable expansion. An important
thing to note is that the variable names need to be enclosed in curly
braces. For example

::

    ${FOO}  - will be expanded by Pegasus
    $FOO    - will NOT be expanded by Pegasus.

Also variable names are case sensitive.

Some examples of variable expansion are illustrated below:

-  **DAX**

   A job in the DAX file needs to have a globus profile key project
   associated and the value has to be picked up (per user) from user
   environment.

   ::

      <profile namespace="globus" key="project">${PROJECT}</profile>

-  **Site Catalog**

   In the site catalog, the site catalog entries are templated, where
   paths are resolved on the basis of values of environment variables.
   For example, below is a templated entry for a local site where $PWD
   is the working directory from where pegasus-plan is invoked.

   ::

      <site  handle="local" arch="x86_64" os="LINUX" osrelease="" osversion="" glibc="">
              <directory  path="${PWD}/LOCAL/shared-scratch" type="shared-scratch" free-size="" total-size="">
                      <file-server  operation="all" url="file:///${PWD}/LOCAL/shared-scratch">
                      </file-server>
              </directory>
              <directory  path="${PWD}/LOCAL/shared-storage" type="shared-storage" free-size="" total-size="">
                      <file-server  operation="all" url="file:///${PWD}/LOCAL/shared-storage">
                      </file-server>
              </directory>
              <profile namespace="env" key="PEGASUS_HOME">/usr</profile>
              <profile namespace="pegasus" key="clusters.num" >1</profile>
      </site>

-  **Replica Catalog**

   The input file locations in the Replica Catalog can be resolved based
   on values of environment variables.

   ::

      # File Based Replica Catalog
      production_200.conf file://$PWD/production_200.conf site="local"

   ..

      **Note**

      Variable expansion is only supported for File based Replica
      Catalog, not Regex or other file based formats.

-  **Transformation Catalog**

   Similarly paths in the transformation catalog or profile values can
   be picked up from the environment i.e environment variables OS , ARCH
   and PROJECT are defined in user environment when launching
   pegasus-plan.

   ::

      # Snippet from a Text Based Transformation Catalog
      tr pegasus::keg{
          site obelix {
              profile globus "project" "${PROJECT}"
              pfn "/usr/bin/pegasus-keg"
              arch "${ARCH}"
              os "${OS}"
              type "INSTALLED"
          }
      }
