<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="catalogs">
  <title>Catalogs</title>

  <section>
    <title>Replica</title>

    <para>The Replica Catalog keeps mappings of logical file ids/names (LFN's)
    to physical file ids/names (PFN's). A single LFN can map to several PFN's.
    A PFN consists of a URL with protocol, host and port information and a
    path to a file. Along with the PFN one can also store additional key/value
    attributes to be associated with a PFN.</para>

    <para>Pegasus supports 3 different implemenations of the Replica
    Catalog.</para>

    <orderedlist>
      <listitem>
        <para>File</para>
      </listitem>

      <listitem>
        <para>Database via JDBC</para>
      </listitem>

      <listitem>
        <para>Replica Location Service</para>

        <itemizedlist>
          <listitem>
            <para>RLS</para>
          </listitem>

          <listitem>
            <para>LRC</para>
          </listitem>
        </itemizedlist>
      </listitem>

      <listitem>
        <para>MRC</para>
      </listitem>
    </orderedlist>

    <section>
      <title>File</title>

      <para>In this mode, Pegasus queries a file based replica catalog. The
      file format is a simple multicolumn format. It is neither
      transactionally safe, nor advised to use for production purposes in any
      way. Multiple concurrent instances will clobber each other. The site
      attribute should be specified whenever possible. The attribute key for
      the site attribute is <emphasis role="bold">"pool".</emphasis></para>

      <programlisting>
LFN PFN
LFN PFN a=b [..]
LFN PFN a="b" [..]
"LFN w/LWS" "PFN w/LWS" [..]
      </programlisting>

      <para>The LFN may or may not be quoted. If it contains linear
      whitespace, quotes, backslash or an equality sign, it must be quoted and
      escaped. Ditto for the PFN. The attribute key-value pairs are separated
      by an equality sign without any whitespaces. The value may be in quoted.
      The LFN sentiments about quoting apply.</para>

      <para>The file mode is the Default mode. In order to use the File mode
      you have to set the following properties</para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica=File</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.file=<replaceable>&lt;path to
            the replica catalog file&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>
    </section>

    <section>
      <title>JDBCRC</title>

      <para>In this mode, Pegasus queries a SQL based replica catalog that is
      accessed via JDBC. The sql schema’s for this catalog can be found at
      <emphasis role="bold">$PEGASUS_HOME/sql</emphasis> directory. You will
      have to install the schema into either PostgreSQL or MySQL by running
      the appropriate commands to load the two scheams <emphasis
      role="bold">create-XX-init.sql</emphasis> and <emphasis
      role="bold">create-XX-rc.sql</emphasis> where XX is either <emphasis
      role="bold">my</emphasis> (for MySQL) or <emphasis
      role="bold">pg</emphasis> (for PostgreSQL)</para>

      <para>To use JDBCRC, the user additionally needs to set the following
      properties</para>

      <orderedlist>
        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.url=<replaceable>&lt;jdbc url
          to the databse&gt;</replaceable></emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.user=<replaceable>&lt;database
          user&gt;</replaceable></emphasis></para>
        </listitem>

        <listitem>
          <para><emphasis
          role="bold">pegasus.catalog.replica.db.password=<replaceable>&lt;database
          password&gt;</replaceable></emphasis></para>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Replica Location Service</title>

      <para>RLS (Replica Location Service) is a distributed replica catalog,
      which ships with Globus. There is an index service called Replica
      Location Index (RLI) to which 1 or more Local Replica Catalog (LRC)
      report. Each LRC can contain all or a subset of mappings.</para>

      <para>Details about RLS can be found at <ulink
      url="http://www.globus.org/toolkit/data/rls/">http://www.globus.org/toolkit/data/rls/</ulink></para>

      <section>
        <title>RLS</title>

        <para>In this mode, Pegasus queries the central RLI to discover in
        which LRC’s the mappings for a LFN reside. It then queries the
        individual LRC’s for the PFN’s. To use this mode the following
        properties need to be set</para>

        <para><orderedlist>
            <listitem>
              <para><emphasis
              role="bold">pegasus.catalog.replica=RLS</emphasis></para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">pegasus.catalog.replica.url=<replaceable>&lt;url to
              the globus LRC&gt;</replaceable></emphasis></para>
            </listitem>
          </orderedlist></para>
      </section>

      <section>
        <title>LRC</title>

        <para>This mode is availabe If the user does not want to query the RLI
        (Replica Location Index), but directly a single Local Replica Catalog.
        To use the LRC mode the follow properties need to be set</para>

        <para><orderedlist>
            <listitem>
              <para><emphasis
              role="bold">pegasus.catalog.replica=<replaceable>LRC</replaceable></emphasis></para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold">pegasus.catalog.replica.url=<replaceable>&lt;url to
              the globus LRC&gt;</replaceable></emphasis></para>
            </listitem>
          </orderedlist></para>

        <para>Details about Globus Replica Catalog and LRC can be found at
        <ulink
        url="http://www.globus.org/toolkit/data/rls/">http://www.globus.org/toolkit/data/rls/</ulink></para>
      </section>
    </section>

    <section>
      <title>MRC</title>

      <para>In this mode, Pegasus queries multiple replica catalogs to
      discover the file locations on the grid. </para>

      <para>To use it set </para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica=<replaceable>MRC</replaceable></emphasis></para>
          </listitem>
        </orderedlist></para>

      <para>Each associated replica catalog can be configured via properties
      as follows. </para>

      <para>The user associates a variable name referred to as [value] for
      each of the catalogs, where [value] is any legal identifier (concretely
      [A-Za-z][_A-Za-z0-9]*) For each associated replica catalogs the user
      specifies the following properties</para>

      <para>pegasus.catalog.replica.mrc.[value] specifies the type of replica
      catalog. </para>

      <para>pegasus.catalog.replica.mrc.[value].key specifies a property name
      key for a particular catalog </para>

      <para>For example, if a user wants to query two lrc’s at the same time
      he/she can specify as follows </para>

      <para><orderedlist>
          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.mrc.lrc1=LRC</emphasis></para>
          </listitem>

          <listitem>
            <para><emphasis
            role="bold">pegasus.catalog.replica.url=<replaceable>&lt;url to
            the globus LRC&gt;</replaceable></emphasis></para>
          </listitem>
        </orderedlist>pegasus.catalog.replica.mrc.lrc1 LRC
      pegasus.catalog.replica.mrc.lrc2.url rls://sukhna
      pegasus.catalog.replica.mrc.lrc2 LRC
      pegasus.catalog.replica.mrc.lrc2.url rls://smarty In the above example,
      lrc1, lrc2 are any valid identifier names and url is the property key
      that needed to be specified.</para>
    </section>

    <section>
      <title>Replica Catalog Client pegasus-rc-client</title>

      <para>The client used to interact with the Replica Catalogs is
      pegasus-rc-client. The implementation that the client talks to is
      configured using Pegasus properties.</para>

      <para>Lets assume we create a file f.a in your home directory as shown
      below.</para>

      <screen><command>$ date &gt; $HOME/f.a </command></screen>

      <para>We now need to register this file in the <emphasis
      role="bold">File</emphasis> replica catalog located in <emphasis
      role="bold">$HOME/rc</emphasis> using the pegasus-rc-client. Replace the
      gsiftp://url with the appropriate parameters for your grid site.</para>

      <screen><emphasis>$<command> rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc insert f.a</command> <replaceable>gsiftp://somehost:port/path/to/file/f.a pool=local</replaceable></emphasis></screen>

      <para>You may first want to check, if the file registeration made it
      into the replica catalog. Since we are using a File catalog we can just
      go look at the file $HOME/rc to see if there are any entries in
      there.</para>

      <programlisting>$ <emphasis>cat $HOME/rc</emphasis>
    
    # file-based replica catalog: 2010-11-10T17:52:53.405-07:00
    f.a gsiftp://somehost:port/path/to/file/f.a pool=local</programlisting>

      <para>The above line shows that entry for file f.a was made
      correctly.</para>

      <para>You can also use the rc-client to look for entries.</para>

      <programlisting>$ <emphasis>rc-client -Dpegasus.catalog.replica=File -Dpegasus.catalog.replica.file=$HOME/rc lookup LFN f.a
    </emphasis>
    f.a gsiftp://somehost:port/path/to/file/f.a pool=local</programlisting>
    </section>
  </section>

  <section>
    <title>Site</title>

    <para>The Site Catalog describes the compute resources (which are often
    clusters) that we intend to run the workflow upon. A site is a homogeneous
    part of a cluster that has at least a single GRAM gatekeeper with a
    jobmanager-fork and jobmanager-&lt;scheduler&gt; interface and at least
    one gridftp server along with a shared file system. The GRAM gatekeeper
    can be either WS GRAM or Pre-WS GRAM. A site can also be a condor pool or
    glidein pool with a shared file system.</para>

    <para>Pegasus currently supports two implementation of the Site
    Catalog</para>

    <orderedlist>
      <listitem>
        <para>XML</para>
      </listitem>

      <listitem>
        <para>File</para>
      </listitem>
    </orderedlist>

    <para>The format for the File is as follows</para>

    <programlisting>site site_id {
  #required. Can be a dummy value if using Simple File RC
  lrc "rls://someurl"

  #required on a shared file system
  workdir "path/to/a/tmp/shared/file/sytem/"

  #required one or more entries
  gridftp "gsiftp://hostname/mountpoint” "GLOBUS VERSION"

  #required one or more entries
  universe transfer "hostname/jobmanager-&lt;scheduler&gt;" "GLOBUS VERSION"

  #reqired one or more entries
  universe vanilla "hostname/jobmanager-&lt;scheduler&gt;" "GLOBUS VERSION"

  #optional
  sysinfo  "ARCH::OS:OSVER:GLIBC"

  #optional
  gridlaunch "/path/to/gridlaunch/executable"

  #optional zero or more entries
  profile namespace "key" "value"
} </programlisting>

    <para>The gridlaunch and profile entries are optional. All the rest are
    required for each pool. Also the transfer and vanilla universe are
    mandatory. You can add multiple transfer and vanilla universe if you have
    more then one head node on the cluster. The entries in the Site Catalog
    have the following meaning:</para>

    <orderedlist>
      <listitem>
        <para>site - A site identifier.</para>
      </listitem>

      <listitem>
        <para>lrc - URL for a local replica catalog (LRC) to register your
        files in. Only used for RLS implementation of the RC</para>
      </listitem>

      <listitem>
        <para>workdir - A remote working directory (Should be on a shared file
        system)</para>
      </listitem>

      <listitem>
        <para>gridftp - A URL prefix for a remote storage location.</para>
      </listitem>

      <listitem>
        <para>universe - Different universes are supported which map to
        different batch jobmanagers.</para>

        <para>"vanilla" for compute jobs and "transfer" for transfer jobs are
        mandatory. Generally a transfer universe should map to the fork
        jobmanager.</para>
      </listitem>

      <listitem>
        <para>gridlaunch - Path to the remote kickstart tool (provenance
        tracking)</para>
      </listitem>

      <listitem>
        <para>sysinfo - The arch/os/osversion/glibc of the site. The format is
        ARCH::OS:OSVER:GLIBC where OSVERSION and GLIBC are optiona.</para>

        <para>ARCH can have one of the following values INTEL32, INTEL64,
        SPARCV7, SPARCV9, AIX, AMD64. OS can have one of the following values
        LINUX,SUNOS. The default value for sysinfo if none specified is
        INTEL32::LINUX</para>
      </listitem>

      <listitem>
        <para>Profiles - One or many profiles can be attached to a
        pool.</para>

        <para>One example is the environments to be set on a remote
        pool.</para>
      </listitem>
    </orderedlist>

    <para>Create a file called sites.txt and edit the contents. Replace
    ‘$HOME’ in the example below to your home directory.</para>

    <programlisting>$ emacs $HOME/sites.txt </programlisting>

    <para>Let’s say you have one cluster available to run your jobs called
    clus1. You need to add 2 sections in the pool.config.txt file, one for the
    cluster and one for the local machine. The local site entry is mandatory.
    Change all the entries below to reflect your local host and cluster
    setting including all environment variables</para>

    <programlisting>site local {
lrc "rlsn://localhost"
workdir "$HOME/workdir"
gridftp "gsiftp://localhost/$HOME/storage" "4.0.5"
universe transfer "localhost/jobmanager-fork" "4.0.5"
universe vanilla  "localhost/jobmanager-fork" "4.0.5"
gridlaunch "/nfs/vdt/pegasus/bin/kickstart"
sysinfo "INTEL32::LINUX"
profile env "PEGASUS_HOME" "/nfs/vdt/pegasus"
profile env "GLOBUS_LOCATION" "/vdt/globus"
profile env "LD_LIBRARY_PATH" "/vdt/globus/lib"
profile env "JAVA_HOME" /vdt/java
}

site clus1 {
lrc "rlsn://clus1.com"
workdir "$HOME/workdir-clus1"
gridftp "gsiftp://clus1.com/jobmanager-fork" "4.0.3"
universe transfer "clus1.com/jobmanager-fork" "4.0.3"
universe vanilla  "clus1.com/jobmanager-pbs" "4.0.3"
sysinfo "INTEL32::LINUX"
gridlaunch "/opt/nfs/vdt/pegasus/bin/kickstart"
profile env "PEGASUS_HOME" "/opt/nfs/vdt/pegasus"
profile env "GLOBUS_LOCATION" "/opt/vdt/globus"
profile env "LD_LIBRARY_PATH" "/opt/vdt/globus/lib"
} </programlisting>

    <para>This file can be used as is by Pegasus but we prefer the XML version
    of the Site Catalog because it allows for a richer description of the
    site. The tool to convert the text site catalog to XML is called
    sc-client</para>

    <programlisting>$ <emphasis>sc-client --files $HOME/sites.txt --output $HOME/sites.xml

</emphasis>
2007.07.10 19:04:34.799 PDT: [INFO] Reading $HOME/sites.txt
2007.07.10 19:04:34.844 PDT: [INFO] Reading $HOME/sites.txt (completed)
2007.07.10 19:04:34.851 PDT: [INFO] Written xml output to file : $HOME/sites.xml</programlisting>

    <para>Cat the sites.xml file and just take a look.</para>

    <programlisting>$ <emphasis>cat $HOME/sites.xml</emphasis>

&lt;sitecatalog xmlns="http://pegasus.isi.edu/schema/sitecatalog"
  xsi:schemaLocation="http://pegasus.isi.edu/schema/sitecatalog
  http://pegasus.isi.edu/schema/sc-2.0.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.0"&gt;
  &lt;site handle="local" gridlaunch="/nfs/vdt/pegasus/bin/kickstart"
   sysinfo="INTEL32::LINUX"&gt;
    &lt;profile namespace="env" key="PEGASUS_HOME" &gt;/nfs/vdt/pegasus&lt;/profile&gt;
    &lt;profile namespace="env" key="GLOBUS_LOCATION" &gt;/vdt/globus&lt;/profile&gt;
    &lt;profile namespace="env" key="LD_LIBRARY_PATH" &gt;/vdt/globus/lib&lt;/profile&gt;
    &lt;profile namespace="env" key="JAVA_HOME" &gt;/vdt/java&lt;/profile&gt;
    &lt;lrc url="rlsn://localhost" /&gt;
    &lt;gridftp  url="gsiftp://localhost" storage="/$HOME/storage" major="4" minor="0"
     patch="5"&gt;
    &lt;/gridftp&gt;
    &lt;jobmanager universe="transfer" url="localhost/jobmanager-fork" major="4" minor="0"
     patch="5" /&gt;
    &lt;jobmanager universe="vanilla" url="localhost/jobmanager-fork" major="4" minor="0"
     patch="5" /&gt;
    &lt;workdirectory &gt;$HOME/workdir&lt;/workdirectory&gt;
  &lt;/site&gt;
  &lt;site handle="clus1" gridlaunch="/opt/nfs/vdt/pegasus/bin/kickstart"
   sysinfo="INTEL32::LINUX"&gt;
    &lt;profile namespace="env" key="PEGASUS_HOME" &gt;/opt/nfs/vdt/pegasus&lt;/profile&gt;
    &lt;profile namespace="env" key="GLOBUS_LOCATION" &gt;/opt/vdt/globus&lt;/profile&gt;
    &lt;profile namespace="env" key="LD_LIBRARY_PATH" &gt;/opt/vdt/globus/lib&lt;/profile&gt;
    &lt;lrc url="rlsn://clus1.com" /&gt;
    &lt;gridftp  url="gsiftp://clus1.com" storage="/jobmanager-fork" major="4" minor="0"
     patch="3"&gt;
    &lt;/gridftp&gt;
    &lt;jobmanager universe="transfer" url="clus1.com/jobmanager-fork" major="4" minor="0"
     patch="3" /&gt;
    &lt;jobmanager universe="vanilla" url="clus1.com/jobmanager-pbs" major="4" minor="0"
     patch="3" /&gt;
    &lt;workdirectory &gt;$HOME/workdir-clus1&lt;/workdirectory&gt;
  &lt;/site&gt;
&lt;/sitecatalog&gt;</programlisting>

    <para>The site catalog can also be generated using the pegasus-get-sites
    command for the OSG grid using the ReSS site information feed.</para>
  </section>

  <section>
    <title>Transformation</title>

    <para>The Transformation Catalog maps logical transformations to physical
    executables on the system. It also provides additional information about
    the transformation as to what system they are compiled for, what profiles
    or environment variables need to be set when the transformation is invoked
    etc.</para>

    <para>Pegasus currently supports two implementations of the Transformation
    Catalog</para>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">Text: </emphasis>A multiline text based
        Transformation Catalog (DEFAULT)</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">File:</emphasis> A simple multi column
        text based Transformation Catalog</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Database:</emphasis> A database backend
        (MySQL or PostgreSQL) via JDB</para>
      </listitem>
    </orderedlist>

    <para>In this guide we will look at the format of the Multiline Text based
    TC.</para>

    <section>
      <title>MultiLine Text based TC (Text)</title>

      <para>The multile line text based TC is the new default TC in Pegasus.
      This format allows you to define the transformations</para>

      <para><programlisting>tr example::keg:1.0 { 

#specify profiles that apply for all the sites for the transformation 
#in each site entry the profile can be overriden 
profile env "APP_HOME" "/tmp/myscratch"
profile env "JAVA_HOME" "/opt/java/1.6"

site isi {
profile env "HELLo" "WORLD"
profile condor "FOO" "bar"
profile env "JAVA_HOME" "/bin/java.1.6"
pfn "/path/to/keg"
arch "x86"
os "linux"
osrelease "fc"
osversion "4"
type "INSTALLED"
}

site wind {
profile env "CPATH" "/usr/cpath"
profile condor "universe" "condor"
pfn "file:///path/to/keg"
arch "x86"
os "linux"
osrelease "fc"
osversion "4"
type "STAGEABLE"
}</programlisting></para>
    </section>

    <section>
      <title>Singleline Text based TC (File)</title>

      <warning>
        <para>This format is now deprecated in favor of the multiline TC. If
        you are still using the single line TC you should convert it to
        multiline using the tc-converter client.</para>
      </warning>

      <para>The format of the this TC is as follows.</para>

      <programlisting>#site  logicaltr   physicaltr   type  system  profiles(NS::KEY="VALUE")

site1 sys::date:1.0 /usr/bin/date  INSTALLED INTEL32::LINUX:FC4.2:3.6 ENV::PATH="/usr/bin";PEGASUS_HOME="/usr/local/pegasus"</programlisting>

      <para>The system and profile entries are optional and will use default
      values if not specified. The entries in the file format have the
      following meaning:</para>

      <orderedlist>
        <listitem>
          <para>site - A site identifier.</para>
        </listitem>

        <listitem>
          <para>logicaltr - The logical transformation name. The format is
          NAMESPACE::NAME:VERSION where NAMESPACE and NAME are
          optional.</para>
        </listitem>

        <listitem>
          <para>physicaltr - The physical transformation path or URL.</para>

          <para>If the transformation type is INSTALLED then it needs to be an
          absolute path to the executable. If the type is STATIC_BINARY then
          the path needs to be a HTTP, FTP or gsiftp URL</para>
        </listitem>

        <listitem>
          <para>type - The type of transformation. Can have on of two
          values</para>

          <itemizedlist>
            <listitem>
              <para>INSTALLED: This means that the transformation is installed
              on the remote site</para>
            </listitem>

            <listitem>
              <para>STATIC_BINARY: This means that the transformation is
              available as a static binary and can be staged to a remote
              site.</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>system - The system for which the transformation is
          compiled.</para>

          <para>The formation of the sytem is ARCH::OS:OSVERSION:GLIBC where
          the GLIBC and OS VERSION are optional. ARCH can have one of the
          following values INTEL32, INTEL64, SPARCV7, SPARCV9, AIX, AMD64. OS
          can have one of the following values LINUX,SUNOS. The default value
          for system if none specified is INTEL32::LINUX</para>
        </listitem>

        <listitem>
          <para>Profiles - The profiles associated with the transformation.
          For indepth information about profiles and their priorities read the
          Profile Guide.</para>

          <para>The format for profiles is NS::KEY="VALUE" where NS is the
          namespace of the profile e.g. Pegasus,condor,DAGMan,env,globus. The
          key and value can be any strings. Remember to quote the value with
          double quotes. If you need to specify several profiles you can do it
          in several ways</para>

          <itemizedlist>
            <listitem>
              <para>NS1::KEY1="VALUE1",KEY2="VALUE2";NS2::KEY3="VALUE3",KEY4="VALUE4"</para>

              <para>This is the most optimized form. Multiple key values for
              the same namespace are separated by a comma "," and different
              namespaces are separated by a semicolon ";"</para>
            </listitem>

            <listitem>
              <para>NS1::KEY1="VALUE1";NS1::KEY2="VALUE2";NS2::KEY3="VALUE3";NS2::KEY4="VALUE4"</para>

              <para>You can also just repeat the triple of NS::KEY="VALUE"
              separated by semicolons for a simple format;</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </orderedlist>
    </section>

    <section>
      <title>Datbase TC (Datbase)</title>

      <para></para>
    </section>

    <section>
      <title>TC Client</title>

      <para>We need to map our declared transformations (preprocess,
      findranage, and analyze) from the example DAX above to a simple "mock
      application" name "keg" ("canonical example for the grid") which reads
      input files designated by arguments, writes them back onto output files,
      and produces on STDOUT a summary of where and when it was run. Keg ships
      with Pegasus in the bin directory. Run keg on the command line to see
      how it works.</para>

      <programlisting>$<emphasis> keg -o /dev/fd/1</emphasis>

Timestamp Today: 20040624T054607-05:00 (1088073967.418;0.022)
Applicationname: keg @ 10.10.0.11 (VPN)
Current Workdir: /home/unique-name
Systemenvironm.: i686-Linux 2.4.18-3
Processor Info.: 1 x Pentium III (Coppermine) @ 797.425
Output Filename: /dev/fd/1</programlisting>

      <para>Now we need to map all 3 transformations onto the "keg"
      executable. We place these mappings in our File transformation catalog
      for site clus1. In earlier version of Pegasus one had to define entries
      for Pegasus executables like transfer, replica client, dirmanager etc on
      each site as well as site "local". This is no longer required. Pegasus
      2.0 and later automatically picks up the paths for these binaries from
      the environment profile PEGASUS_HOME set in the site catalog for each
      site.</para>

      <para>Create a file called tc.data and edit the contents</para>

      <programlisting><emphasis>$ vim $HOME/tc</emphasis>


# Site  LFN  PFN  TYPE  SYSTEM PROFILE

clus1 black::preprocess:1.0  gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg
                     STATIC_BINARY INTEL32::LINUX ENV::KEY1="VALUE1"
clus1 black::findrange:1.0  gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg
                     STATIC_BINARY INTEL32::LINUX ENV::KEY2="VALUE2"

</programlisting>

      <para>Note: A single entry needs to be on one line. The above example is
      just formatted for convenience.</para>

      <para>Alternatively you can also use the tc-client to add entries to any
      implementation of the transformation catalog. The following eg: shows us
      adding the last entry in the File based transformation catalog.</para>

      <programlisting>$ <emphasis>tc-client -Dpegasus.catalog.transformation=File \
-Dpegasus.catalog.transformation.file=$HOME/tc -a -r clus1 -l black::analyze:1.0 \
-p gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg  -t STATIC_BINARY -s INTEL32::LINUX \
-e ENV::KEY3="VALUE3"</emphasis>

2007.07.11 16:12:03.712 PDT: [INFO] Added tc entry sucessfully</programlisting>

      <para>To verify if the entry was correctly added to the transformation
      catalog you can use the tc-client to query.</para>

      <programlisting>$ <emphasis>tc-client -Dpegasus.catalog.transformation=File \
-Dpegasus.catalog.transformation.file=$HOME/tc -q -P -l black::analyze:1.0
</emphasis>
#RESID     LTX          PFN                  TYPE              SYSINFO

clus1    black::analyze:1.0    gsiftp://clus1.com/opt/nfs/vdt/pegasus/bin/keg
                STATIC_BINARY    INTEL32::LINUX</programlisting>

      <para></para>
    </section>
  </section>
</chapter>
