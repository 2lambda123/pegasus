<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Profiles in the Pegasus Workflow Mapper</title>

  <section>
    <title>Introduction</title>

    <para>The Pegasus Workflow Mapper uses the concept of profiles to
    encapsulate configurations for various aspects of dealing with the Grid
    infrastructure. Profiles provide an abstract yet uniform interface to
    specify configuration options for various layers from planner/mapper
    behavior to remote environment settings. At various stages during the
    mapping process, profiles may be added to the concretization of a
    job.</para>

    <para>This document describes various types of profiles, levels of
    priorities for intersecting profiles, and how to specify profiles in
    different contexts.</para>
  </section>

  <section>
    <title>Profile Structure</title>

    <para>All profiles are triples comprised of a namespace, a name or key,
    and a value. The namespace is a simple identifier. The key has only
    meaning within its namespace, and it’s yet another identifier. There are
    no constraints on the contents of a value</para>

    <para>Profiles may be represented with different syntaxes in different
    context. However, each syntax will describe the underlying triple.</para>
  </section>

  <section>
    <title>Profile Namespaces</title>

    <para>Each namespace refers to a different aspect of a job’s runtime
    settings. A profile’s representation in the concrete plan (e.g. the Condor
    submit files) depends its namespace. Pegasus supports the following
    namespaces for profiles:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis role="bold">env</emphasis> permits remote environment
        variables to be set.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">globus</emphasis> sets Globus RSL
        parameters.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">condor <emphasis>sets Condor configuration
        parameters for the submit file. </emphasis></emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">dagman <emphasis>introduces Condor DAGMan
        configuration parameters.</emphasis></emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">pegasus <emphasis>configures the behaviour
        of various planner/mapper components.</emphasis></emphasis></para>
      </listitem>
    </itemizedlist>

    <section>
      <title>The env Profile Namespace</title>

      <para>The <emphasis>env</emphasis> namespace allows users to specify
      environment variables of remote jobs. Globus transports the environment
      variables, and ensure that they are set before the job starts. </para>

      <para>The key used in conjunction with an <emphasis>env</emphasis>
      profile denotes the name of the environment variable. The value of the
      profile becomes the value of the remote environment variable.</para>

      <para>Grid jobs usually only set a minimum of environment variables by
      virtue of Globus. You cannot compare the environment variables visible
      from an interactive login with those visible to a grid job. Thus, it
      often becomes necessary to set environment variables like
      LD_LIBRARY_PATH for remote jobs. </para>

      <para>If you use any of the Pegasus worker package tools like transfer
      or the rc-client, it becomes necessary to set PEGASUS_HOME and
      GLOBUS_LOCATION even for jobs that run locally</para>

      <informaltable>
        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Environment
              Variable</emphasis></entry>

              <entry><emphasis role="bold">Description</emphasis></entry>
            </row>

            <row>
              <entry>PEGASUS_HOME</entry>

              <entry>Used by auxillary jobs created by Pegasus both on remote
              site and local site. Should be set usually set in the Site
              Catalog for the sites</entry>
            </row>

            <row>
              <entry>GLOBUS_LOCATION</entry>

              <entry>Used by auxillary jobs created by Pegasus both on remote
              site and local site. Should be set usually set in the Site
              Catalog for the sites</entry>
            </row>

            <row>
              <entry>LD_LIBRARY_PATH</entry>

              <entry>Point this to $GLOBUS_LOCATION/lib, except you cannot use
              the dollar variable. You must use the full path. Applies to
              both, local and remote jobs that use Globus components and
              should be usually set in the site catalog for the sites</entry>
            </row>

            <row>
              <entry>CLASSPATH</entry>

              <entry>Use with replica registration jobs on the local site. The
              CLASSPATH is now automatically set for the jobs by setting the
              value to the CLASSPATH set in the shell that was used to invoke
              pegasus-plan.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      <para><emphasis role="bold">Table 1: Useful Environment
      Settings</emphasis></para>

      <para>Even though Condor and Globus both permit environment variable
      settings through their profiles, all remote environment variables must
      be set through the means of <emphasis>env</emphasis> profiles. </para>
    </section>

    <section>
      <title>The globus Profile Namespace</title>

      <para>The <emphasis>globus</emphasis> profile namespace encapsulates
      Globus resource specification language (RSL) instructions. The RSL
      configures settings and behavior of the remote scheduling system. Some
      systems require queue name to schedule jobs, a project name for
      accounting purposes, or a run-time estimate to schedule jobs. The Globus
      RSL addresses all these issues.</para>

      <para>A key in the <emphasis>globus</emphasis> namespace denotes the
      command name of an RLS instruction. The profile value becomes the RSL
      value. Even though Globus RSL is typically shown using parentheses
      around the instruction, the out pair of parentheses is not necessary in
      globus profile specifications</para>

      <para>Table 2 shows some commonly used RSL instructions. For an
      authoritative list of all possible RSL instructions refer to the Globus
      RSL specification.</para>

      <table>
        <title>Table 2: Useful Globus RSL Instructions</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Key</emphasis></entry>

              <entry><emphasis role="bold">Description</emphasis></entry>
            </row>

            <row>
              <entry>count</entry>

              <entry>the number of times an executable is started.</entry>
            </row>

            <row>
              <entry>jobtype</entry>

              <entry>specifies how the job manager should start the remote
              job. While Pegasus defaults to single, use mpi when running MPI
              jobs.</entry>
            </row>

            <row>
              <entry>maxcputime</entry>

              <entry>the max cpu time for a single execution of a job.</entry>
            </row>

            <row>
              <entry>maxmemory</entry>

              <entry>the maximum memory in MB required for the job</entry>
            </row>

            <row>
              <entry>maxtime</entry>

              <entry>the maximum time or walltime for a single execution of a
              job.</entry>
            </row>

            <row>
              <entry>maxwalltime</entry>

              <entry>the maximum walltime for a single execution of a
              job.</entry>
            </row>

            <row>
              <entry>minmemory </entry>

              <entry>the minumum amount of memory required for this
              job</entry>
            </row>

            <row>
              <entry>project</entry>

              <entry>associates an account with a job at the remote
              end.</entry>
            </row>

            <row>
              <entry>queue</entry>

              <entry>the remote queue in which the job should be run. Used
              when remote scheduler is PBS that supports queues.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Pegasus prevents the user from specifying certain RSL instructions
      as globus profiles, because they are either automatically generated or
      can be overridden through some different means. For instance, if you
      need to specify remote environment settings, do not use the environment
      key in the globus profiles. Use one or more env profiles instead.</para>

      <table>
        <title>Table 3: RSL Instructions that are not permissible</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Key</emphasis></entry>

              <entry><emphasis role="bold">Reason for
              Prohibition</emphasis></entry>
            </row>

            <row>
              <entry>arguments</entry>

              <entry>you specify arguments in the arguments section for a job
              in the DAX</entry>
            </row>

            <row>
              <entry>directory</entry>

              <entry>the site catalog and properties determine which directory
              a job will run in.</entry>
            </row>

            <row>
              <entry>environment</entry>

              <entry>use multiple env profiles instead</entry>
            </row>

            <row>
              <entry>executable</entry>

              <entry>the physical executable to be used is specified in the
              transformation catalog and is also dependant on the gridstart
              module being used. If you are launching jobs via kickstart then
              the executable created is the path to kickstart and the
              application executable path appears in the arguments for
              kickstart</entry>
            </row>

            <row>
              <entry>stdin</entry>

              <entry>you specify in the DAX for the job </entry>
            </row>

            <row>
              <entry>stdout</entry>

              <entry>you specify in the DAX for the job</entry>
            </row>

            <row>
              <entry>stderr</entry>

              <entry>you specify in the DAX for the job</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>The condor Profile Namespace</title>

      <para>The Condor submit file controls every detail how and where a job
      is run. The <emphasis>condor</emphasis> profiles permit to add or
      overwrite instructions in the Condor submit file. </para>

      <para>The <emphasis>condor</emphasis> namespace directly sets commands
      in the Condor submit file for a job the profile applies to. Keys in the
      <emphasis>condor</emphasis> profile namespace denote the name of the
      Condor command. The profile value becomes the command's argument. All
      <emphasis>condor</emphasis> profiles are translated into key=value lines
      in the Condor submit file</para>

      <para>Some of the common condor commands that a user may need to specify
      are listed below. For an authoritative list refer to the online condor
      documentation. Note: Pegasus Workflow Planner/Mapper by default specify
      a lot of condor commands in the submit files depending upon the job, and
      where it is being run.</para>

      <table>
        <title>Table 4: Useful Condor Commands</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Key</emphasis></entry>

              <entry><emphasis role="bold">Description</emphasis></entry>
            </row>

            <row>
              <entry>universe</entry>

              <entry>Pegasus defaults to either globus or scheduler universes.
              Set to standard for compute jobs that require standard universe.
              Set to vanilla to run natively in a condor pool, or to run on
              resources grabbed via condor glidein. </entry>
            </row>

            <row>
              <entry>periodic_release</entry>

              <entry>is the number of times job is released back to the queue
              if it goes to HOLD, e.g. due to Globus errors. Pegasus defaults
              to 3. Use the pegasus.condor.release property to assign a
              different value</entry>
            </row>

            <row>
              <entry>periodic_remove</entry>

              <entry>is the number of times a job is allowed to get into HOLD
              state before being removed from the queue. Pegasus defaults to
              3. Use the pegasus.condor.remove property to assign a different
              value.</entry>
            </row>

            <row>
              <entry>filesystemdomain</entry>

              <entry>Useful for Condor glide-ins to pin a job to a remote
              site.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Pegasus prevents the user from specifying certain Condor commands
      in condor profiles, because they are automatically generated or can be
      overridden through some different means. Table 5 shows prohibited Condor
      commands.</para>

      <table>
        <title>Table 5: Condor commands prohibited in condor profiles</title>

        <tgroup cols="2">
          <tbody>
            <row>
              <entry><emphasis role="bold">Key</emphasis></entry>

              <entry><emphasis role="bold">Reason for
              Prohibition</emphasis></entry>
            </row>

            <row>
              <entry>arguments</entry>

              <entry>you specify arguments in the arguments section for a job
              in the DAX</entry>
            </row>

            <row>
              <entry>environment</entry>

              <entry>use multiple env profiles instead</entry>
            </row>

            <row>
              <entry>executable</entry>

              <entry>the physical executable to be used is specified in the
              transformation catalog and is also dependant on the gridstart
              module being used. If you are launching jobs via kickstart then
              the executable created is the path to kickstart and the
              application executable path appears in the arguments for
              kickstart</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>

    <section>
      <title>The dagman Profile Namespace</title>

      <para></para>
    </section>
  </section>
</chapter>