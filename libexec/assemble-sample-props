#!/usr/bin/env perl
#
# Parses and assembles the property documentation
# Usage: assemble-sample-props [sample.properties] output.pdf
#
use 5.006;
use strict;
use File::Spec;
use File::Temp qw(tempfile);
use File::Basename;

my ($infn,$outfn);
if ( @ARGV < 1 || @ARGV > 2 ) {
    die "Usage: assemble-sample-props [sample.properties] output.pdf\n";
} elsif ( @ARGV == 1 ) {
    $outfn = shift;
} elsif ( @ARGV == 2 ) {
    $infn = shift;
    $outfn = shift;
} else {
    die "this should not happen!";
}

die "Set your VDS_HOME environment variable\n" unless exists $ENV{'VDS_HOME'};
my $psp = File::Spec->catfile( $ENV{'VDS_HOME'}, 'libexec', 'parse-sample-props' );
die "$psp does not exist\n" unless -e $psp;
die "$psp is not readable\n" unless -r _;
die "$psp is not executable\n" unless -x _;

sub find_exec ($) {
    # purpose: determine location of a binary
    # returns: fully qualified path to binary, undef if not found
    use File::Spec;
    my $program = shift;
    local($_);
    foreach ( File::Spec->path ) {
        my $fs = File::Spec->catfile( $_, $program );
        return $fs if -x $fs;
    }
    undef;
}

sub pipe_out_cmd {
    # purpose: Runs a cmd w/o invoking a shell, and captures stdout+stderr
    # warning: DO NOT use shell meta characters in the argument string.
    # paramtr: @arg (IN): argument string, executable first
    # returns: failed: undef
    #          scalar: first line of output
    #          vector: all lines of output
    local(*READ);               # must use type glob and local for FDs
    
    my $pid = open( READ, '-|' );
    return undef unless defined $pid;
    
    my @result;
    if ( $pid ) {
        # parent
        while ( <READ> ) {
            chomp;
            warn "# << $_\n" if $main::debug;
            push( @result, $_ );
        }
        close READ;
    } else {
        # child
	close( STDIN );
        open( STDERR, '>&STDOUT');
        select(STDERR); $|=1;
        select(STDOUT); $|=1;
        exec { $_[0] } @_;      # lotsa magic :-)
        exit 127;               # no such exe :-(
    }

    wantarray ? @result : $result[0];
}

sub run_app {
    # purpose: processing applications, and report what happened
    # paramtr: arguments to calling application
    # returns: [0]: basename of application that was run
    #          [1]: raw status of the application exit
    my $base = basename($_[0]);
    my @line = pipe_out_cmd(@_);
    print STDERR '# ', join( "\n# ", @line[-2,-1] ), "\n";

    # done
    ( $base, $? );
}


my $pdflatex = find_exec('pdflatex') || die "unable to find pdflatex\n";
my $makeindex = find_exec('makeindex') || die "unable to find makeindex\n";

my ($fh,$fn) = tempfile( 'props-XXXXXX', 
			 SUFFIX => '.tex',
			 DIR => File::Spec->tmpdir() );
die "unable to create temporary file: $!\n" 
    unless defined $fh;

my $cwd = File::Spec->rel2abs( File::Spec->curdir() );
chdir File::Spec->tmpdir();
END {
    unlink $fn if defined $fn;
}

my $dirname = dirname($fn);
my $basename = basename( $fn, '.tex' );
my $base = File::Spec->catfile( $dirname, $basename );

my (@rc,@lines);
@lines = $infn ? pipe_out_cmd( $psp, $infn ) : pipe_out_cmd( $psp );
print $fh join( "\n", @lines );
push( @rc, [ basename($psp), $? ] );
seek( $fh, 0, 0 );

push( @rc, [ run_app( $pdflatex, $fn ) ] );
push( @rc, [ run_app( $pdflatex, $fn ) ] );
push( @rc, [ run_app( $makeindex, "$base.idx" ) ] );
push( @rc, [ run_app( $pdflatex, $fn ) ] );
push( @rc, [ run_app( $pdflatex, $fn ) ] );

print STDERR "\n";
my $flag; 
for ( my $i=0; $i<@rc; ++$i ) {
    $flag++ if $rc[$i][1] != 0;
    printf STDERR "# prog %d: exitcode=%-3d signal=%-2d %s\n", $i+1, 
	$rc[$i][1] >> 8, ($rc[$i][1] & 127), $rc[$i][0];
}

chdir $cwd;
if ( $flag ) {
    warn( "$flag errors while running programs, no output produced!\n",
	  "Left-over files will remain as $dirname/$basename.*\n" );
} else {
    warn "# mv $base.pdf $outfn\n";
    system( "mv $base.pdf $outfn" );

    my @files = <$base.*>;
    warn "# rm @files\n";
    unlink @files;
}
close $fh;
