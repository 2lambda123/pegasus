#!/usr/bin/env python

"""
Pegasus utility for sending workflow notifications over jabber

"""

##
#  Copyright 2007-2011 University Of Southern California
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
##


__author__ = "Mats Rynge <rynge@isi.edu>"


import warnings
warnings.simplefilter("ignore")

import os
import sys
import time

try:
    import xmpp
except ImportError:
    print >> sys.stderr, "The Python xmpp library is missing. On RHEL and Debian based systems,"
    print >> sys.stderr, "please install the python-xmpp package."
    myexit(1)
    

# --- functions -----------------------------------------------------------------------


def usage():
    print ""
    print "Usage: This tool is used by pegasus-monitord to send event notifications"
    print "over jabber. A set of environment variables are expected to be set:"
    print "   PEGASUS_EVENT"
    print "   PEGASUS_EVENT_TIMESTAMP"
    print "   PEGASUS_JOBID"
    print "   PEGASUS_STATUS (only for end events)"
    print "   JABBER_ID"
    print "   JABBER_HOST"
    print "   JABBER_PASSWORD"
    print "   JABBER_TO"
    print ""
    myexit(1)
    

def validate_env_var(key):
    if not key in os.environ:
        raise RuntimeError(key + " is not defined in the current environment")

def myexit(rc):
    """
    system exit without a stack trace - silly python
    """
    try:
        sys.exit(rc)
    except SystemExit:
        sys.exit(rc)


# --- main ----------------------------------------------------------------------------
    
    
try:
    validate_env_var("PEGASUS_EVENT")
    validate_env_var("PEGASUS_EVENT_TIMESTAMP")
    validate_env_var("PEGASUS_JOBID")
    validate_env_var("JABBER_ID")
    validate_env_var("JABBER_HOST")
    validate_env_var("JABBER_PASSWORD")
    validate_env_var("JABBER_TO")
except RuntimeError, err:
    print >> sys.stderr, err
    usage()


msg = " === Pegasus Workflow Event ===\n" \
    + "Time:   " + os.environ['PEGASUS_EVENT_TIMESTAMP'] + "\n" \
    + "Job id: " + os.environ['PEGASUS_JOBID'] + "\n" \
    + "Event:  " + os.environ['PEGASUS_EVENT'] + "\n"
    
if 'PEGASUS_STATUS' in os.environ:
    msg = msg \
        + "Status: " + os.environ['PEGASUS_STATUS'] + "\n"

jid = xmpp.protocol.JID(os.environ['JABBER_ID'])
cl = xmpp.Client(jid.getDomain(), debug = [])

con = cl.connect((os.environ['JABBER_HOST'], 5223), use_srv=False)
if not con:
    con = cl.connect((os.environ['JABBER_HOST'], 5222), use_srv=False)
    if not con:
        print >> sys.stderr, "Unable to connect to " + os.environ['JABBER_HOST']
        myexit(1)

auth = cl.auth(jid.getNode(), os.environ['JABBER_PASSWORD'], resource = "Pegasus")
if not auth:
    print >> sys.stderr, "Unable to authenticate with " + os.environ['JABBER_ID']
    myexit(1)

mid = cl.send(xmpp.protocol.Message(os.environ['JABBER_TO'], msg))

time.sleep(1)   # some servers will not send the message if you disconnect immediately after sending
cl.disconnect()
myexit(0)
