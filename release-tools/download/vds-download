#! /bin/bash

cvsversion='$Id$'
scriptversion=`echo $cvsversion | awk '{print $3}'`

#
# Conventions
#  if VDS_VERSIONS is set, it should be the name of an existing director
#     to keep versions in (else ~/vdsversions is used)
#  if VDS_HOME is set, it should be the name of a symlink to set to the new version
#  ~/.vds cannot be changed to anything else (nor .vdsrc and .wfrc)
# 
#  we do some error checks up front, but once we start, may leave some things undone
#  ideally a restart of this script will do the right thing,
#   or give the user the option to recover. (.done files eg in downloads)
#
# Users can select the release to download


# To Do
#
#  Trapexit to cleanup TMP directory
#
#  auto-find oficial and latest downloads from the download directories themselves
#
#  set wget timeout shorter and diagnose wget failures
#
#  catch interrup
#
#  maintain log


nightlyListURL=http://vds.isi.edu/cvs-nightly/
nightlyDownloadURL=http://vds.isi.edu/cvs-nightly

officialListURL=http://ci.uchicago.edu/~wilde/twiki/bin/view/VDSWeb/VDSDownload
officialDownloadURL=http://vds.isi.edu/download/

stableVersion=1.4.3

# Get all the files available in nightly build directory

getNightlyList()
{
    wget -O - $nightlyListURL 2>>$log |
    grep tar.gz |
      grep binary |
      sed -e 's/^.*<td>\(.*\).*&nbsp.*MB.*nbsp.*nbsp.*\(vds-.*tar.gz\).*$/\1 \2/'
}

latestNightlyVersion()
{
    getNightlyList | awk '{print $2}' |
    sed  -e 's/^[^-][^-]*-[^-][^-]*-[^-][^-]*-[^-][^-]*-[^-][^-]*-\([^-][^-]*-\)*\([0-9][0-9]*\).*/\2/' |
    sort | tail -1
}

myNightlyVersions()
{
    getNightlyList | grep $libc
}

myOfficialVersions()
{
   getOfcList | grep $libc
}

# Get all files avail in official build directory

getOfcList()
{
    wget -O - $officialListURL 2>>$log | 
    # Note carefully the escaped newline below!!!
    sed -e 's/href=/\
/g' | grep vds-binary | 
    sed -e 's/^\(.*\)\(vds-binary-[^"]\+\)\(.*\)$/\2/'
}


listAvailableVersions()
{
    echo "VDS Versions (for your system type) available for download:"
    echo
    echo "  *** Official VDS Versions ***"
    echo
    myOfficialVersions | sed -e 's/^/  /'
    echo
    echo "  *** Nightly VDS builds ***"
    echo
    echo "   MB  File"
    echo "  ---- --------"
    myNightlyVersions | sed -e 's/^/  /'
    echo
    echo "Stable version is $stableVersion"
    echo "Latest nightly is `latestNightlyVersion` (use file size to asess build sanity)"
}

# Do some basic sanity checks here to try to detect problems up front
# This be be enhanced over time but is currently a rather limited check
# Explain (echo) to the user what we plan to do.

sanityCheck()
{
    local tfile
    if [ _$VDS_HOME != _ ]; then
	if [ -e $VDS_HOME ]; then # Ensure that its a re-nameable symlink
	    if [ ! -L $VDS_HOME ]; then
		errexit "VDS_HOME is set, but its value is not a symbolic link." \
		    "Please correct and re-rerun $self." \
		    "Either unset VDS_HOME (which defaults to ~/vds) or set it to a name that is"\
		    "(or can be created as) a symbolic link."
	    fi
	    dir=`dirname $VDS_HOME`
	    # can we create and remove a file in $VDS_HOME/.. ?
	    # this assures we can later rename the symlink and create a new one
	    tfile=`mktemp $dir/VDS_HOME_check_XXXXXX 2>>$log`
	    if [ $? -ne 0 ]; then
		errexit "Cant access directory $dir - set in VDS_HOME"
	    else
		rm $tfile >>$log 2>&1 
	    fi
	else
	    echo "Will set VDS_HOME value $VDS_HOME as link to downloaded VDS."
	fi
    else
	echo "VDS_HOME is not set (ok)"
	echo "Will set VDS_HOME and symlink $HOME/vds to refer to downloaded VDS."
	VDS_HOME=$HOME/vds
    fi
    echo

    versiondir=${VDS_VERSIONS:-$HOME/vdsversions} # set to default value if not set by user

    if [ -e "$versiondir" ]; then # if it exists
	if [ ! -d "$versiondir" ]; then
	    errexit "$versiondir is not a directory."
	fi
        # can we create and remove a file in $versiondir ?
        # this assures we can later create subdirectories there
	tfile=`mktemp $versiondir/VDS_VERSIONS_check_XXXXXX 2>>$log`
	if [ $? -ne 0 ]; then
	    errexit "Can not modify directory $versiondir"
	else
	    rm $tfile >>$log 2>&1 
	fi
    else
	if ! mkdir -p $versiondir >>$log 2>&1 ; then
	    errexit "Cannot create VDS download version directory $versiondir"
	fi
    fi
    echo "VDS version directory $versiondir will be used for download."
    echo
}

function SetVdsHomeLink()
{
    newvdsdir=$1
    if [ -L $VDS_HOME ]; then
	local renamedlink=$VDS_HOME.`date +%Y.%m%d.%H%M%S`
	echo "Existing symbolic link $VDS_HOME is being moved to $renamedlink"
	if ! mv $VDS_HOME $renamedlink >>$log 2>&1 ; then
	    errexit "Cant rename symlink $vdshome to $renamedlink"
	fi
    fi

    local dirpath=`dirname $VDS_HOME`
    if [ ! -d $dirpath ]; then
	if ! mkdir -p >$log 2>&1 ; then
	    errexit "Can not create directory $dirpath for VDS_HOME=$VDS_HOME."
    	fi
    fi
    if ! ln -s $newvdsdir $VDS_HOME >>$log 2>&1; then
	errexit "Can not create symbolic link VDS_HOME=$VDS_HOME"
    fi
}

TMP=`mktemp -d /tmp/vds-download.XXXXXXX`
export log=$TMP/log

version="nil"
dformat=`date +"%Y%m%d"`
glibc="nil"

#getsystemURL=http://smarty.isi.edu/cgi-bin/cvsweb.cgi/~checkout~/vds/release-tools/getsystem/getsystem
getsystemURL=http://ci.uchicago.edu/~wilde/vds/getsystem # Temporary - FIXME

errexit()
{
    echo ERROR: $1
    shift
    for m in "$@"; do
	echo $m
    done
    echo
    echo $self exiting. Script log $log may have more details.
    echo
    exit 1
}

GetLibcVersion()
{
    wget -P $TMP $getsystemURL >>$log 2>&1
    if [ $? -ne 0 ]; then
	echo "$0: An Error occurred downloading the getsystem utlity." \
	    "If smarty.isi.edu is unavailable, please try again in a few minutes."
    fi
    libc=`perl $TMP/getsystem`
}

downloadLatestStable()
{
    downloadOfficialVersion $stableVersion
}

downloadOfficialVersion()
{
    local ver=$1
echo downloadOfficialVersion $ver
    myOfficialVersions | fgrep $ver >$TMP/v
    local versionsfound=`wc -l $TMP/v | awk '{ print $1}'`
echo versionsfound=$versionsfound
echo TMP/v=`cat $TMP/v`
    if [  $versionsfound -eq 0 ]; then
	echo "Stable version not found online for your system type. Hit interrupt to quit or enter another selection."
	return 1
    elif [ $versionsfound -gt 1 ]; then
	echo "More than one version found:"
	cat $TMP/v
	echo "Hit interrupt to quit or enter another selection."
    else
	downloadRelease $officialDownloadURL `awk '{print $1}' $TMP/v`
    fi
}

downloadLatestNightly()
{
    local latestNightly=`latestNightlyVersion`
    downloadNightlyVersion $latestNightly
}

downloadNightlyVersion()
{
    local ver=$1
    myNightlyVersions | fgrep $ver >$TMP/v
    local versionsfound=`wc -l $TMP/v | awk '{ print $1}'`
    if [  $versionsfound -eq 0 ]; then
	echo
	echo "Nightly version $ver not found online for your system type. Hit interrupt to quit or enter another selection."
	return 1
    elif [ $versionsfound -gt 1 ]; then
	echo
	echo "More than one version found:"
	cat $TMP/v
	echo "Hit interrupt to quit or enter another selection."
    else
	downloadRelease $nightlyDownloadURL `awk '{print $2}' $TMP/v`
    fi
}

downloadSpecificVersion()
{
    local ver=$1
    if [ `expr length $ver` -eq 8 ] && expr $ver : '[0-9]\{8\}' >/dev/null ; then
	downloadNightlyVersion $ver
    elif expr $ver : '[0-9]\+\.[0-9]\+\.[0-9]' ; then
	downloadOfficialVersion $ver
    else
	echo
	echo "Requested version $ver is not a valid version identifier (8 digit date or 1.2.3 dotted release number)"
	return 1
    fi
}

downloadRelease() # Common download function for all release types
{
    local server=$1
    local file=$2
    local dldir=${file%.tar.gz}
    dldir=${dldir#vds-binary-}
    dldir=$versiondir/$dldir

    if [ -d $dldir ]; then
	echo
	echo "Download directory ($dldir)"
	echo "already exists from previous download. Choices are:"
	local ans=_
	while [ "_$ans" != _1 -a "_$ans" != _2 -a "_$ans" != _3 ] ; do
	    echo "  1: use existing download"
	    echo "  2: overwrite with a fresh download"
	    echo "  3: select different release"
	    echo
	    echo -n "Select choice from list above: "
	    read ans
	    if [ "_$ans" = _1 ]; then
		break # Go right to untar - will skip download
	    elif [ "_$ans" = _2 ]; then
		echo Removing $dldir
		rm -rf $dldir/*
		break
	    elif [ "_$ans" = _3 ]; then
		echo
		echo "Download will be skipped - select a different release (or interrupt to exit)"
		echo
		return 1
	    fi
	done
    fi

    if [ "_$ans" != _1 ]; then
	echo; echo
	echo "========== Downloading:"
	echo
	echo "From URL $server/$file"
	echo "To   dir $versiondir/$dir"
	echo
	
	wget -P $dldir  $server/$file # >>$log 2>&1  # FIX: make this less verbose but still show progress bar
	if [ $? -ne 0 ]; then
	    echo $0: An Error has occurred during the downloading of $server/$file - see $log
	    echo
	    echo "========== Download ended with error."
	    return 1
	fi
	
	echo
	echo "========== Download competed."
	echo
    fi

    echo Extracting release from tarball
    cd $dldir
    tar xzf $file
    if [ $? -ne 0 ]; then
	echo
	echo $0: An Error has occurred while untarring the nightly release.
	echo
	echo Most likey cause was the $version tarball was incomplete
	echo
	echo Please re-download the tarball and try again # FIX: Say "remove the tarbal" instead - and which name
	echo
	echo "Exiting vds-download"
	exit 1
    fi 
    echo
    echo Release extracted.
    echo
    SetVdsHomeLink `pwd`/vds-*  # FIX: try "find * -type d -maxdepth 0 | wc -l " to ensure exactly one dir # mw: should always be only one top-level dir in nightly tarball.  OK for now.
}

function AskDownload
{
   local ans=X
   while true; do
       echo "Select VDS release to download:"
       echo "  s for latest stable official version"
       echo "  n for latest nightly build"
       echo "  official version (e.g. 1.4.3)"
       echo "  date of a nightly version (eg 20051214)"
       echo
       echo -n "Enter one the choices above [s]: "
       read ans
       if [ "_$ans" = "_s" -o "_$ans" = "_" ]; then
	   if downloadLatestStable ; then
	       break;
	   fi
       elif [ "_$ans" = "_n" ]; then
	   if downloadLatestNightly ; then
	       break
	   fi
       else
	   if downloadSpecificVersion $ans ; then
	       break
	   fi
       fi
   done
}


#MAIN

self=$0

echo
echo Running $self version $scriptversion

echo
GetLibcVersion
echo Your system type is $libc

sanityCheck

listAvailableVersions

echo
AskDownload

# rm -r $TMP

echo
echo vds-download complete. Log is in $log. # FIX: ask if user wants to remove log

# Prompt to see if user wants to run vds-config

#if test -f $VDS_HOME/setup-user-env.sh ; then   # FIX: NEEDED?
#    source $VDS_HOME/setup-user-env.sh
#fi

if test -f $VDS_HOME/bin/vds-config ; then
    while [ "$ok2" != "y" -a "$ok2" != "n" ] ; do
	echo -n "Do you want to run vds-config to set up the VDS? (y or n): "
	read ok2
	if [ "$ok2" == "y" ]; then
	    echo
	    export VDS_HOME
	    exec $HOME/vds/bin/vds-config
	fi
    done
else
    echo
    echo "Exiting vds-download."
fi

