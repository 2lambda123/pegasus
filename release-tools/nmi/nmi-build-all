#!/bin/bash

#
#  This script builds release packages (mapper, worker, wms) in the
#  NMI Build and Test facility. Note that there are dependencies on
#  NMI environment so this script will probably not work standalone.
#
#  Also note that the script has to be invoked from top-level of the
#  Pegasus source tree. Example:
#    ./release-tools/nmi/nmi-build-all
#

set -e

# make sure we are in the right top level dir
if [ ! -e build.xml -o ! -e setup-devel.sh ]; then
    echo "Please invoke this script from top level of the source tree"
    echo "Example: ./release-tools/nmi/nmi-build-all"
    echo "Exiting..."
    exit 1
fi

export PEGASUS_HOME=`pwd`

# build env
unset CLASSPATH
source setup-devel.sh

# which versions
echo
echo "##### Build tooling versions #####"
java -version 2>&1
ant  -version 2>&1

# Pegasus version
echo
echo "##### Pegasus version and system identifier #####"
PEGASUS_VERSION=`ant version | grep "Pegasus Version:" | sed 's/.*Pegasus Version: //'`
echo "Pegasus version: $PEGASUS_VERSION"
PEGASUS_SYSTEM=`$PEGASUS_HOME/release-tools/getsystem/getsystem`

# cleaning up from previous builds
echo
echo "##### Cleaning up from previous builds #####"
ant clean
rm -rf build-results/ dist/*
mkdir build-results

# create binary
echo
echo "##### Building mapper package (ant dist) #####"
cd $PEGASUS_HOME
ant clean dist
cd dist
rm -rf pegasus-$PEGASUS_VERSION
mv *.tar.gz ../build-results/
cd ../build-results/
ls -l -h

# debian package
if [ -e /etc/debian_version ]; then
    echo
    echo "##### Building Debian package #####"
    cd $PEGASUS_HOME/build-results/
    $PEGASUS_HOME/release-tools/nmi/deb/build-pegasus-deb `pwd`/*.tar
fi

# create worker
echo
echo "##### Building worker package (ant dist-worker) #####"
cd $PEGASUS_HOME
ant clean dist-worker
cd dist
rm -rf pegasus-$PEGASUS_VERSION
mv *.tar.gz ../build-results/
cd ../build-results/
ls -l -h

# wms
echo
echo "##### Creating WMS package #####"

if [ ! -e $PEGASUS_HOME/../public ]; then
    echo "WARNING: Skipping WMS package on this platform as Condor is missing"
else

    # we need to get condor from the NMI input
    cd $PEGASUS_HOME/../public/v*/
    
    echo "Files provided by Condor build:"
    ls -l

    echo "Removing files we do _not_ want..."
    rm -f *.rpm *.sha1 *.md5
    rm -f *unstripped*
    rm -f *debug*
    echo "Files left after first round of removal:"
    ls -l
    # some platforms only have dynamic builds - if so keep it - otherwise rm
    NUM_TARS=`ls *.tar.gz | wc -l`
    if [ $NUM_TARS -gt 1 ]; then
        echo "$NUM_TARS tars still around - will remove dynamic builds"
        rm -f *dynamic*
    fi
    echo "Files left after all pruning:"
    ls -l
    NUM_TARS=`ls *.tar.gz | wc -l`
    if [ $NUM_TARS != 1 ]; then
        echo "$NUM_TARS tars found - we expected 1 and only 1. Exiting..."
        exit 1
    fi
    tar xzf *.tar.gz
    rm *.tar.gz
    cd condor-*
    export CONDOR_DIR=`pwd`
    
    cd $PEGASUS_HOME/dist
    tar xzf ../build-results/pegasus-binary-$PEGASUS_VERSION-$PEGASUS_SYSTEM.tar.gz
    mv pegasus-$PEGASUS_VERSION pegasus-wms-binary-$PEGASUS_VERSION
    export PEGASUS_DIR=`pwd`/pegasus-wms-binary-$PEGASUS_VERSION
    
    cd pegasus-wms-*
    mkdir -p bin sbin etc lib var/spool libexec var/log man/man1
    
    # bin
    cd $CONDOR_DIR/bin
    for FILE in condor_dagman condor_q condor_submit condor_submit_dag condor_rm  condor_wait condor_status; do
        cp -L $FILE $PEGASUS_DIR/bin/
    done
    cd $PEGASUS_DIR/bin/
    ln condor_rm condor_hold
    ln condor_rm condor_release
    
    # sbin
    cd $CONDOR_DIR/sbin
    for FILE in condor_c-gahp condor_c-gahp_worker_thread condor_gridmanager  condor_master condor \
                condor_procd condor_schedd condor_vm-gahp gahp_server gt4_gahp nordugrid_gahp \
                unicore_gahp condor_shadow condor_starter grid_monitor.sh condor_init; do
        if [ -e $FILE ]; then
            cp -L $FILE $PEGASUS_DIR/sbin/
        else
            echo "WARNING: sbin/$FILE does not exist in Condor distribution"
        fi
    done
    cd $PEGASUS_DIR/sbin/
    ln condor condor_on
    ln condor condor_off
    ln condor condor_restart
    ln condor condor_vacate
    ln condor condor_reconfig
    ln condor condor_reschedule
    
    # lib
    cd $CONDOR_DIR/lib
    for FILE in glite gt4 gt4-gahp.jar ugahp.jar; do
        if [ -e $FILE ]; then
            cp -R -L $FILE $PEGASUS_DIR/lib/
        else
            echo "WARNING: lib/$FILE does not exist in Condor distribution"
        fi
    done
    
    # libexec
    cd $CONDOR_DIR/libexec
    for FILE in glite globus-gridftp-server gridftp_wrapper.sh; do
        cp -R -L $FILE $PEGASUS_DIR/libexec/
    done
    
    # man
    cd $CONDOR_DIR/man/man1/
    for FILE in condor_hold.1 condor_master.1 condor_off.1 condor_on.1 condor_q.1 condor_release.1 \
                condor_rm.1 condor_reschedule.1 condor_submit.1 condor_submit_dag.1; do
        cp -L $FILE $PEGASUS_DIR/man/man1/
    done
    
    # condor config files
    cd $PEGASUS_HOME
    cp release-tools/nmi/condor* $PEGASUS_DIR/etc
    
    # appending to the setup scripts
    cat <<EOF >>$PEGASUS_DIR/setup.sh
PATH=\$PEGASUS_HOME/sbin:\$PATH
export PATH
CONDOR_CONFIG=\$PEGASUS_HOME/etc/condor_config
export CONDOR_CONFIG
EOF
cat <<EOF >>$PEGASUS_DIR/setup.csh
setenv PATH \${PEGASUS_HOME}/sbin:\${PATH}
setenv CONDOR_CONFIG \${PEGASUS_HOME}/etc/condor_config
EOF
    
    # tar up the results
    cd $PEGASUS_HOME/dist/
    tar czf ../build-results/pegasus-wms-binary-$PEGASUS_VERSION-$PEGASUS_SYSTEM.tar.gz \
            pegasus-wms-binary-$PEGASUS_VERSION
    rm -rf pegasus-wms-binary-$PEGASUS_VERSION condor-*
fi

echo
echo "##### Build completed successfully #####"
echo
echo "The resulting files are:"
(cd $PEGASUS_HOME/build-results && find . -type f -exec ls -l -h {} \;)
exit 0

