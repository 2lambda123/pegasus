.\" This file or a portion of this file is licensed under the terms of
.\" the Globus Toolkit Public License, found in file GTPL, or at
.\" http://www.globus.org/toolkit/download/license.html. This notice must
.\" appear in redistributions of this file, with or without modification.
.\"
.\" Redistributions of this Software, with or without modification, must
.\" reproduce the GTPL in: (1) the Software, or (2) the Documentation or
.\" some other similar material which is provided with the Software (if
.\" any).
.\"
.\" Copyright 1999-2004 University of Chicago and The University of
.\" Southern California. All rights reserved.
.\"
.\"
.\" $Id: gendax.1,v 1.11 2005/09/06 16:26:43 griphyn Exp $
.\"
.\" Authors: Jens-S. Vöckler, Yong Zhao
.\"
.TH "gendax" "1" "1.3.10" "GriPhyN Virtual Data System"
.SH NAME
gendax \- run the abstract planner
.SH SYNOPSIS
.LP
Group 1 options:
.br
.B gendax
[\-Dprop [..]] [\-d db-prefix] [\-o outfile] [\-l label] [\-\-verbose] \-n ns \-i name \-v version
.LP 
Group 2 options:
.br
.B gendax
[\-Dprop [..]] [\-d db-prefix] [\-o outfile] [\-l label] [\-\-verbose]
(\-f f1[,f2[..]]] | \-D dv1[,dv2[..]] | \-F fn | \-L fn)
.br
.B gendax
[\-Dprop [..]] \-V
.SH DESCRIPTION
To make use of the Definitions entered into the database, the 
.B gendax
command allow the production of an abstract DAG. The aDAG will be
represented as an XML document. The contents describe how the requested
derivation or filename can be produced from the knowledge in the database.
.PP
At this point, multi-matches for a derivation are resolved on a
first-found, first-taken basis.
.PP
If multiple production for the same file exist, again the issue is
resolved on a first-found, first-taken basis.
.PP
The production of the DAX is in a sense 
.I build
style, meaning that the complete information will be generated. At
the abstract level, the abstract planner has no knowledge about file
existence.
.SH ARGUMENTS
Any option will be displayed with its long options synonym(s).
.TP
.B \-Dprop
The -D options allows an experienced user to override certain properties
which influence the program execution, among them the default location of
the user's properties file and the VDS home location. One may set several
CLI properties by giving this option multiple times.
.I The -D option(s) must be the first option on the command line. 
A CLI property take precedence over the properties file property 
of the same key.
.TP
.B \-d db-prefix 
.PD 0
.TP
.PD 1
.B \-\-dbase db-prefix
.I The database prefix is currently unused.
.IP
Default is to use the VDC pointed to by the
.I vds.db.vdc.schema
property. If this property is unset, the 
.I SingleFileSchema
becomes the chosen schema, and the property
.I vds.db.schema.file.store
defaults to
.IR $VDS_HOME/var/vds.db ,
the eventual default database file.
.TP
.PD 0
.B \-o fn
.TP
.PD 1
.B \-\-output fn
The optional output attributes allows to redirect the product DAX 
into the specified file. If this option is not specified, the output will be
produced on 
.IR stdout .
Please note that debug messages on 
.I stderr
might mingle with the production output.
.IP
Default is to use
.I stdout
to print the DAX.
.TP
.PD 0
.B \-m max
.TP
.PD 1
.B \-\-maxdepth max
The maximum depth option allows to limit the extend and thus time of the
search. It limits the construction of the abstract DAG to those jobs that
could be found, starting from the data product to materialize. 
.IP
The maximum depth for cut-off is counted as hops along the 
.IR minimum
path from the root of the search to any node. The level of a job as 
reported inside the resulting DAX file counts along the
.IR maximum
path from the root to any node. Therefore, in the case of unbalanced
paths, the result may contain jobs that have a level labeling which is
higher than maxdepth argument.
.IP
Default is to use a maximum depth of 256. Very complex workflows require
raising this limit. 
.TP
.PD 0
.B \-l label
.TP
.PD 1
.B \-\-label label
The label is then name given to an output DAX. If no label is specified,
the name will be "test". The label of a DAX is being used by the
concrete planner for various purposes. It will become part of each
generated submit file, thus you may want to give you DAXes a distinct
name that allows you to select jobs belonging to one workflow. 
.IP
The DAX label is used by the concrete planner to generate the DAG- and
logfile names by appending the appropriate suffix. 
.IP
Default is to use the name
.IR test
as a label.
.TP
.B \-X xmlns
.PD 0
.TP
.PD 1
.B \-\-xmlns xmlns
This option permits to generate an explicit namespace for the DAX file.
Documents with explicit namespace are easier to incorporate into other
XML documents. 
.IP
Default is not to use XML namespaces in the DAX document. 
.TP
.PD 0
.B \-V
.TP
.PD 1
.B \-\-version
displays the version of the GriPhyN Virtual Data System you are using.
.TP
.B \-\-verbose
increases the verbosity of messages about what is going on. 
.LP
The following options present
.I group 1
options. They should not be mixed with 
.I group 2
options mentioned below.
.TP
.PD 0
.B \-n ns
.TP
.B \-\-namespace ns
.TP
.B \-i n
.TP
.B \-\-name n
.TP
.B \-v v
.TP
.PD 1
.B \-\-ver v
specifies the search for a specific set of derivations. All derivations 
that matches will be produced and all dependent derivation etc. until the 
edge of the graph.
.IP
Minimally, the 
.I name 
of the derivation must be specified. If 
.I version 
and
.I namespace 
are not specified (as is assumed to be usually the case), they are
ignored during the search. If multiple matches exist, the first match is
taken.
.IP
The
.I name
option is a mandatory. There are no defaults. These options should not be
mixed with
.IR \-D ,
.IR \-L ,
.IR \-f ,
and 
.I \-F
(group 2) options.
.LP
The following options describe 
.I group 2
options. These options should not be mixed with 
.I group 1 
options mentioned above.
.TP
.PD 0
.B \-f lfn
.TP
.B \-\-file lfn
.TP
.PD 1
.B \-\-lfn lfn
This mode of operation, which can be mixed with the
.I \-D 
mode, produces the workflow to generate the requested logical filename
or filenames. This option may be specified multiple times.
Alternatively, comma-separated filename lists may be used.
.IP
When specifying a production file, the virtual data system will produce
the first (later: all) derivation that produces this file, and all the
derivations that produce input of the top derivation etc. until the edge
of the graph.
.IP
This is a mandatory option, there are no defaults. It can be mixed with
.IR \-D ,
.IR \-L ,
.IR \-f ,
and 
.I \-F
(group 2) options. It should not be mixed with the 
.IR \-n ,
.IR \-i ,
and
.I \-v 
(group 1) options. 
.TP
.PD 0
.B \-D dv
.TP
.B \-\-dv dv
.TP
.PD 1
.B \-\-derivation dv
This mode of operation, which can be mixed with the
.I \-f
mode, produces the workflow to run the requested derivation or 
derivations. This option may be specified multiple times, or 
with a comma-separated list of fully-qualified definition names 
of derivations. 
.IP
When specifying a derivation to produce, the virtual data system will try
to match and produce all derivations, and its dependents. 
.IP
This is a mandatory option, there are no defaults. It can be mixed with
.IR \-f ,
.IR \-L ,
and 
.I \-F
(group 2) options. It should not be mixed with the 
.IR \-n ,
.IR \-i ,
and
.I \-v 
(group 1) options. 
.TP
.PD 0
.B \-F fn
.TP
.PD 1
.B \-\-filelist fn
This mode of operation permits to extend beyond commandline length
limitations. The file specified by
.I fn
contains one logical filename per line, or empty lines. Comments start
with a # and extend to the end of the line. This option may be specified
multiple times.
.IP
When specifying a derivation to produce, the virtual data system will try
to match and produce all derivations, and its dependents. 
.IP
This is a mandatory option, there are no defaults. It can be mixed with
.IR \-f ,
.IR \-D ,
and 
.I \-L
(group 2) options. It should not be mixed with the 
.IR \-n , 
.IR \-i ,
and
.I \-v 
(group 1) options. 
.TP
.PD 0
.B \-L fn
.TP
.PD 1
.B \-\-dvlist fn
This mode of operation permits to extend beyond commandline length
limitations. The file specified by
.I fn
contains one fully-qualified derivation per line, or empty lines.
Comments start with a # and extend to the end of the line. This option
may be specified multiple times.
.IP
When specifying a derivation to produce, the virtual data system will try
to match and produce all derivations, and its dependents. 
.IP
This is a mandatory option, there are no defaults. It can be mixed with
.IR \-f ,
.IR \-D ,
and 
.I \-F
(group 2) options. It should not be mixed with the 
.IR \-n , 
.IR \-i ,
and
.I \-v 
(group 1) options. 
.SH "RETURN VALUE"
If the abstract routing produced any result, the exit code will be 0. If 
the routing process ran successfully, but failed to produce a result,
the exit code will be 1. Regular runtime errors produce an exit code of
2. The error message of runtime errors should help to pin-point the
problem. Aborted executions result in an exit code of 3. In this case,
please first examine the message and your configuration files was well
as the way you invoke 
.I gendax
before filing an error report. 
.SH FILES
.TP
.B $VDS_HOME/etc/vdl-1.23.xsd
is the suggested location of the latest XML schema to read the database.
.TP
.B $VDS_HOME/etc/dax-1.8.xsd
is the suggested location of the latest DAX schema to produce DAX output.
.TP
.B $VDS_HOME/etc/properties
contains the system properties with all configurable options.
.TP
.B $HOME/.vdsrc
contains the user properties with all configurable options.
.TP
.B gvds.jar
contains all compiled Java bytecode to run the GriPhyN Virtual Data System.
.SH "ENVIRONMENT VARIABLES"
.TP
.B $VDS_HOME
is the suggested base directory of your the execution environment.
.TP
.B $JAVA_HOME
should be set and point to a valid location to start the intended Java
virtual machine as
.IR $JAVA_HOME/bin/java .
.TP
.B $CLASSPATH
should be set to contain all necessary files for the execution environment.
Please make sure that your 
.I CLASSPATH
includes pointer to the Xerces 2.6.0 classes to run this program.
.SH "EXAMPLE"
.LP
The following is a simple invocation to obtain data:
.nf
\f(CB
$ gendax -l hello-world -f voeckler.hw.txt
<?xml version="1.0" encoding="UTF-8"?>
<!-- generated: 2005-08-16T13:06:45-05:00 -->
<!-- generated by: voeckler [??] -->
<adag xmlns="http://www.griphyn.org/chimera/DAX" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.griphyn.org/chimera/DAX http://www.griphyn.org/chimera/dax-1.10.xsd" version="1.10" count="1" index="0" name="hello-world" jobCount="1" fileCount="1" childCount="0">
<!-- part 1: list of all referenced files (may be empty) -->
  <filename file="voeckler.hw.txt" link="output"/>
<!-- part 2: definition of all jobs (at least one) -->
  <job id="ID000001" namespace="tut" name="echo" level="1" dv-namespace="voeckler" dv-name="hello">
    <argument>Hello World </argument>
    <stdout file="voeckler.hw.txt" link="output" varname="file"/>
    <uses file="voeckler.hw.txt" link="output" dontRegister="false" dontTransfer="false"/>
  </job>
<!-- part 3: list of control-flow dependencies (may be empty) -->
</adag>
\fP
.fi
.LP
The following is an example of a 
.I incorrect 
invocation of 
.BR gendax .
.nf
\f(CB
$ gendax gendax --output merge.dax --label merge --dv merge --namespace test
\fP
.fi
The above invocation mixes group 1 and group 2 options. It asks for two
derivations. The first derivation is logically *::merge:* and the second
derivation is test::*:*. The latter is the first DV found in your VDC
that belongs to the 
.I test
namespace.
.SH "SEE ALSO"
.BR insertvdc (1),
.BR updatevdc (1),
.BR searchvdc (1),
.BR gencdag (1).
.SH "AUTHORS"
Jens-S. Vöckler <voeckler at cs dot uchicago dot edu>,
.\"Jens-S. V\*:ockler 
.br
Mike Wilde <wilde at mcs dot anl dot gov>,
.br
Yong Zhao <yongzh at cs dot uchicago dot edu>.
.PP
GVDS
.B http://www.griphyn.org/vds/
.br
GriPhyN
.BR http://www.griphyn.org/
